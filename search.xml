<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在 Xcode 中為免費開發者帳戶重新建立憑證</title>
      <link href="/renew-xcode-profile-free-develope-account/"/>
      <url>/renew-xcode-profile-free-develope-account/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="免費帳戶憑證"><a href="#免費帳戶憑證" class="headerlink" title="免費帳戶憑證"></a>免費帳戶憑證</h2><p>免費版開發者帳戶的憑證有效期限只有 7 天，可以參考此連結。<br><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E5%85%8D%E8%B2%BB%E9%96%8B%E7%99%BC%E5%B8%B3%E8%99%9F%E7%9A%84-ios-app-%E5%91%BD%E4%B8%AD%E6%B3%A8%E5%AE%9A%E5%8F%AA%E8%83%BD%E6%B4%BB%E4%B8%83%E5%A4%A9-8fd2cc849bfb" target="_blank" rel="noopener">免費開發帳號的 iOS App 命中注定只能活七天 !</a></p><p>理論上來說，超過期限只要重新從 Xcode 安裝 App 就會自動重簽 (renew)，但如果在期限內想要直接延期呢？</p><h2 id="建立新的憑證"><a href="#建立新的憑證" class="headerlink" title="建立新的憑證"></a>建立新的憑證</h2><p>如果想要直接延期，唯一的方法只有重新建立一個憑證：</p><ul><li><p>從 Preference 中的 Accounts<br><img src="https://i.imgur.com/JfTJGet.png" alt="Preference > Accounts"></p></li><li><p>選擇右下角的 Manage Certificates…<br><img src="https://i.imgur.com/r5PAFur.png" alt="黃框處"></p></li><li><p>按下去，選擇左下角的 <code>+</code><br><img src="https://i.imgur.com/Q59J2Tj.png" alt="黃框處"></p></li><li><p>選擇 Apple Development<br><img src="https://i.imgur.com/bSelwuz.png" alt=""></p></li></ul><p>之後就會新增一個憑證，可以回去 Targets 看憑證的確更新了。<br><img src="https://i.imgur.com/9MsNUqd.png" alt="紅字"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> Xcode </tag>
            
            <tag> ios </tag>
            
            <tag> renew </tag>
            
            <tag> certificate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3選擇器 :not()</title>
      <link href="/css-not-selecter/"/>
      <url>/css-not-selecter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>假設有多個一樣 <code>label</code> 的元素要套用一種樣式，但又有幾個需要排除在外時使用。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li><p>HTML:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CSS</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.ex-box</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#455A64</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ex</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><style>.ex-box {    background-color: #455A64;    text-align: center;}.ex {    color: #f00;    font-style: italic;    font-weight: bold;}</style><div class="ex-box"><span class="ex">1</span><br>    <span class="ex">2</span><br>    <span class="ex">3</span><br>    <span class="ex">4</span><br></div><blockquote><p>可以看到上面：1~4 都有<em>斜體</em>跟<strong>粗體</strong>，為了方便觀察，這裡讓文字變為紅色</p></blockquote><hr><ul><li>HTML:<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex-ignored<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>接著將 3 號加上 <code>not-ex-ignored</code> 的 id。</p><ul><li>CSS<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.not-ex-box</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#455A64</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.not-ex</span><span class="token pseudo-class">:not(#not-ex-ignored)</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>並將此 id 略過（使用 <code>:not</code> 選擇器）</p><style>.not-ex-box {    background-color: #455A64;    text-align: center;}.not-ex:not(#not-ex-ignored) {    color: #f00;    font-style: italic;    font-weight: bold;}</style><div class="not-ex-box"><span class="not-ex">1</span><br>    <span class="not-ex">2</span><br>    <span class="not-ex" id="not-ex-ignored">3</span><br>    <span class="not-ex">4</span><br></div><blockquote><p>如此一來，就只有三號沒有套用到屬性。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> css </tag>
            
            <tag> selector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Perl 模組安裝</title>
      <link href="/perl-install-module/"/>
      <url>/perl-install-module/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="使用自動安裝的環境"><a href="#使用自動安裝的環境" class="headerlink" title="使用自動安裝的環境"></a>使用自動安裝的環境</h2><pre class="line-numbers language-bash"><code class="language-bash">perl -MCPAN -e shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>類似於 <code>apt</code>、<code>brew</code> 的好用套件，輸入指令會進入此環境中，成功的話終端機會顯示此畫面:</li></ul><pre class="line-numbers language-bash"><code class="language-bash">cman<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><pre class="line-numbers language-bash"><code class="language-bash">cman<span class="token operator">></span> <span class="token function">install</span> Module::Name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>直接下 install 指令 後面接模組名稱即可。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> perl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Arduino 上使用中斷</title>
      <link href="/arduino-interrupt/"/>
      <url>/arduino-interrupt/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="新增中斷"><a href="#新增中斷" class="headerlink" title="新增中斷"></a>新增中斷</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token function">attachInterrupt</span><span class="token punctuation">(</span><span class="token function">digitalPinToInterrupt</span><span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span class="token punctuation">,</span> ISR<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">attachInterrupt</span><span class="token punctuation">(</span>interrupt<span class="token punctuation">,</span> ISR<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">attachInterrupt</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> ISR<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>有三種可選：<ul><li>第一個參數代表幾號中斷或是幾號 pin，通常用第一種寫法最保險</li><li>第二個參數放 ISR，當中斷發生時要做的事</li><li>第三個參數為發生中斷的模式，下面有詳細介紹</li></ul></li></ul><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul><li>LOW：當 pin 處於低電位的時候觸發中斷</li><li>RISING：當 pin 從低電位轉為高電位時觸發中斷</li><li>FALLING：當 pin 從高電位轉為高電位時觸發中斷</li><li>CHANGE：當 pin 的電位發生改變時觸發中斷</li><li>HIGH：當 pin 處於高電位時觸發中斷（只適用 arduino due）</li></ul><h2 id="移除中斷"><a href="#移除中斷" class="headerlink" title="移除中斷"></a>移除中斷</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token function">detachInterrupt</span><span class="token punctuation">(</span><span class="token function">digitalPinToInterrupt</span><span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">detachInterrupt</span><span class="token punctuation">(</span>interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">detachInterrupt</span><span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>一樣有三個寫法，與新增中斷的第一個參數相同。</li></ul><h2 id="關閉-開啟中斷"><a href="#關閉-開啟中斷" class="headerlink" title="關閉/開啟中斷"></a>關閉/開啟中斷</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token function">noInterrupts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">interrupts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>noInterrupts</code> 不會將 <code>reset</code> 中斷關閉。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> Arduino </tag>
            
            <tag> interrupt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 ANSI 跳脫碼印出有色文字</title>
      <link href="/ascii-color/"/>
      <url>/ascii-color/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="ANSI-跳脫碼"><a href="#ANSI-跳脫碼" class="headerlink" title="ANSI 跳脫碼"></a>ANSI 跳脫碼</h2><p>ANSI 跳脫碼，即 ASCII Escape Code，標準 CSI 格式為</p><pre class="line-numbers language-shell"><code class="language-shell">CSI n1 [;n2 [;...]] m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>n1</code> 通常填入 <code>\x1b</code>，在 ASCII 表中 <code>0x1b</code> 代表著 escape。</li><li><code>n1</code>、<code>n2</code> 為 <strong>SGR (Select Graphic Rendition)</strong>，可參考表格對應相對的值。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[[Linux C] ANSI逃脫碼與printf顏色教學](http://naeilproj.blogspot.com/2015/08/linux-c-c-printf.html)">[1]</span></a></sup></li></ul><h2 id="顏色輸出"><a href="#顏色輸出" class="headerlink" title="顏色輸出"></a>顏色輸出</h2><h3 id="範例：粗紅體"><a href="#範例：粗紅體" class="headerlink" title="範例：粗紅體"></a>範例：粗紅體</h3><pre class="line-numbers language-c"><code class="language-c">\x1b<span class="token punctuation">[</span><span class="token punctuation">;</span><span class="token number">31</span><span class="token punctuation">;</span>1m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>SGR 30~37 代表著顏色，可參照此表格<br><img src="https://i.imgur.com/8HEFwxZ.png" alt=""><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ANSI跳脫序列](https://zh.wikipedia.org/wiki/ANSI%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97)">[2]</span></a></sup></li><li>後面的 1 代表粗體，不寫則為一般字型；通常一般的終端機會將粗體顯示成較亮的顏色，而非粗體。</li><li>有些終端機提供用高位的數字指定較亮的顏色，90-97 及 100-107，如下圖<br><img src="https://i.imgur.com/mEP8AjU.png" alt=""></li></ul><h3 id="xterm-256color"><a href="#xterm-256color" class="headerlink" title="xterm-256color"></a>xterm-256color</h3><ul><li>使用 8 位元的 SGR，進而提供 256 色的輸出。<br><img src="https://i.imgur.com/hjjHfve.png" alt=""></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://naeilproj.blogspot.com/2015/08/linux-c-c-printf.html" target="_blank" rel="noopener">[Linux C] ANSI逃脫碼與printf顏色教學</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.wikipedia.org/wiki/ANSI%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97" target="_blank" rel="noopener">ANSI跳脫序列</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> C </tag>
            
            <tag> ANSI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread GUI 繪圖引擎 - 硬體</title>
      <link href="/rtgui-dc-hw/"/>
      <url>/rtgui-dc-hw/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Rtgui 中的 dc（drawable canvas） 也就是繪圖引擎，可以說是 rtgui 中最重要的一個部分，其中分成 3 個部分：給硬體的 dc_hw、給 buffer 的 dc_buffer 以及給 client 的。</p><p>接下來將會追蹤 dc_hw 中的程式碼，分析 rtgui 是如何在螢幕上面描繪點線面。</p><hr><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><blockquote><p>File: dc.h</p></blockquote><h3 id="dc"><a href="#dc" class="headerlink" title="dc"></a>dc</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * The abstract device context * * Normally, a DC is a drawable canvas, user can draw point/line/cycle etc * on the DC. * * There are several kinds of DC: * - Hardware DC; * - Client DC; * - Buffer DC; */</span><span class="token keyword">struct</span> rtgui_dc<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* type of device context */</span>    rt_uint32_t type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* dc engine */</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> rtgui_dc_engine <span class="token operator">*</span>engine<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="dc-engine"><a href="#dc-engine" class="headerlink" title="dc_engine"></a>dc_engine</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> rtgui_dc_engine<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* interface */</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>draw_point<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>draw_color_point<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> rtgui_color_t color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>draw_vline<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>draw_hline<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fill_rect<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>blit_line<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> rt_uint8_t <span class="token operator">*</span>line_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>blit<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_point <span class="token operator">*</span>dc_point<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dest<span class="token punctuation">,</span> rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>fini<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="dc-hw"><a href="#dc-hw" class="headerlink" title="dc_hw"></a>dc_hw</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * The hardware device context * * The hardware DC is a context based on hardware device, for examle the * LCD device. The operations on the hardware DC are reflected to the real * hardware. * */</span><span class="token keyword">struct</span> rtgui_dc_hw<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc parent<span class="token punctuation">;</span>    rtgui_widget_t <span class="token operator">*</span>owner<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> rtgui_graphic_driver <span class="token operator">*</span>hw_driver<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="hw-engine"><a href="#hw-engine" class="headerlink" title="hw_engine"></a>hw_engine</h3><blockquote><p>File: dc_hw.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">struct</span> rtgui_dc_engine dc_hw_engine <span class="token operator">=</span><span class="token punctuation">{</span>    rtgui_dc_hw_draw_point<span class="token punctuation">,</span>    rtgui_dc_hw_draw_color_point<span class="token punctuation">,</span>    rtgui_dc_hw_draw_vline<span class="token punctuation">,</span>    rtgui_dc_hw_draw_hline<span class="token punctuation">,</span>    rtgui_dc_hw_fill_rect<span class="token punctuation">,</span>    rtgui_dc_hw_blit_line<span class="token punctuation">,</span>    rtgui_dc_hw_blit<span class="token punctuation">,</span>    rtgui_dc_hw_fini<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="啟動-dc"><a href="#啟動-dc" class="headerlink" title="啟動 dc"></a>啟動 dc</h2><p>我們可以從 rtgui 官方提供的範例發現，在使用 dc 前，需要先利用 <code>rtgui_dc_begin_drawing</code> 來啟動引擎，並在結束時呼叫 <code>rtgui_dc_end_drawing</code>；而啟動時，會判斷要使用哪種 dc，並啟動，如 1866 至 1871 行</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* create client or hardware DC */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">rtgui_region_is_flat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>owner<span class="token operator">-></span>clip<span class="token punctuation">)</span> <span class="token operator">==</span> RT_EOK<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">rtgui_rect_is_equal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>owner<span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>owner<span class="token operator">-></span>clip<span class="token punctuation">.</span>extents<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> RT_EOK<span class="token punctuation">)</span>        dc <span class="token operator">=</span> <span class="token function">rtgui_dc_hw_create</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        dc <span class="token operator">=</span> <span class="token function">rtgui_dc_client_create</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果判斷為 hw，則進入 <code>rtgui_dc_hw_create</code> </p><hr><h2 id="建立-dc"><a href="#建立-dc" class="headerlink" title="建立 dc"></a>建立 dc</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_dc_hw_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 dc</td><td>dc 指標</td></tr></tbody></table><table><thead><tr><th><code>*owner</code></th></tr></thead><tbody><tr><td>dc 擁有者</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span><span class="token function">rtgui_dc_hw_create</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>owner<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* adjudge owner */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>owner <span class="token operator">==</span> RT_NULL <span class="token operator">||</span> owner<span class="token operator">-></span>toplevel <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span> <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* create DC */</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">rtgui_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        dc<span class="token operator">-></span>parent<span class="token punctuation">.</span>type <span class="token operator">=</span> RTGUI_DC_HW<span class="token punctuation">;</span>        dc<span class="token operator">-></span>parent<span class="token punctuation">.</span>engine <span class="token operator">=</span> <span class="token operator">&amp;</span>dc_hw_engine<span class="token punctuation">;</span>        dc<span class="token operator">-></span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>        dc<span class="token operator">-></span>hw_driver <span class="token operator">=</span> <span class="token function">rtgui_graphic_driver_get_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>dc<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="運作-dc-畫圖"><a href="#運作-dc-畫圖" class="headerlink" title="運作 dc (畫圖)"></a>運作 dc (畫圖)</h2><h3 id="點"><a href="#點" class="headerlink" title="點"></a>點</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_dc_hw_draw_point</code></p><!-- tab 性質 --><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>畫點</td><td>void</td></tr></tbody></table><!-- endtab --><!-- tab 元素 --><table><thead><tr><th><code>*self</code></th><th style="text-align:center"><code>x</code></th><th style="text-align:center"><code>y</code></th></tr></thead><tbody><tr><td>dc 本體</td><td style="text-align:center">座標 x</td><td style="text-align:center">座標 y</td></tr></tbody></table><!-- endtab --><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * draw a logic point on device */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_draw_point</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> y <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* draw this point */</span>    dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">set_pixel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>dc<span class="token operator">-></span>owner<span class="token operator">-></span>gc<span class="token punctuation">.</span>foreground<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先傳進去的座標一律為邏輯位置，也就是以此 dc 所屬物件（有可能是視窗、元件等）的 $(x_1,y_1)$ 為原點之座標；由於 $(x_1,y_1)$ 為該物件（通常為矩形）的左下角，所以傳入的座標不會有負號。</p><p>接著將邏輯座標轉為實際座標（也就是螢幕上的真正位置），所以把 $(x,y)$ 轉成 $(x+x_1,y+y_1)$；由於 dc 是跟隨物件的，所以新座標不可超過 $(x_2,y_2)$，也就是右上角。</p><p>最後利用驅動中設定好的 <code>set_pixel</code> 函數來上色，這裡使用預設顏色。</p><hr><h3 id="彩色點"><a href="#彩色點" class="headerlink" title="彩色點"></a>彩色點</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_dc_hw_draw_color_point</code></p><!-- tab 性質 --><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>畫彩色點</td><td>void</td></tr></tbody></table><!-- endtab --><!-- tab 元素 --><table><thead><tr><th><code>*self</code></th><th style="text-align:center"><code>x</code></th><th style="text-align:center"><code>y</code></th><th><code>color</code></th></tr></thead><tbody><tr><td>dc 本體</td><td style="text-align:center">座標 x</td><td style="text-align:center">座標 y</td><td>所選的顏色</td></tr></tbody></table><!-- endtab --><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_draw_color_point</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> rtgui_color_t color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> y <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* draw this point */</span>    dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">set_pixel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>color<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟上面最大的不同是可以選顏色 (131)。</p><hr><h3 id="水平線"><a href="#水平線" class="headerlink" title="水平線"></a>水平線</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * draw a logic vertical line on device */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_draw_vline</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    y1 <span class="token operator">=</span> y1 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    y2 <span class="token operator">=</span> y2 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">></span> y2<span class="token punctuation">)</span>        <span class="token function">_int_swap</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2 <span class="token operator">||</span> y2 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">)</span>        y1 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y2 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        y2 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* draw vline */</span>    dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">draw_vline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>dc<span class="token operator">-></span>owner<span class="token operator">-></span>gc<span class="token punctuation">.</span>foreground<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="鉛直線"><a href="#鉛直線" class="headerlink" title="鉛直線"></a>鉛直線</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * draw a logic horizontal line on device */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_draw_hline</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> y <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* convert logic to device */</span>    x1 <span class="token operator">=</span> x1 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    x2 <span class="token operator">=</span> x2 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> x2<span class="token punctuation">)</span>        <span class="token function">_int_swap</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2 <span class="token operator">||</span> x2 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        x1 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x2 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* draw hline */</span>    dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">draw_hline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>dc<span class="token operator">-></span>owner<span class="token operator">-></span>gc<span class="token punctuation">.</span>foreground<span class="token punctuation">)</span><span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_fill_rect</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_rect <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_color_t color<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t y1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get background color */</span>    color <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>gc<span class="token punctuation">.</span>background<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* convert logic to device */</span>    x1 <span class="token operator">=</span> rect<span class="token operator">-></span>x1 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        x1 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    x2 <span class="token operator">=</span> rect<span class="token operator">-></span>x2 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x2 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x2 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">;</span>    y1 <span class="token operator">=</span> rect<span class="token operator">-></span>y1 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">)</span>        y1 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    y2 <span class="token operator">=</span> rect<span class="token operator">-></span>y2 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y2 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y2 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        y2 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* fill rect */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> y1 <span class="token operator">&lt;</span> y2<span class="token punctuation">;</span> y1<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">draw_hline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>color<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="blit"><a href="#blit" class="headerlink" title="blit(?)"></a>blit(?)</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_blit_line</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> rt_uint8_t <span class="token operator">*</span>line_data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* convert logic to device */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> y <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    x1 <span class="token operator">=</span> x1 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    x2 <span class="token operator">=</span> x2 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> x2<span class="token punctuation">)</span>        <span class="token function">_int_swap</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2 <span class="token operator">||</span> x2 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        x1 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x2 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">;</span>    dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">draw_raw_hline</span><span class="token punctuation">(</span>line_data<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_blit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span>                             <span class="token keyword">struct</span> rtgui_point <span class="token operator">*</span>dc_point<span class="token punctuation">,</span>                             <span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dest<span class="token punctuation">,</span>                             rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* not blit in hardware dc */</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread GUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> GUI </tag>
            
            <tag> dc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread GUI Server</title>
      <link href="/rtgui-server/"/>
      <url>/rtgui-server/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="基本事件結構"><a href="#基本事件結構" class="headerlink" title="基本事件結構"></a>基本事件結構</h2><p>server 掌管整個 GUI system 的所有事件 (event)，而根據不同的事件定義不同的結構；在每個不同的結構中都有基本的欄位 <code>_RTGUI_EVENT_WIN_ELEMENTS</code>：</p><blockquote><p>File: event.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * RTGUI Window Event */</span><span class="token macro property">#<span class="token directive keyword">define</span> _RTGUI_EVENT_WIN_ELEMENTS \    struct rtgui_event parent; \    struct rtgui_win *wid;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>rtgui_event</code> 即為事件的基本結構：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> rtgui_event<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* the event type */</span>    <span class="token keyword">enum</span> _rtgui_event_type type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* user field of event */</span>    rt_uint16_t user<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the event sender */</span>    <span class="token keyword">struct</span> rtgui_app <span class="token operator">*</span>sender<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* mailbox to acknowledge request */</span>    rt_mailbox_t ack<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rtgui_event rtgui_event_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="基本結構設定"><a href="#基本結構設定" class="headerlink" title="基本結構設定"></a>基本結構設定</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> RTGUI_EVENT_INIT(e, t)  do      \{                                       \    (e)->type = (t);                    \    (e)->user = 0;                      \    (e)->sender = rtgui_app_self();     \    (e)->ack = RT_NULL;                 \} while (0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="啟動-server"><a href="#啟動-server" class="headerlink" title="啟動 server"></a>啟動 server</h2><blockquote><p>File: server.c</p></blockquote><p>首先，定義一個 app 名叫 server :</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> rtgui_app <span class="token operator">*</span>rtgui_server_app <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接著透過 <code>rtgui_server_entry</code> 啟動 app，也就是 server:<br><br><i class="fa fa-code"></i> Code: <code>rtgui_server_entry</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>啟動 server</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*parameter</code></th></tr></thead><tbody><tr><td style="text-align:center">未使用</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * rtgui server thread's entry */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_server_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>parameter<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _WIN32_NATIVE</span>    <span class="token comment" spellcheck="true">/* set the server thread to highest */</span>    HANDLE hCurrentThread <span class="token operator">=</span> <span class="token function">GetCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SetThreadPriority</span><span class="token punctuation">(</span>hCurrentThread<span class="token punctuation">,</span> THREAD_PRIORITY_HIGHEST<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* create rtgui server application */</span>    rtgui_server_app <span class="token operator">=</span> <span class="token function">rtgui_app_create</span><span class="token punctuation">(</span><span class="token string">"rtgui"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rtgui_server_app <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"Create GUI server failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">rtgui_object_set_event_handler</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>rtgui_server_app<span class="token punctuation">)</span><span class="token punctuation">,</span>                                   rtgui_server_event_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init mouse and show */</span>    <span class="token function">rtgui_mouse_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RTGUI_USING_MOUSE_CURSOR</span>    <span class="token function">rtgui_mouse_show_cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">rtgui_app_run</span><span class="token punctuation">(</span>rtgui_server_app<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rtgui_app_destroy</span><span class="token punctuation">(</span>rtgui_server_app<span class="token punctuation">)</span><span class="token punctuation">;</span>    rtgui_server_app <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最後會進入 <code>rtgui_app_run</code> 並正式開始執行 server，也就是進入所屬的 event handler</p><hr><h2 id="Event-Handler"><a href="#Event-Handler" class="headerlink" title="Event Handler"></a>Event Handler</h2><p>Event handler 也就是 server 的進入點</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread GUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> GUI </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread GUI Window</title>
      <link href="/rtgui-window/"/>
      <url>/rtgui-window/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> rtgui_win<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* inherit from container */</span>    rtgui_container_t parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* update count */</span>    rt_base_t update<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* drawing count */</span>    rt_base_t drawing<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_rect drawing_rect<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parent window. RT_NULL if the window is a top level window */</span>    <span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>parent_window<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_region outer_clip<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_rect outer_extent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the widget that will grab the focus in current window */</span>    <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>focused_widget<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* which app I belong */</span>    <span class="token keyword">struct</span> rtgui_app <span class="token operator">*</span>app<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* window style */</span>    rt_uint16_t style<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* window state flag */</span>    <span class="token keyword">enum</span> rtgui_win_flag flag<span class="token punctuation">;</span>    rtgui_modal_code_t modal_code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* last mouse event handled widget */</span>    rtgui_widget_t <span class="token operator">*</span>last_mevent_widget<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* window title */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_wintitle <span class="token operator">*</span>_title_wgt<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* call back */</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_activate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_deactivate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the key is sent to the focused widget by default. If the focused widget     * and all of it's parents didn't handle the key event, it will be handled     * by @func on_key     *     * If you want to handle key event on your own, it's better to overload     * this function other than handle EVENT_KBD in event_handler.     */</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_key<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reserved user data */</span>    <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Private data. */</span>    <span class="token function">rt_base_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>_do_show<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* app ref_count */</span>    rt_uint16_t app_ref_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* win magic flag, magic value is 0xA5A55A5A */</span>    rt_uint32_t    magic<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="定義物件類型"><a href="#定義物件類型" class="headerlink" title="定義物件類型"></a>定義物件類型</h3><blockquote><p>File: window.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token function">DEFINE_CLASS_TYPE</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> <span class="token string">"win"</span><span class="token punctuation">,</span>                  <span class="token function">RTGUI_PARENT_TYPE</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">,</span>                  _rtgui_win_constructor<span class="token punctuation">,</span>                  _rtgui_win_destructor<span class="token punctuation">,</span>                  <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="建立視窗"><a href="#建立視窗" class="headerlink" title="建立視窗"></a>建立視窗</h2><p><i class"fa="" fa-code"=""></i> Code: <code>rtgui_win_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立視窗</td><td>視窗指標</td></tr></tbody></table><table><thead><tr><th><code>*parent_window</code></th><th><code>*title</code></th><th><code>*rect</code></th><th><code>style</code></th></tr></thead><tbody><tr><td>上層視窗</td><td>視窗標題</td><td>視窗的大小</td><td>一些風格</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_win_t <span class="token operator">*</span><span class="token function">rtgui_win_create</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>parent_window<span class="token punctuation">,</span>                              <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">,</span>                              rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">,</span>                              rt_uint16_t style<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate win memory */</span>    win <span class="token operator">=</span> <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span><span class="token function">rtgui_widget_create</span><span class="token punctuation">(</span>RTGUI_WIN_TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_win_init</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> parent_window<span class="token punctuation">,</span> title<span class="token punctuation">,</span> rect<span class="token punctuation">,</span> style<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_widget_destroy</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> win<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>透過 <code>rtgui_win_init</code> 完成設定</p><hr><p><i class="fa fa-code"></i> Code: <code>rtgui_win_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化視窗</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>*parent_window</code></th><th><code>*title</code></th><th><code>*rect</code></th><th><code>style</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>上層視窗</td><td>視窗標題</td><td>視窗的大小</td><td>一些風格</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">rtgui_win_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>parent_window<span class="token punctuation">,</span>                   <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">,</span>                   rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">,</span>                   rt_uint16_t style<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent window */</span>    win<span class="token operator">-></span>parent_window <span class="token operator">=</span> parent_window<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set title, rect and style */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        win<span class="token operator">-></span>title <span class="token operator">=</span> <span class="token function">rt_strdup</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        win<span class="token operator">-></span>title <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token function">rtgui_widget_set_rect</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token operator">-></span>style <span class="token operator">=</span> style<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_NO_TITLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_NO_BORDER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rtgui_rect trect <span class="token operator">=</span> <span class="token operator">*</span>rect<span class="token punctuation">;</span>        win<span class="token operator">-></span>_title_wgt <span class="token operator">=</span> <span class="token function">rtgui_wintitle_create</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>            <span class="token keyword">goto</span> __on_err<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_NO_BORDER<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rtgui_rect_inflate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trect<span class="token punctuation">,</span> WINTITLE_BORDER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_NO_TITLE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            trect<span class="token punctuation">.</span>y1 <span class="token operator">-</span><span class="token operator">=</span> WINTITLE_HEIGHT<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">rtgui_widget_set_rect</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>trect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Update the clip of the wintitle manually. */</span>        <span class="token function">rtgui_region_subtract_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span>                                   <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span>                                   <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* The window title is always un-hidden for simplicity. */</span>        <span class="token function">rtgui_widget_show</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_region_init_with_extents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_clip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>trect<span class="token punctuation">)</span><span class="token punctuation">;</span>        win<span class="token operator">-></span>outer_extent <span class="token operator">=</span> trect<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_region_init_with_extents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_clip<span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span>        win<span class="token operator">-></span>outer_extent <span class="token operator">=</span> <span class="token operator">*</span>rect<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_rtgui_win_create_in_server</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">goto</span> __on_err<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    win<span class="token operator">-></span>app<span class="token operator">-></span>window_cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>__on_err<span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建立主視窗"><a href="#建立主視窗" class="headerlink" title="建立主視窗"></a>建立主視窗</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_mainwin_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立主視窗</td><td>視窗指標</td></tr></tbody></table><table><thead><tr><th><code>*parent_window</code></th><th><code>*title</code></th><th><code>style</code></th></tr></thead><tbody><tr><td>上層視窗</td><td>視窗標題</td><td>一些風格</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_win_t <span class="token operator">*</span><span class="token function">rtgui_mainwin_create</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>parent_window<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">,</span> rt_uint16_t style<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_rect rect<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get rect of main window */</span>    <span class="token function">rtgui_get_mainwin_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">rtgui_win_create</span><span class="token punctuation">(</span>parent_window<span class="token punctuation">,</span> title<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">,</span> style<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_mainwin_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立一個固定大小的視窗，這個大小被設定在 <code>_mainwin_rect</code> 這個全域變數裡面，可以透過 <code>rtgui_get_mainwin_rect</code> 來取得這個值。</p><hr><h2 id="刪除視窗"><a href="#刪除視窗" class="headerlink" title="刪除視窗"></a>刪除視窗</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_win_destroy</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除視窗</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>目標視窗</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_destroy</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* close the window first if it's not. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CLOSED<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rtgui_event_win_close eclose<span class="token punctuation">;</span>        <span class="token function">RTGUI_EVENT_WIN_CLOSE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eclose<span class="token punctuation">)</span><span class="token punctuation">;</span>        eclose<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_DESTROY_ON_CLOSE<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">_rtgui_win_deal_close</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span>                                  <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>eclose<span class="token punctuation">,</span>                                  RT_TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token function">_rtgui_win_deal_close</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span>                                  <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>eclose<span class="token punctuation">,</span>                                  RT_TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* set the RTGUI_WIN_STYLE_DESTROY_ON_CLOSE flag so the window will be         * destroyed after the event_loop */</span>        win<span class="token operator">-></span>style <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_STYLE_DESTROY_ON_CLOSE<span class="token punctuation">;</span>        <span class="token function">rtgui_win_end_modal</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> RTGUI_MODAL_CANCEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_widget_destroy</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_destroy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="關閉視窗"><a href="#關閉視窗" class="headerlink" title="關閉視窗"></a>關閉視窗</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_win_close</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>關閉視窗</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>目標視窗</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* send a close event to myself to get a consistent behavior */</span>rt_bool_t <span class="token function">rtgui_win_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_event_win_close eclose<span class="token punctuation">;</span>    <span class="token function">RTGUI_EVENT_WIN_CLOSE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eclose<span class="token punctuation">)</span><span class="token punctuation">;</span>    eclose<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">_rtgui_win_deal_close</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span>                                 <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>eclose<span class="token punctuation">,</span>                                 RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_close<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>_rtgui_win_deal_close</code> 完成關閉動作</p><hr><p><i class="fa fa-code"></i> Code: <code>_rtgui_win_deal_close</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除視窗</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>*event</code></th><th><code>force_close</code></th></tr></thead><tbody><tr><td>目標視窗</td><td>關閉事件</td><td>是否要強致關閉</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> rt_bool_t <span class="token function">_rtgui_win_deal_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">,</span>                                       <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">,</span>                                       rt_bool_t force_close<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>on_close <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>win<span class="token operator">-></span><span class="token function">on_close</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>force_close<span class="token punctuation">)</span>            <span class="token keyword">return</span> RT_FALSE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">rtgui_win_hide</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_FLAG_CLOSED<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* rtgui_win_end_modal cleared the RTGUI_WIN_FLAG_MODAL in win->flag so         * we have to record it. */</span>        <span class="token function">rtgui_win_end_modal</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> RTGUI_MODAL_CANCEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    win<span class="token operator">-></span>app<span class="token operator">-></span>window_cnt<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>app<span class="token operator">-></span>window_cnt <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>win<span class="token operator">-></span>app<span class="token operator">-></span>state_flag <span class="token operator">&amp;</span> RTGUI_APP_FLAG_KEEP<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_app_exit</span><span class="token punctuation">(</span><span class="token function">rtgui_app_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_DESTROY_ON_CLOSE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_win_destroy</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="設定視窗"><a href="#設定視窗" class="headerlink" title="設定視窗"></a>設定視窗</h2><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_set_rect</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定視窗大小</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>*rect</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>新大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_set_rect</span><span class="token punctuation">(</span>rtgui_win_t <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_event_win_resize event<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL <span class="token operator">||</span> rect <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent <span class="token operator">=</span> <span class="token operator">*</span>rect<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CONNECTED<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* set window resize event to server */</span>        <span class="token function">RTGUI_EVENT_WIN_RESIZE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        event<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>        event<span class="token punctuation">.</span>rect <span class="token operator">=</span> <span class="token operator">*</span>rect<span class="token punctuation">;</span>        <span class="token function">rtgui_server_post_event</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_win_resize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_set_rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="OnActive-函式"><a href="#OnActive-函式" class="headerlink" title="OnActive 函式"></a>OnActive 函式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_set_onactivate</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 OnActive 函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>OnActive 函式</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_set_onactivate</span><span class="token punctuation">(</span>rtgui_win_t <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        win<span class="token operator">-></span>on_activate <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_set_onactivate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="OnDeactive-函式"><a href="#OnDeactive-函式" class="headerlink" title="OnDeactive 函式"></a>OnDeactive 函式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_set_ondeactivate</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 OnDeactive 函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>OnDeactive 函式</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_set_ondeactivate</span><span class="token punctuation">(</span>rtgui_win_t <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        win<span class="token operator">-></span>on_deactivate <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_set_ondeactivate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="OnClose-函式"><a href="#OnClose-函式" class="headerlink" title="OnClose 函式"></a>OnClose 函式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_set_onclose</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 OnClose 函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>OnClose 函式</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_set_onclose</span><span class="token punctuation">(</span>rtgui_win_t <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        win<span class="token operator">-></span>on_close <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_set_onclose<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="OnKey"><a href="#OnKey" class="headerlink" title="OnKey"></a>OnKey</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_set_onkey</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 OnKey 函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>OnKey 函式</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_set_onkey</span><span class="token punctuation">(</span>rtgui_win_t <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        win<span class="token operator">-></span>on_key <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_set_onkey<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="視窗的行為"><a href="#視窗的行為" class="headerlink" title="視窗的行為"></a>視窗的行為</h2><h3 id="動態模式"><a href="#動態模式" class="headerlink" title="動態模式"></a>動態模式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_enter_modal</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>進入動態模式</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_base_t <span class="token function">rtgui_win_enter_modal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_base_t exit_code <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_event_win_modal_enter emodal<span class="token punctuation">;</span>    <span class="token function">RTGUI_EVENT_WIN_MODAL_ENTER_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>emodal<span class="token punctuation">)</span><span class="token punctuation">;</span>    emodal<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_server_post_event_sync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>emodal<span class="token punctuation">,</span>                                     <span class="token keyword">sizeof</span><span class="token punctuation">(</span>emodal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span>    win<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">;</span>    win<span class="token operator">-></span>app_ref_count <span class="token operator">=</span> win<span class="token operator">-></span>app<span class="token operator">-></span>ref_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    exit_code <span class="token operator">=</span> <span class="token function">rtgui_app_run</span><span class="token punctuation">(</span>win<span class="token operator">-></span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_MODAL<span class="token punctuation">;</span>    <span class="token function">rtgui_win_hide</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_enter_modal<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>rtgui_win_end_modal</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>離開動態模式</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>modal_code</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>動態模式編號</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_end_modal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_modal_code_t modal_code<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>app_ref_count <span class="token operator">&lt;</span> win<span class="token operator">-></span>app<span class="token operator">-></span>ref_count<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_app_exit</span><span class="token punctuation">(</span>win<span class="token operator">-></span>app<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">" =*=> rtgui_win_end_modal while (win->app_ref_count &lt; win->app->ref_count) \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">rtgui_app_exit</span><span class="token punctuation">(</span>win<span class="token operator">-></span>app<span class="token punctuation">,</span> modal_code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* remove modal mode */</span>    win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_MODAL<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_end_modal<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="現身"><a href="#現身" class="headerlink" title="現身"></a>現身</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_show</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>現身該視窗</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>is_modal</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>是否為動態模式</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_base_t <span class="token function">rtgui_win_show</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">,</span> rt_bool_t is_modal<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RTGUI_WIDGET_UNHIDE</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token operator">-></span>magic <span class="token operator">=</span> RTGUI_WIN_MAGIC<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_modal<span class="token punctuation">)</span>        win<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_do_show<span class="token punctuation">)</span>        <span class="token keyword">return</span> win<span class="token operator">-></span><span class="token function">_do_show</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">rtgui_win_do_show</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_show<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果視窗本身有設定 <code>_do_show</code> 函式的話，則呼叫本身的；否則呼叫 <code>rtgui_win_do_show</code></p><hr><p><i class="fa fa-code"></i> Code: <code>rtgui_win_do_show</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>視窗現身</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_base_t <span class="token function">rtgui_win_do_show</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_base_t exit_code <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_app <span class="token operator">*</span>app<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_event_win_show eshow<span class="token punctuation">;</span>    <span class="token function">RTGUI_EVENT_WIN_SHOW_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eshow<span class="token punctuation">)</span><span class="token punctuation">;</span>    eshow<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span>    win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_CLOSED<span class="token punctuation">;</span>    win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_CB_PRESSED<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* if it does not register into server, create it in server */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CONNECTED<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_rtgui_win_create_in_server</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span>            <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* set window unhidden before notify the server */</span>    <span class="token function">rtgui_widget_show</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_server_post_event_sync</span><span class="token punctuation">(</span><span class="token function">RTGUI_EVENT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eshow<span class="token punctuation">)</span><span class="token punctuation">,</span>                                     <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_win_show<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* It could not be shown if a parent window is hidden. */</span>        <span class="token function">rtgui_widget_hide</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>focused_widget <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token function">rtgui_widget_focus</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app <span class="token operator">=</span> win<span class="token operator">-></span>app<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>app <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set main window */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token operator">-></span>main_object <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token function">rtgui_app_set_main_win</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        exit_code <span class="token operator">=</span> <span class="token function">rtgui_win_enter_modal</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_do_show<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="隱藏"><a href="#隱藏" class="headerlink" title="隱藏"></a>隱藏</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_hide</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>隱藏視窗</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_hide</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>win <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CONNECTED<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* send hidden message to server */</span>        <span class="token keyword">struct</span> rtgui_event_win_hide ehide<span class="token punctuation">;</span>        <span class="token function">RTGUI_EVENT_WIN_HIDE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ehide<span class="token punctuation">)</span><span class="token punctuation">;</span>        ehide<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_server_post_event_sync</span><span class="token punctuation">(</span><span class="token function">RTGUI_EVENT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ehide<span class="token punctuation">)</span><span class="token punctuation">,</span>                                         <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_win_hide<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"hide win: %s failed\n"</span><span class="token punctuation">,</span> win<span class="token operator">-></span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">rtgui_widget_hide</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_ACTIVATE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_hide<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="啟動"><a href="#啟動" class="headerlink" title="啟動"></a>啟動</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_activate</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>啟動視窗</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_err_t <span class="token function">rtgui_win_activate</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_event_win_activate eact<span class="token punctuation">;</span>    <span class="token function">RTGUI_EVENT_WIN_ACTIVATE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eact<span class="token punctuation">)</span><span class="token punctuation">;</span>    eact<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">rtgui_server_post_event_sync</span><span class="token punctuation">(</span><span class="token function">RTGUI_EVENT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eact<span class="token punctuation">)</span><span class="token punctuation">,</span>                                        <span class="token keyword">sizeof</span><span class="token punctuation">(</span>eact<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_activate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="移動"><a href="#移動" class="headerlink" title="移動"></a>移動</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_move</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>進入動態模式</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th style="text-align:center"><code>x</code></th><th style="text-align:center"><code>y</code></th></tr></thead><tbody><tr><td>視窗本體</td><td style="text-align:center">目標 x</td><td style="text-align:center">目標 y</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_move</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>wgt<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_event_win_move emove<span class="token punctuation">;</span>    <span class="token keyword">int</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">;</span>    <span class="token function">RTGUI_EVENT_WIN_MOVE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>emove<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        wgt <span class="token operator">=</span> <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">;</span>        dx <span class="token operator">=</span> x <span class="token operator">-</span> wgt<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        dy <span class="token operator">=</span> y <span class="token operator">-</span> wgt<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>        <span class="token function">rtgui_widget_move_to_logic</span><span class="token punctuation">(</span>wgt<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        wgt <span class="token operator">=</span> <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_widget_move_to_logic</span><span class="token punctuation">(</span>wgt<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        wgt <span class="token operator">=</span> <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        dx <span class="token operator">=</span> x <span class="token operator">-</span> wgt<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        dy <span class="token operator">=</span> y <span class="token operator">-</span> wgt<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>        <span class="token function">rtgui_widget_move_to_logic</span><span class="token punctuation">(</span>wgt<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">rtgui_rect_move</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_extent<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CONNECTED<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_widget_hide</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emove<span class="token punctuation">.</span>wid   <span class="token operator">=</span> win<span class="token punctuation">;</span>        emove<span class="token punctuation">.</span>x     <span class="token operator">=</span> x<span class="token punctuation">;</span>        emove<span class="token punctuation">.</span>y     <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_server_post_event_sync</span><span class="token punctuation">(</span><span class="token function">RTGUI_EVENT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>emove<span class="token punctuation">)</span><span class="token punctuation">,</span>                                         <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_win_move<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">rtgui_widget_show</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_move<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="OnDraw"><a href="#OnDraw" class="headerlink" title="OnDraw"></a>OnDraw</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_ondraw</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>OnDraw</td><td>boolean</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> rt_bool_t <span class="token function">rtgui_win_ondraw</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_rect rect<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_event_paint event<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* begin drawing */</span>    dc <span class="token operator">=</span> <span class="token function">rtgui_dc_begin_drawing</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dc <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get window rect */</span>    <span class="token function">rtgui_widget_get_rect</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* fill area */</span>    <span class="token function">rtgui_dc_fill_rect</span><span class="token punctuation">(</span>dc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* widget drawing */</span>    <span class="token comment" spellcheck="true">/* paint each widget */</span>    <span class="token function">RTGUI_EVENT_PAINT_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span>wid <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token function">rtgui_container_dispatch_event</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span>                                   <span class="token punctuation">(</span>rtgui_event_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rtgui_dc_end_drawing</span><span class="token punctuation">(</span>dc<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_FALSE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="更新重疊區域"><a href="#更新重疊區域" class="headerlink" title="更新重疊區域"></a>更新重疊區域</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_update_clip</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>更新重疊區域</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_update_clip</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_container <span class="token operator">*</span>cnt<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_list_node <span class="token operator">*</span>node<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CLOSED<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* Reset the inner clip of title. */</span>        <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>extent <span class="token operator">=</span> win<span class="token operator">-></span>outer_extent<span class="token punctuation">;</span>        <span class="token function">rtgui_region_copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_clip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_region_subtract_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">,</span>                                   <span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">,</span>                                   <span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Reset the inner clip of window. */</span>        <span class="token function">rtgui_region_intersect_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">,</span>                                    <span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_clip<span class="token punctuation">,</span>                                    <span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent <span class="token operator">=</span> win<span class="token operator">-></span>outer_extent<span class="token punctuation">;</span>        <span class="token function">rtgui_region_copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_clip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* update the clip info of each child */</span>    cnt <span class="token operator">=</span> <span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rtgui_list_foreach</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>cnt<span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rtgui_widget_t <span class="token operator">*</span>child <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_widget_update_clip</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_update_clip<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Event-Handler"><a href="#Event-Handler" class="headerlink" title="Event Handler"></a>Event Handler</h2><p>此 event handler 也就是 window 的函式進入點</p><p><i class="fa fa-code"></i> Code: <code>rtgui_win_event_handler</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>window 函式進入點</td><td>boolean</td></tr></tbody></table><table><thead><tr><th><code>*object</code></th><th><code>*event</code></th></tr></thead><tbody><tr><td>物件本體</td><td>行為本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_bool_t <span class="token function">rtgui_win_event_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>object<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>object <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>event <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    win <span class="token operator">=</span> <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token operator">-></span>type<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_SHOW<span class="token punctuation">:</span>        <span class="token function">rtgui_win_do_show</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_HIDE<span class="token punctuation">:</span>        <span class="token function">rtgui_win_hide</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_CLOSE<span class="token punctuation">:</span>        <span class="token function">_rtgui_win_deal_close</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> event<span class="token punctuation">,</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* don't broadcast WIN_CLOSE event to others */</span>        <span class="token keyword">return</span> RT_TRUE<span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_MOVE<span class="token punctuation">:</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rtgui_event_win_move <span class="token operator">*</span>emove <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_win_move <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* move window */</span>        <span class="token function">rtgui_win_move</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> emove<span class="token operator">-></span>x<span class="token punctuation">,</span> emove<span class="token operator">-></span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_ACTIVATE<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_UNDER_MODAL <span class="token operator">||</span>                <span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* activate a hide window */</span>            <span class="token keyword">return</span> RT_TRUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        win<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_FLAG_ACTIVATE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* There are many cases where the paint event will follow this activate         * event and just repaint the title is not a big deal. So just repaint         * the title if there is one. If you want to update the content of the         * window, do it in the on_activate callback.*/</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>            <span class="token function">rtgui_widget_update</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>on_activate <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            win<span class="token operator">-></span><span class="token function">on_activate</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_DEACTIVATE<span class="token punctuation">:</span>        win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_ACTIVATE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* No paint event follow the deactive event. So we have to update         * the title manually to reflect the change. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>            <span class="token function">rtgui_widget_update</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>on_deactivate <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>            win<span class="token operator">-></span><span class="token function">on_deactivate</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_UPDATE_END<span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_CLIP_INFO<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">/* update win clip */</span>        <span class="token function">rtgui_win_update_clip</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_PAINT<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>            <span class="token function">rtgui_widget_update</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_win_ondraw</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> GUIENGIN_USING_VFRAMEBUFFER</span>    <span class="token keyword">case</span> RTGUI_EVENT_VPAINT_REQ<span class="token punctuation">:</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rtgui_event_vpaint_req <span class="token operator">*</span>req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_vpaint_req <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">;</span>        <span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* get drawing dc */</span>        dc <span class="token operator">=</span> <span class="token function">rtgui_win_get_drawing</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token operator">-></span>sender<span class="token operator">-></span>buffer <span class="token operator">=</span> dc<span class="token punctuation">;</span>        <span class="token function">rt_completion_done</span><span class="token punctuation">(</span>req<span class="token operator">-></span>sender<span class="token operator">-></span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">case</span> RTGUI_EVENT_MOUSE_BUTTON<span class="token punctuation">:</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rtgui_event_mouse <span class="token operator">*</span>emouse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_mouse<span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_rect_contains_point</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent<span class="token punctuation">,</span>                                      emouse<span class="token operator">-></span>x<span class="token punctuation">,</span> emouse<span class="token operator">-></span>y<span class="token punctuation">)</span> <span class="token operator">==</span> RT_EOK<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">_win_handle_mouse_btn</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>tobj <span class="token operator">=</span> <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> tobj<span class="token operator">-></span><span class="token function">event_handler</span><span class="token punctuation">(</span>tobj<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_MOUSE_MOTION<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">rtgui_container_dispatch_mouse_event</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_mouse <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_KBD<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">/* we should dispatch key event firstly */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_HANDLE_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>widget<span class="token punctuation">;</span>            rt_bool_t res <span class="token operator">=</span> RT_FALSE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* we should dispatch the key event just once. Once entered the             * dispatch mode, we should swtich to key handling mode. */</span>            win<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_FLAG_HANDLE_KEY<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* dispatch the key event */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>widget <span class="token operator">=</span> win<span class="token operator">-></span>focused_widget<span class="token punctuation">;</span>                    widget <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">;</span>                    widget <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>event_handler <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>                    res <span class="token operator">=</span> <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">event_handler</span><span class="token punctuation">(</span>                              <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_HANDLE_KEY<span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* in key handling mode(it may reach here in             * win->focused_widget->event_handler call) */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>on_key <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>                <span class="token keyword">return</span> win<span class="token operator">-></span><span class="token function">on_key</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_COMMAND<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_container_dispatch_event</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_TRUE<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> RT_TRUE<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">rtgui_container_event_handler</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_FALSE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_event_handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread GUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> GUI </tag>
            
            <tag> window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread GUI Widget</title>
      <link href="/rtgui-widget/"/>
      <url>/rtgui-widget/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>上一篇我們說明了 RTGUI 是如何透過 C 實現物件導向的設計邏輯，這篇將會說明在 RTGUI 中的最小物件 “widget” 是如何創建、運行及刪除的。</p><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><blockquote><p>File: widget.h</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * the base widget object */</span><span class="token keyword">struct</span> rtgui_widget<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* inherit from rtgui_object */</span>    <span class="token keyword">struct</span> rtgui_object object<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the widget that contains this widget */</span>    <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the window that contains this widget */</span>    <span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>toplevel<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the widget children and sibling */</span>    rtgui_list_t sibling<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* widget flag */</span>    rt_int32_t flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* hardware device context */</span>    rt_uint32_t dc_type<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> rtgui_dc_engine <span class="token operator">*</span>dc_engine<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the graphic context of widget */</span>    rtgui_gc_t gc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the widget extent */</span>    rtgui_rect_t extent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the visiable extent (includes the rectangles of children) */</span>    rtgui_rect_t extent_visiable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the rect clip information */</span>    rtgui_region_t clip<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* minimal width and height of widget */</span>    rt_int16_t min_width<span class="token punctuation">,</span> min_height<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* widget align */</span>    rt_int32_t align<span class="token punctuation">;</span>    rt_uint16_t border<span class="token punctuation">;</span>    rt_uint16_t border_style<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* call back */</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_focus_in<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_focus_out<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* user private data */</span>    rt_uint32_t user_data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rtgui_widget rtgui_widget_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>記錄包含他的 widget、所在的 window、一些屬性等</p><h3 id="四方形結構體"><a href="#四方形結構體" class="headerlink" title="四方形結構體"></a>四方形結構體</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Rectangle structure */</span><span class="token keyword">struct</span> rtgui_rect<span class="token punctuation">{</span>    rt_int16_t x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rtgui_rect rtgui_rect_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>對角線 (x1,y1)、(x2,y2)</p><hr><h3 id="定義物件類型"><a href="#定義物件類型" class="headerlink" title="定義物件類型"></a>定義物件類型</h3><blockquote><p>File: widget.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token function">DEFINE_CLASS_TYPE</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> <span class="token string">"widget"</span><span class="token punctuation">,</span>                  <span class="token function">RTGUI_PARENT_TYPE</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">,</span>                  _rtgui_widget_constructor<span class="token punctuation">,</span>                  _rtgui_widget_destructor<span class="token punctuation">,</span>                  <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_widget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>_rtgui_widget<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="建立-widget"><a href="#建立-widget" class="headerlink" title="建立 widget"></a>建立 widget</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 widget</td><td>widget 指標</td></tr></tbody></table><table><thead><tr><th><code>*widget_type</code></th></tr></thead><tbody><tr><td>欲建立的 widget 種類</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_widget_t <span class="token operator">*</span><span class="token function">rtgui_widget_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> rtgui_type_t <span class="token operator">*</span>widget_type<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>widget<span class="token punctuation">;</span>    widget <span class="token operator">=</span> <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span><span class="token function">rtgui_object_create</span><span class="token punctuation">(</span>widget_type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> widget<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呼叫 <code>rtgui_object_create</code>，型態為 widget 完成，並透過 <code>RTGUI_WIDGET</code> 檢查正確性</p><hr><h2 id="刪除-widget"><a href="#刪除-widget" class="headerlink" title="刪除 widget"></a>刪除 widget</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_destroy</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 widget</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th></tr></thead><tbody><tr><td>欲刪除的 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_destroy</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">rtgui_object_destroy</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_destroy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一樣透過 <code>rtgui_object_destroy</code> 來完成</p><hr><h2 id="設定-widget"><a href="#設定-widget" class="headerlink" title="設定 widget"></a>設定 widget</h2><p>RTT GUI 提供一些 API 給使用者去設定 widget 的樣式與行為</p><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_rectangle</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的大小</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>x</code></th><th><code>y</code></th><th><code>width</code></th><th><code>height</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>起始座標 x</td><td>y</td><td>寬度</td><td>高度</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_rectangle</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_rect_t rect<span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>x1 <span class="token operator">=</span> x<span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>y1 <span class="token operator">=</span> y<span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>x2 <span class="token operator">=</span> x <span class="token operator">+</span> width<span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>y2 <span class="token operator">=</span> y <span class="token operator">+</span> height<span class="token punctuation">;</span>    <span class="token function">rtgui_widget_set_rect</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_rectangle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填入正確的 (x1,y1)、(x2,y2)</p><hr><h3 id="Parent"><a href="#Parent" class="headerlink" title="Parent"></a>Parent</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_parent</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的上層元素</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>parent</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>上層元素 (widget)</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_parent</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_widget_t <span class="token operator">*</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* set parent and toplevel widget */</span>    widget<span class="token operator">-></span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="大小下界"><a href="#大小下界" class="headerlink" title="大小下界"></a>大小下界</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_minsize</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的大小下界</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>width</code></th><th><code>height</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>寬度</td><td>高度</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_minsize</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>min_width <span class="token operator">=</span> width<span class="token punctuation">;</span>    widget<span class="token operator">-></span>min_height <span class="token operator">=</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_minsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="寬度下界"><a href="#寬度下界" class="headerlink" title="寬度下界"></a>寬度下界</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_minwidth</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的寬度下界</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>width</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>寬度</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_minwidth</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>min_width <span class="token operator">=</span> width<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_minwidth<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="高度下界"><a href="#高度下界" class="headerlink" title="高度下界"></a>高度下界</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_minheight</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的高度下界</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>height</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>高度</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_minheight</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>min_height <span class="token operator">=</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_minheight<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="邊框風格"><a href="#邊框風格" class="headerlink" title="邊框風格"></a>邊框風格</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_border</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的邊框風格</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>style</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>風格</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * set widget draw style */</span><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_border</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rt_uint32_t style<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>border_style <span class="token operator">=</span> style<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>style<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> RTGUI_BORDER_NONE<span class="token punctuation">:</span>        widget<span class="token operator">-></span>border <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_BORDER_SIMPLE<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_UP<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_DOWN<span class="token punctuation">:</span>        widget<span class="token operator">-></span>border <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_BORDER_STATIC<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_RAISE<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_SUNKEN<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_BOX<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_EXTRA<span class="token punctuation">:</span>        widget<span class="token operator">-></span>border <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        widget<span class="token operator">-></span>border <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_border<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Focus-函式"><a href="#Focus-函式" class="headerlink" title="Focus 函式"></a>Focus 函式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_onfocus</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的 focus func</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>focus func</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_onfocus</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>on_focus_in <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_onfocus<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Unfocus-函式"><a href="#Unfocus-函式" class="headerlink" title="Unfocus 函式"></a>Unfocus 函式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_onunfocus</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的 unfocus func</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>focus func</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_onunfocus</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>on_focus_out <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_onunfocus<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>這裡是用<strong>指標函數</strong>的方式將行為函式填入結構中，要使用時可直接呼叫結構中的元素使用。</p></blockquote><hr><h2 id="Widget-的行為"><a href="#Widget-的行為" class="headerlink" title="Widget 的行為"></a>Widget 的行為</h2><p>上一節整理了設定 widget 的風格，接下來整理 widget 的行為</p><h3 id="移動到相對位置"><a href="#移動到相對位置" class="headerlink" title="移動到相對位置"></a>移動到相對位置</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_move_to_logic</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>移動 widget 到相對位置</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th><th style="text-align:center"><code>dx</code></th><th style="text-align:center"><code>dy</code></th></tr></thead><tbody><tr><td style="text-align:center">欲移動的 widget</td><td style="text-align:center">位移量 x</td><td style="text-align:center">y</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * This function moves widget and its children to a logic point */</span><span class="token keyword">void</span> <span class="token function">rtgui_widget_move_to_logic</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_rect_t rect<span class="token punctuation">;</span>    rtgui_widget_t <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* give clip of this widget back to parent */</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* get the parent rect, even if it's a transparent parent. */</span>        rect <span class="token operator">=</span> parent<span class="token operator">-></span>extent_visiable<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* we should find out the none-transparent parent */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> parent<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span> parent <span class="token operator">=</span> parent<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* reset clip info */</span>        <span class="token function">rtgui_region_init_with_extents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_region_intersect_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* give back the extent */</span>        <span class="token function">rtgui_region_union</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* move this widget (and its children if it's a container) to destination point */</span>    <span class="token function">_widget_move</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* update this widget */</span>    <span class="token function">rtgui_widget_update_clip</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_move_to_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="移動-widget"><a href="#移動-widget" class="headerlink" title="移動 widget"></a>移動 widget</h4><p><i class="fa fa-code"></i> Code: <code>_widget_move</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>移動 widget</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th><th style="text-align:center"><code>dx</code></th><th style="text-align:center"><code>dy</code></th></tr></thead><tbody><tr><td style="text-align:center">欲移動的 widget</td><td style="text-align:center">位移量 x</td><td style="text-align:center">y</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_widget_move</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_widget<span class="token operator">*</span> widget<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_list_node <span class="token operator">*</span>node<span class="token punctuation">;</span>    rtgui_widget_t <span class="token operator">*</span>child<span class="token punctuation">,</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token function">rtgui_rect_move</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* handle visiable extent */</span>    widget<span class="token operator">-></span>extent_visiable <span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">;</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* we should find out the none-transparent parent */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> parent<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span> parent <span class="token operator">=</span> parent<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>parent<span class="token punctuation">)</span>        <span class="token function">rtgui_rect_intersect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>parent<span class="token operator">-></span>extent_visiable<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent_visiable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reset clip info */</span>    <span class="token function">rtgui_region_init_with_extents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* move each child */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_IS_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_list_foreach</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            child <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">_widget_move</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Focus-widget"><a href="#Focus-widget" class="headerlink" title="Focus widget"></a>Focus widget</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_focus</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>focus widget</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th></tr></thead><tbody><tr><td style="text-align:center">欲 focus 的 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @brief Focuses the widget. The focused widget is the widget which can receive the keyboard events * @param widget a widget * @note The widget has to be attached to a toplevel widget, otherwise it will have no effect */</span><span class="token keyword">void</span> <span class="token function">rtgui_widget_focus</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>old_focus<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RTGUI_WIDGET_IS_FOCUSABLE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">RTGUI_WIDGET_IS_ENABLE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    old_focus <span class="token operator">=</span> <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel<span class="token punctuation">)</span><span class="token operator">-></span>focused_widget<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_focus <span class="token operator">==</span> widget<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* it's the same focused widget */</span>    <span class="token comment" spellcheck="true">/* unfocused the old widget */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_focus <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token function">rtgui_widget_unfocus</span><span class="token punctuation">(</span>old_focus<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set widget as focused */</span>    widget<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIDGET_FLAG_FOCUS<span class="token punctuation">;</span>    <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel<span class="token punctuation">)</span><span class="token operator">-></span>focused_widget <span class="token operator">=</span> widget<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* invoke on focus in call back */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>on_focus_in <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        widget<span class="token operator">-></span><span class="token function">on_focus_in</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_focus<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Unfocus-widget"><a href="#Unfocus-widget" class="headerlink" title="Unfocus widget"></a>Unfocus widget</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_unfocus</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>focus widget</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th></tr></thead><tbody><tr><td style="text-align:center">欲 unfocus 的 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @brief Unfocused the widget * @param widget a widget */</span><span class="token keyword">void</span> <span class="token function">rtgui_widget_unfocus</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>widget<span class="token operator">-></span>toplevel <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">RTGUI_WIDGET_IS_FOCUSED</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIDGET_FLAG_FOCUS<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>on_focus_out <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        widget<span class="token operator">-></span><span class="token function">on_focus_out</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel<span class="token punctuation">)</span><span class="token operator">-></span>focused_widget <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Ergodic constituent widget, make child loss of focus */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_IS_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rtgui_list_t <span class="token operator">*</span>node<span class="token punctuation">;</span>        <span class="token function">rtgui_list_foreach</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rtgui_widget_t <span class="token operator">*</span>child <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token function">rtgui_widget_unfocus</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_unfocus<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="位移-widget"><a href="#位移-widget" class="headerlink" title="位移 widget"></a>位移 widget</h3><h4 id="點向上位移"><a href="#點向上位移" class="headerlink" title="點向上位移"></a>點向上位移</h4><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_point_to_device</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>點向上位移</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th><th style="text-align:center"><code>*point</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td><td style="text-align:center">目標點</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_point_to_device</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_point_t <span class="token operator">*</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>point <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        point<span class="token operator">-></span>x <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        point<span class="token operator">-></span>y <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_point_to_device<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="點向下位移"><a href="#點向下位移" class="headerlink" title="點向下位移"></a>點向下位移</h4><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_point_to_logic</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>點向上位移</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th><th style="text-align:center"><code>*point</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td><td style="text-align:center">目標點</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_point_to_logic</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_point_t <span class="token operator">*</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>point <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        point<span class="token operator">-></span>x <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        point<span class="token operator">-></span>y <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_point_to_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="矩形向上位移"><a href="#矩形向上位移" class="headerlink" title="矩形向上位移"></a>矩形向上位移</h4><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_rect_to_device</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>點向上位移</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th><th style="text-align:center"><code>*rect</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td><td style="text-align:center">目標矩形</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_rect_to_device</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rect <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rect<span class="token operator">-></span>x1 <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>x2 <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>y1 <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>y2 <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_rect_to_device<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="矩形向下位移"><a href="#矩形向下位移" class="headerlink" title="矩形向下位移"></a>矩形向下位移</h4><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_rect_to_logic</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>點向上位移</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th><th style="text-align:center"><code>*rect</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td><td style="text-align:center">目標矩形</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_rect_to_logic</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rect <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rect<span class="token operator">-></span>x1 <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>x2 <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>y1 <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>y2 <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_rect_to_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="更新重疊區域"><a href="#更新重疊區域" class="headerlink" title="更新重疊區域"></a>更新重疊區域</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_update_clip</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>更新重疊區域</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * This function updates the clip info of widget */</span><span class="token keyword">void</span> <span class="token function">rtgui_widget_update_clip</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_rect_t rect<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_list_node <span class="token operator">*</span>node<span class="token punctuation">;</span>    rtgui_widget_t <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* no widget or widget is hide, no update clip */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget <span class="token operator">==</span> RT_NULL <span class="token operator">||</span> <span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span> <span class="token operator">||</span> widget<span class="token operator">-></span>parent <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reset visiable extent */</span>    widget<span class="token operator">-></span>extent_visiable <span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">;</span>    <span class="token function">rtgui_rect_intersect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>extent_visiable<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent_visiable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rect <span class="token operator">=</span> parent<span class="token operator">-></span>extent_visiable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reset clip to extent */</span>    <span class="token function">rtgui_region_reset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* limit widget extent in parent extent */</span>    <span class="token function">rtgui_region_intersect_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get the no transparent parent */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> parent<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        parent <span class="token operator">=</span> parent<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* give my clip back to parent */</span>        <span class="token function">rtgui_region_union</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* subtract widget clip in parent clip */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">RTGUI_IS_CONTAINER</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rtgui_region_subtract_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent_visiable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * note: since the layout widget introduction, the sibling widget should not intersect.     */</span>    <span class="token comment" spellcheck="true">/* if it's a container object, update the clip info of children */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_IS_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rtgui_widget_t <span class="token operator">*</span>child<span class="token punctuation">;</span>        <span class="token function">rtgui_list_foreach</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            child <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rtgui_widget_update_clip</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_update_clip<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="顯示-widget"><a href="#顯示-widget" class="headerlink" title="顯示 widget"></a>顯示 widget</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_show</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>顯示 widget</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_show</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_event_show eshow<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">RTGUI_WIDGET_UNHIDE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RTGUI_EVENT_SHOW_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eshow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>event_handler <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">event_handler</span><span class="token punctuation">(</span>                <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>eshow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_show<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="隱藏-widget"><a href="#隱藏-widget" class="headerlink" title="隱藏 widget"></a>隱藏 widget</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_hide</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>隱藏 widget</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_hide</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_event_hide ehide<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RTGUI_EVENT_HIDE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ehide<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>event_handler <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">event_handler</span><span class="token punctuation">(</span>                <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>ehide<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">RTGUI_WIDGET_HIDE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_hide<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="取得-widget-資訊"><a href="#取得-widget-資訊" class="headerlink" title="取得 widget 資訊"></a>取得 widget 資訊</h2><p>最後整理一些取得 widget 資訊的 API</p><h3 id="Top-Level"><a href="#Top-Level" class="headerlink" title="Top Level"></a>Top Level</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_get_toplevel</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>取得 top level</td><td>所在 window</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span><span class="token function">rtgui_widget_get_toplevel</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_widget_t <span class="token operator">*</span>r<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel<span class="token punctuation">)</span>        <span class="token keyword">return</span> widget<span class="token operator">-></span>toplevel<span class="token punctuation">;</span>    <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"widget->toplevel not properly set\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> widget<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get the toplevel widget */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token operator">-></span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        r <span class="token operator">=</span> r<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set toplevel */</span>    widget<span class="token operator">-></span>toplevel <span class="token operator">=</span> <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_get_toplevel<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="上層前景"><a href="#上層前景" class="headerlink" title="上層前景"></a>上層前景</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_get_parent_foreground</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>取得上層前景</td><td>顏色</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_color_t <span class="token function">rtgui_widget_get_parent_foreground</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_widget_t <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get parent widget */</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">RTGUI_WIDGET_FOREGROUND</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token operator">-></span>parent <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET_FLAG</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span><span class="token punctuation">)</span>        parent <span class="token operator">=</span> parent<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get parent's color */</span>    <span class="token keyword">return</span> <span class="token function">RTGUI_WIDGET_FOREGROUND</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_get_parent_foreground<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="上層背景"><a href="#上層背景" class="headerlink" title="上層背景"></a>上層背景</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_get_parent_background</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>取得上層背景</td><td>顏色</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_color_t <span class="token function">rtgui_widget_get_parent_background</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_widget_t <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get parent widget */</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">RTGUI_WIDGET_BACKGROUND</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token operator">-></span>parent <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET_FLAG</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span><span class="token punctuation">)</span>        parent <span class="token operator">=</span> parent<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get parent's color */</span>    <span class="token keyword">return</span> <span class="token function">RTGUI_WIDGET_BACKGROUND</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_get_parent_background<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="下一個兄弟"><a href="#下一個兄弟" class="headerlink" title="下一個兄弟"></a>下一個兄弟</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_get_next_sibling</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>取得下一個兄弟</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_widget_t <span class="token operator">*</span><span class="token function">rtgui_widget_get_next_sibling</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_widget_t <span class="token operator">*</span>sibling <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>sibling<span class="token punctuation">.</span>next <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sibling <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>sibling<span class="token punctuation">.</span>next<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sibling<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_get_next_sibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="上一個兄弟"><a href="#上一個兄弟" class="headerlink" title="上一個兄弟"></a>上一個兄弟</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_get_prev_sibling</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>取得上一個兄弟</td><td>void</td></tr></tbody></table><table><thead><tr><th style="text-align:center"><code>*widget</code></th></tr></thead><tbody><tr><td style="text-align:center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_widget_t <span class="token operator">*</span><span class="token function">rtgui_widget_get_prev_sibling</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_list_node <span class="token operator">*</span>node<span class="token punctuation">;</span>    rtgui_widget_t <span class="token operator">*</span>sibling<span class="token punctuation">,</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span>    node <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    sibling <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_list_foreach</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>sibling<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        sibling <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sibling<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread GUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> GUI </tag>
            
            <tag> widget </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread GUI Object</title>
      <link href="/rtgui-object/"/>
      <url>/rtgui-object/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="RT-Thread-GUI-物件架構"><a href="#RT-Thread-GUI-物件架構" class="headerlink" title="RT-Thread GUI 物件架構"></a>RT-Thread GUI 物件架構</h2><p>在 RTGUI 中，最小的物件為 widget，再來是 window，window 也是一個 widget；而每個 widget 也是一個 object，這是為了仿造 C++ 的物件導向所設計的，相同的概念我們在 RT-Thread 中已經看過許多次了，在 GUI engine 中也是相同的設計，其中在 object 結構中又串在 type 的結構上，type 中定義了兩個函式：<code>constructor</code> 與 <code>destructor</code>，在 C++ 的 class 中，常使用 <code>init</code> 函式來初始化新建的 class，這裡的 <code>constructor</code> 與 <code>destructor</code> 即用來初始化新建立的物件，及在刪除物件時，釋放該釋放的記憶體。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[RTGUI粗讲（个人见解篇之三、RTGUI WIDGET （2））](https://blog.csdn.net/xuzhenglim/article/details/11883351)">[1]</span></a></sup></p><hr><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><blockquote><p>File: rtgui_object.h</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* rtgui base object */</span><span class="token keyword">struct</span> rtgui_object<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* object type */</span>    <span class="token keyword">const</span> rtgui_type_t <span class="token operator">*</span>type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the event handler */</span>    rtgui_event_handler_ptr event_handler<span class="token punctuation">;</span>    <span class="token keyword">enum</span> rtgui_object_flag flag<span class="token punctuation">;</span>    rt_uint32_t id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* rtgui type structure */</span><span class="token keyword">struct</span> rtgui_type<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* type name */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parent type link */</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> rtgui_type <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* constructor and destructor */</span>    rtgui_constructor_t constructor<span class="token punctuation">;</span>    rtgui_destructor_t destructor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* size of type */</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="定義物件類型"><a href="#定義物件類型" class="headerlink" title="定義物件類型"></a>定義物件類型</h2><p>RTGUI 設計了一個巨集函數來定義不同的物件，如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> DEFINE_CLASS_TYPE(type, name, parent, constructor, destructor, size) \    const struct rtgui_type _rtgui_##type = { \    name, \    parent, \    RTGUI_CONSTRUCTOR(constructor), \    RTGUI_DESTRUCTOR(destructor), \    size }; \    const rtgui_type_t *_rtgui_##type##_get_type(void) { return &amp;_rtgui_##type; } \    RTM_EXPORT(_rtgui_##type##_get_type)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>##</code> 為連字符，在<a href="/rt-thread-RTM-EXPORT">RT-Thread 理解 RTM_EXPORT</a>裡有提過了，基本上就是填入值進去結構體</p><hr><h2 id="建立物件"><a href="#建立物件" class="headerlink" title="建立物件"></a>建立物件</h2><blockquote><p>File: rtgui_object.c</p></blockquote><p><i class="fa fa-code"></i> Code: <code>rtgui_object_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立物件</td><td>物件指標</td></tr></tbody></table><table><thead><tr><th><code>*object_type</code></th></tr></thead><tbody><tr><td>要建立的物件種類</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @brief Creates a new object: it calls the corresponding constructors * (from the constructor of the base class to the constructor of the more * derived class) and then sets the values of the given properties * * @param object_type the type of object to create * @return the created object */</span>rtgui_object_t <span class="token operator">*</span><span class="token function">rtgui_object_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> rtgui_type_t <span class="token operator">*</span>object_type<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_object_t <span class="token operator">*</span>new_object<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>object_type<span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    new_object <span class="token operator">=</span> <span class="token function">rtgui_malloc</span><span class="token punctuation">(</span>object_type<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_object <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span> <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RTGUI_OBJECT_TRACE</span>    obj_info<span class="token punctuation">.</span>objs_number <span class="token operator">++</span><span class="token punctuation">;</span>    obj_info<span class="token punctuation">.</span>allocated_size <span class="token operator">+</span><span class="token operator">=</span> object_type<span class="token operator">-></span>size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj_info<span class="token punctuation">.</span>allocated_size <span class="token operator">></span> obj_info<span class="token punctuation">.</span>max_allocated<span class="token punctuation">)</span>        obj_info<span class="token punctuation">.</span>max_allocated <span class="token operator">=</span> obj_info<span class="token punctuation">.</span>allocated_size<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    new_object<span class="token operator">-></span>type <span class="token operator">=</span> object_type<span class="token punctuation">;</span>    <span class="token function">rtgui_type_object_construct</span><span class="token punctuation">(</span>object_type<span class="token punctuation">,</span> new_object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> new_object<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_object_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立物件相當簡單，透過欲建立的物件類型所定意義的 <code>construct</code> 函數來建立，其中 <code>rtgui_type_object_construct</code> 會呼叫正確的建立函式來初始化資料。</p><hr><p><i class="fa fa-code"></i> Code: <code>rtgui_type_object_construct</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>呼叫正確的 <code>construct</code> 函式來初始化物件</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*type</code></th><th><code>*object</code></th></tr></thead><tbody><tr><td>欲初始化的物件類型</td><td>物件本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_type_object_construct</span><span class="token punctuation">(</span><span class="token keyword">const</span> rtgui_type_t <span class="token operator">*</span>type<span class="token punctuation">,</span> rtgui_object_t <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* construct from parent to children */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token operator">-></span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token function">rtgui_type_object_construct</span><span class="token punctuation">(</span>type<span class="token operator">-></span>parent<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token operator">-></span>constructor<span class="token punctuation">)</span>        type<span class="token operator">-></span><span class="token function">constructor</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果欲建立的物件類型在某一個物件類型的底下，如 window 之於 widget，則先呼叫在上層的 <code>construct</code>；接著呼叫自己的 <code>construct</code> 來完成建立的動作。</p><hr><p>再仔細的看一下 “object” 的 <code>construct</code> 函式，其動作為：填入 vaild 的旗標，並將 id 填入 object 的記憶體指標；以上動作在 <code>_rtgui_object_constructor</code> 完成</p><p><i class="fa fa-code"></i> Code: <code>_rtgui_object_constructor</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>“object” 建立函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*object</code></th></tr></thead><tbody><tr><td>要建立的物件</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_rtgui_object_constructor</span><span class="token punctuation">(</span>rtgui_object_t <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>object<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    object<span class="token operator">-></span>flag <span class="token operator">=</span> RTGUI_OBJECT_FLAG_VALID<span class="token punctuation">;</span>    object<span class="token operator">-></span>id   <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>object<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="刪除物件"><a href="#刪除物件" class="headerlink" title="刪除物件"></a>刪除物件</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_object_destroy</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除物件</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*object</code></th></tr></thead><tbody><tr><td>要刪除的物件</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @brief Destroys the object. * * The object destructors will be called in inherited type order. * * @param object the object to destroy */</span><span class="token keyword">void</span> <span class="token function">rtgui_object_destroy</span><span class="token punctuation">(</span>rtgui_object_t <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>object <span class="token operator">||</span> object<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_OBJECT_FLAG_STATIC<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RTGUI_OBJECT_TRACE</span>    obj_info<span class="token punctuation">.</span>objs_number <span class="token operator">--</span><span class="token punctuation">;</span>    obj_info<span class="token punctuation">.</span>allocated_size <span class="token operator">-</span><span class="token operator">=</span> object<span class="token operator">-></span>type<span class="token operator">-></span>size<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* call destructor */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>object<span class="token operator">-></span>type <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rtgui_type_destructors_call</span><span class="token punctuation">(</span>object<span class="token operator">-></span>type<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* release object */</span>    <span class="token function">rtgui_free</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_object_destroy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這裡一樣透過 <code>rtgui_type_destructors_call</code> 來呼叫正確的 <code>destruct</code> 函式，<code>destruct</code> 負責釋放該釋放的記憶體；最後透過 <code>rtgui_free</code> 釋放整個物件。<code>regui_free</code> 則簡單的呼叫 <code>rt_free</code> 釋放記憶體，我們在前幾篇文章有討論過了（<a href="/rt-mem#Code-free">mempool</a>、<a href="/rt-memheap#釋放記憶體">memheap</a>、<a href="/rt-small-mem#釋放記憶體">small mem</a>、<a href="/rt-slab#釋放記憶體">slab</a>）</p><hr><p><i class="fa fa-code"></i> Code: <code>rtgui_type_destructors_call</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>呼叫正確的 <code>destructor</code> 函式來清除物件</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*type</code></th><th><code>*object</code></th></tr></thead><tbody><tr><td>欲清除的物件類型</td><td>物件本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_type_destructors_call</span><span class="token punctuation">(</span><span class="token keyword">const</span> rtgui_type_t <span class="token operator">*</span>type<span class="token punctuation">,</span> rtgui_object_t <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* destruct from children to parent */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token operator">-></span>destructor<span class="token punctuation">)</span>        type<span class="token operator">-></span><span class="token function">destructor</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token operator">-></span>parent<span class="token punctuation">)</span>        <span class="token function">rtgui_type_destructors_call</span><span class="token punctuation">(</span>type<span class="token operator">-></span>parent<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同樣的如果此物件類型是在某個物件類型的底下，先呼叫上層的 <code>destruct</code>；接著呼叫自己的 <code>desturct</code> 完成清除的動作。</p><hr><p>最後來看一下 “object” 的刪除函式：填入 none 的旗標，並將物件種類設為 NULL；動作在 <code>_rtgui_object_destructor</code> 完成</p><p><i class="fa fa-code"></i> Code: <code>_rtgui_object_destructor</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>“object” 的刪除函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*object</code></th></tr></thead><tbody><tr><td>欲清除的物件</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Destroys the object */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_rtgui_object_destructor</span><span class="token punctuation">(</span>rtgui_object_t <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* Any valid objest should both have valid flag _and_ valid type. Only use     * flag is not enough because the chunk of memory may be reallocted to other     * object and thus the flag will become valid. */</span>    object<span class="token operator">-></span>flag <span class="token operator">=</span> RTGUI_OBJECT_FLAG_NONE<span class="token punctuation">;</span>    object<span class="token operator">-></span>type <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/xuzhenglim/article/details/11883351" target="_blank" rel="noopener">RTGUI粗讲（个人见解篇之三、RTGUI WIDGET （2））</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread GUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> GUI </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 crontab 自動備份網站原始碼</title>
      <link href="/auto-backup-with-crontab/"/>
      <url>/auto-backup-with-crontab/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="shell-script"><a href="#shell-script" class="headerlink" title="shell script"></a>shell script</h2><p>透過 git 備份時，一定是使用下列指令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">'log'</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而使用 shell script 可以讓我們一次執行一大串指令，因此我們來寫一個 shell script</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!/bin/zsh</span>nowTime<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +'%Y-%m-%d %H:%M:%S'<span class="token variable">)</span></span>"</span><span class="token keyword">echo</span> <span class="token string">"# Using crontab with auto.sh"</span><span class="token keyword">echo</span> <span class="token string">"# File in ~/Desktop/auto.sh"</span><span class="token keyword">echo</span> <span class="token string">"# Log  in ~/Desktop/cront.log"</span><span class="token keyword">echo</span> <span class="token string">"#"</span><span class="token keyword">echo</span> <span class="token string">"# Auto backup at <span class="token variable">${nowTime}</span>"</span><span class="token keyword">echo</span> <span class="token string">"# --------------------------------------------------\n"</span><span class="token function">cd</span> /Users/username<span class="token function">cd</span> <span class="token variable">$1</span><span class="token keyword">echo</span> <span class="token string">"Now at <span class="token variable"><span class="token variable">$(</span><span class="token function">pwd</span><span class="token variable">)</span></span>\n"</span>log<span class="token operator">=</span><span class="token string">"auto backup at "</span><span class="token variable">${nowTime}</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"<span class="token variable">$log</span>"</span>result<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> push site hexo_source_new 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token variable">)</span></span><span class="token keyword">case</span> <span class="token variable">$result</span> <span class="token keyword">in</span>    <span class="token string">"Everything up-to-date"</span><span class="token punctuation">)</span>        osascript -e <span class="token string">'display notification "Everything up-to-date." with title "Automatically backup" sound name "basso"'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        osascript -e <span class="token string">'display notification "Done!" with title "Automatically backup" sound name "hero"'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span class="token keyword">echo</span> <span class="token variable">${result}</span><span class="token keyword">echo</span> <span class="token string">"Backup complete."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中我們為了方便整理，在提交的紀錄上增加了時間；並且在 push 完根據結果有不同的通知</p><blockquote><p>此通知是基於 mac 上的 applescript 所寫的，在 linux 上會產生錯誤</p></blockquote><h2 id="建立-crontab"><a href="#建立-crontab" class="headerlink" title="建立 crontab"></a>建立 crontab</h2><p>寫好 script shell 後，再來就是要定時的執行它。使用 crontab 可以在指定的時間，或是固定的區間內執行。</p><p>使用方式，輸入指令 <code>crontab -e</code>，接著會跳進 vim，寫入</p><pre class="line-numbers language-vim"><code class="language-vim">@hourly chmod <span class="token operator">+</span><span class="token keyword">x</span> <span class="token operator">/</span>Users<span class="token operator">/</span>PATH_TO_YOUR<span class="token operator">.</span><span class="token keyword">sh</span>@hourly <span class="token operator">/</span>Users<span class="token operator">/</span>PATH_TO_YOUR<span class="token operator">.</span><span class="token keyword">sh</span> PATH_TO_YOUR_SOURCE <span class="token operator">></span><span class="token operator">></span> <span class="token operator">/</span>Users<span class="token operator">/</span>PATH_TO_YOUR<span class="token operator">.</span>log <span class="token number">2</span><span class="token operator">></span>&amp;<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>這裡首先提升一次權限，並設定每一次整點都備份一次 <code>@hourly</code>，並將結果寫入 log 中。我們需要先建立一個 .log 檔：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">touch</span> /Users/PATH_TO_YOUR.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>當然這裡的所有路徑因人而異，檔名也無所謂，最後 <code>:wq</code> 存檔退出，安裝完畢</p><p><img src="https://i.imgur.com/w3qGjus.png" alt="" title="大功告成"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自訂網域名稱：Google Domain</title>
      <link href="/custom-domain-by-google-domain/"/>
      <url>/custom-domain-by-google-domain/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="購買網域"><a href="#購買網域" class="headerlink" title="購買網域"></a>購買網域</h2><p>網路上已經有很多如何在 <a href="https://domains.google.com/m/registrar/omuskywalker.com?hl=en#" target="_blank" rel="noopener">Google Domain</a> 上買網域的文章了，在此就不特別贅述，放上我看的幾篇文章：</p><ul><li><a href="https://free.com.tw/google-domains/" target="_blank" rel="noopener">台灣用戶也能在 Google Domains 註冊購買網域名稱，詳細申請設定教學</a></li><li><a href="https://sofree.cc/google-domains/" target="_blank" rel="noopener">[教學]如何用 Google Domains 買網址、註冊網域？ - 香腸炒魷魚</a></li></ul><blockquote><p>比較特別的的地方是，現在只開放部分國家可使用，所以在填地址的時候，可以去 google map 搜尋隨便一個美國的地址，然後使用</p></blockquote><h2 id="設定-DNS"><a href="#設定-DNS" class="headerlink" title="設定 DNS"></a>設定 DNS</h2><p>根據 Github 官方的說明，需設定 type <code>A</code> 的 IP 位址為</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><p>以及一個 CNAME，name 可以填任意字串，此字串就是你的 subdomain（像是我填 blog），如果不知道填什麼，可以填 www。最後你的畫面會長這樣：<br><img src="https://i.imgur.com/OTJsgaX.png" alt=""><br>CNAME 的 data 請填 <code>你的 github ID</code>+<code>.github.io.</code>，注意最後有一個點</p><p>這些都設定完，之後你的網址就會變成 <code>subdomain.domain.com</code></p><blockquote><p>一個很重要的事情是，發布 hexo 的 github repo 須為 <strong>github.io</strong> 類型的，否則設定會有誤</p></blockquote><h2 id="設定-github-CNAME"><a href="#設定-github-CNAME" class="headerlink" title="設定 github CNAME"></a>設定 github CNAME</h2><p>Github 官方有提供 301 轉址功能，只要在網頁的 branch 下建立一個 <code>CNAME</code> 檔案，就會把舊網址轉址到新網址。你的 CNAME 應該要填以下內容：</p><pre><code>subdomain.domain.com</code></pre><p>其中 <code>subdomain</code> 與 <code>domain</code> 與自己的有關，像我的就是</p><pre><code>blog.omuskywalker.com</code></pre><p>如果你上面的 subdomain 設定為 www，而你的頂級網域（也就是你買的 domain 名字）沒有要給特別的網站用的話，也可以這樣寫：</p><pre><code>domain.comsubdomain.domain.com</code></pre><p>這麼一來不管是上面哪兩種，都會連到你的 blog</p><blockquote><p>如果跟我一樣是用 hexo 的人，CNAME 請放在 /source 底下，這樣每次 <code>hexo d</code> 才不會被蓋掉</p></blockquote><p>如果這些都有設定好，你的 github 應該會長這樣：<br><img src="https://i.imgur.com/e5GzzZH.png" alt=""></p><p>大概過幾個小時，你的新網址就可以用了（大功告成）!</p><h2 id="補充：HTTPS"><a href="#補充：HTTPS" class="headerlink" title="補充：HTTPS"></a>補充：HTTPS</h2><p>Github page 有提供內建的 HTTPS，只要你的網站設定好一陣子（不會很久，一天內），會有這個選項可以按：<br><img src="https://i.imgur.com/z9HdVbV.png" alt=""><br>按下去，就會獲得 HTTPS 了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> hexo </tag>
            
            <tag> github-page </tag>
            
            <tag> CNAME </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread SLAB 動態管理</title>
      <link href="/rt-slab/"/>
      <url>/rt-slab/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: slab.c</p></blockquote><p>SLAB 將記憶體根據不同的對象切成不同的區 (zone)，對象通常是大小，也可看成是一個 zone 代表一個 pool，不同的 zone 放在一個 array 管理。</p><p>一個 zone 大小介於 32kB~128kB 之間，最多可以有 72 種 zone；zone 對象大小上上限 16kB，超過由頁分配器分配</p><ul><li>alloc：根據需要的大小，找到對應的 zone 取得記憶體；如假設需要 32kB，我們去尋找對象為 32kB 的 zone。<ul><li>若是該 zone 為空（找不到），直接向頁分配器分配一個新的 zone，取得第一塊 free chunk</li><li>若非空，直接取得第一塊，如果拿完該 zone 已經沒有 free chunk 頁分配器須將此 zone 刪除</li></ul></li><li>free：找到對應的 zone 插入至 free list，如果該 zone 的所有 free chunk 都已經釋放完畢，則須將此 zone 整個釋放到分配器裡</li></ul><p><img src="https://i.imgur.com/GZdBl7V.png" alt="" title="SLAB example"></p><blockquote><p>使用此管理方式： <code>#defined RT_USING_HEAP &amp;&amp; #defined RT_USING_SLAB</code></p></blockquote><hr><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><h3 id="Zone"><a href="#Zone" class="headerlink" title="Zone"></a>Zone</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * The IN-BAND zone header is placed at the beginning of each zone. */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> slab_zone<span class="token punctuation">{</span>    rt_int32_t  z_magic<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* magic number for sanity check */</span>    rt_int32_t  z_nfree<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* total free chunks / ualloc space in zone */</span>    rt_int32_t  z_nmax<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* maximum free chunks */</span>    <span class="token keyword">struct</span> slab_zone <span class="token operator">*</span>z_next<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* zoneary[] link if z_nfree non-zero */</span>    rt_uint8_t  <span class="token operator">*</span>z_baseptr<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* pointer to start of chunk array */</span>    rt_int32_t  z_uindex<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* current initial allocation index */</span>    rt_int32_t  z_chunksize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* chunk size for validation */</span>    rt_int32_t  z_zoneindex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* zone index */</span>    slab_chunk  <span class="token operator">*</span>z_freechunk<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* free chunk list */</span><span class="token punctuation">}</span> slab_zone<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Chunk structure for free elements */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> slab_chunk<span class="token punctuation">{</span>    <span class="token keyword">struct</span> slab_chunk <span class="token operator">*</span>c_next<span class="token punctuation">;</span><span class="token punctuation">}</span> slab_chunk<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Page-Allocator"><a href="#Page-Allocator" class="headerlink" title="Page Allocator"></a>Page Allocator</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* page allocator */</span><span class="token keyword">struct</span> rt_page_head<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span>next<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* next valid page */</span>    rt_size_t page<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/* number of page  */</span>    <span class="token comment" spellcheck="true">/* dummy */</span>    <span class="token keyword">char</span> dummy<span class="token punctuation">[</span>RT_MM_PAGE_SIZE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_size_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Descriptor"><a href="#Descriptor" class="headerlink" title="Descriptor"></a>Descriptor</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Array of descriptors that describe the contents of each page */</span><span class="token macro property">#<span class="token directive keyword">define</span> PAGE_TYPE_FREE      0x00</span><span class="token macro property">#<span class="token directive keyword">define</span> PAGE_TYPE_SMALL     0x01</span><span class="token macro property">#<span class="token directive keyword">define</span> PAGE_TYPE_LARGE     0x02</span><span class="token keyword">struct</span> memusage<span class="token punctuation">{</span>    rt_uint32_t type<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* page type */</span>    rt_uint32_t size<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* pages allocated or offset from zone */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="初始化-heap"><a href="#初始化-heap" class="headerlink" title="初始化 heap"></a>初始化 heap</h2><p><i class="fa fa-code"></i> Code: <code>rt_system_heap_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 heap</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*begin_addr</code></th><th><code>*end_addr</code></th></tr></thead><tbody><tr><td>記憶體起始位址</td><td>結束位址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @ingroup SystemInit * * This function will init system heap * * @param begin_addr the beginning address of system page * @param end_addr the end address of system page */</span><span class="token keyword">void</span> <span class="token function">rt_system_heap_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>begin_addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>end_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_uint32_t limsize<span class="token punctuation">,</span> npages<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* align begin and end addr to page */</span>    heap_start <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>begin_addr<span class="token punctuation">,</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    heap_end   <span class="token operator">=</span> <span class="token function">RT_ALIGN_DOWN</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>end_addr<span class="token punctuation">,</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>heap_start <span class="token operator">>=</span> heap_end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"rt_system_heap_init, wrong address[0x%x - 0x%x]\n"</span><span class="token punctuation">,</span>                   <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>begin_addr<span class="token punctuation">,</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>end_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向上對齊起始位址，向下對其結束位址</li><li>檢查是否合法</li></ul><pre class="line-numbers language-c"><code class="language-c">    limsize <span class="token operator">=</span> heap_end <span class="token operator">-</span> heap_start<span class="token punctuation">;</span>    npages  <span class="token operator">=</span> limsize <span class="token operator">/</span> RT_MM_PAGE_SIZE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>計算最大的 size，設定頁數量</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize heap semaphore */</span>    <span class="token function">rt_sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> <span class="token string">"heap"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> RT_IPC_FLAG_FIFO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"heap[0x%x - 0x%x], size 0x%x, 0x%x pages\n"</span><span class="token punctuation">,</span>                                 heap_start<span class="token punctuation">,</span> heap_end<span class="token punctuation">,</span> limsize<span class="token punctuation">,</span> npages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>初始化 semaphore，值為 1</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init pages */</span>    <span class="token function">rt_page_init</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>heap_start<span class="token punctuation">,</span> npages<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>初始化 page</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* calculate zone size */</span>    zone_size <span class="token operator">=</span> ZALLOC_MIN_ZONE_SIZE<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>zone_size <span class="token operator">&lt;</span> ZALLOC_MAX_ZONE_SIZE <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>zone_size <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>limsize <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        zone_size <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    zone_limit <span class="token operator">=</span> zone_size <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>zone_limit <span class="token operator">></span> ZALLOC_ZONE_LIMIT<span class="token punctuation">)</span>        zone_limit <span class="token operator">=</span> ZALLOC_ZONE_LIMIT<span class="token punctuation">;</span>    zone_page_cnt <span class="token operator">=</span> zone_size <span class="token operator">/</span> RT_MM_PAGE_SIZE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>計算 zone 的大小、對象大小的上限及總頁數</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"zone size 0x%x, zone page count 0x%x\n"</span><span class="token punctuation">,</span>                                 zone_size<span class="token punctuation">,</span> zone_page_cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate memusage array */</span>    limsize  <span class="token operator">=</span> npages <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> memusage<span class="token punctuation">)</span><span class="token punctuation">;</span>    limsize  <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>limsize<span class="token punctuation">,</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    memusage <span class="token operator">=</span> <span class="token function">rt_page_alloc</span><span class="token punctuation">(</span>limsize <span class="token operator">/</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"memusage 0x%x, size 0x%x\n"</span><span class="token punctuation">,</span>                                 <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>memusage<span class="token punctuation">,</span> limsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後建立一個陣列紀錄頁的資訊</li></ul><hr><h3 id="rt-page-init"><a href="#rt-page-init" class="headerlink" title="rt_page_init"></a>rt_page_init</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化頁分配器</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*addr</code></th><th><code>npages</code></th></tr></thead><tbody><tr><td>存放頁的記憶體位址</td><td>頁的總數</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Initialize the page allocator */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rt_page_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> rt_size_t npages<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>addr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>npages <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rt_page_list <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token function">rt_page_free</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> npages<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將 page list 設為空，釋放所有的 page</li></ul><hr><h2 id="分配記憶體"><a href="#分配記憶體" class="headerlink" title="分配記憶體"></a>分配記憶體</h2><h3 id="rt-malloc"><a href="#rt-malloc" class="headerlink" title="rt_malloc"></a>rt_malloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will allocate a block from system heap memory. * - If the nbytes is less than zero, * or * - If there is no nbytes sized memory valid in system, * the RT_NULL is returned. * * @param size the size of memory to be allocated * * @return the allocated memory */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_malloc</span><span class="token punctuation">(</span>rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    slab_zone <span class="token operator">*</span>z<span class="token punctuation">;</span>    rt_int32_t zi<span class="token punctuation">;</span>    slab_chunk <span class="token operator">*</span>chunk<span class="token punctuation">;</span>    <span class="token keyword">struct</span> memusage <span class="token operator">*</span>kup<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* zero size, return RT_NULL */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 size = 0，回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*     * Handle large allocations directly.  There should not be very many of     * these so performance is not a big issue.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> zone_limit<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        chunk <span class="token operator">=</span> <span class="token function">rt_page_alloc</span><span class="token punctuation">(</span>size <span class="token operator">>></span> RT_MM_PAGE_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 size 超過一個 chunk 的上限，則透過頁分配器來分配</li><li>且如果失敗了，直接回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* set kup */</span>        kup <span class="token operator">=</span> <span class="token function">btokup</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>        kup<span class="token operator">-></span>type <span class="token operator">=</span> PAGE_TYPE_LARGE<span class="token punctuation">;</span>        kup<span class="token operator">-></span>size <span class="token operator">=</span> size <span class="token operator">>></span> RT_MM_PAGE_BITS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定頁的資訊：<ul><li>type：<code>PAGE_TYPE_LARGE</code></li><li>size：用了幾頁</li></ul></li><li>btokup：<code>&amp;memusage[((rt_uint32_t)(addr) - heap_start) &gt;&gt; RT_MM_PAGE_BITS]</code><ul><li>找到陣列中與起始位置的差值，位移 12-bit，即除一頁的大小</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"malloc a large memory 0x%x, page cnt %d, kup %d\n"</span><span class="token punctuation">,</span>                      size<span class="token punctuation">,</span>                      size <span class="token operator">>></span> RT_MM_PAGE_BITS<span class="token punctuation">,</span>                      <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>chunk <span class="token operator">-</span> heap_start<span class="token punctuation">)</span> <span class="token operator">>></span> RT_MM_PAGE_BITS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* lock heap */</span>        <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>        used_mem <span class="token operator">+</span><span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>used_mem <span class="token operator">></span> max_mem<span class="token punctuation">)</span>            max_mem <span class="token operator">=</span> used_mem<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要鎖，更新使用大小，跳到 <code>__done</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* lock heap */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Attempt to allocate out of an existing zone.  First try the free list,     * then allocate out of unallocated space.  If we find a good zone move     * it to the head of the list so later allocations find it quickly     * (we might have thousands of zones in the list).     *     * Note: zoneindex() will panic of size is too large.     */</span>    zi <span class="token operator">=</span> <span class="token function">zoneindex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>zi <span class="token operator">&lt;</span> NZONES<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 size 小於一個 chunk 的上限，尋找此大小對應的 zone</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"try to malloc 0x%x on zone: %d\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> zi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">=</span> zone_array<span class="token punctuation">[</span>zi<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>z<span class="token operator">-></span>z_nfree <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Remove us from the zone_array[] when we become empty */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>z<span class="token operator">-></span>z_nfree <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            zone_array<span class="token punctuation">[</span>zi<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token operator">-></span>z_next<span class="token punctuation">;</span>            z<span class="token operator">-></span>z_next <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果該 zone 不為空，且此 zone 剩最後一顆可用時，將此 zone 刪除</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/*         * No chunks are available but nfree said we had some memory, so         * it must be available in the never-before-used-memory area         * governed by uindex.  The consequences are very serious if our zone         * got corrupted so we use an explicit rt_kprintf rather then a KASSERT.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token operator">-></span>z_uindex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> z<span class="token operator">-></span>z_nmax<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            z<span class="token operator">-></span>z_uindex <span class="token operator">=</span> z<span class="token operator">-></span>z_uindex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            chunk <span class="token operator">=</span> <span class="token punctuation">(</span>slab_chunk <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>z<span class="token operator">-></span>z_baseptr <span class="token operator">+</span> z<span class="token operator">-></span>z_uindex <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* find on free chunk list */</span>            chunk <span class="token operator">=</span> z<span class="token operator">-></span>z_freechunk<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* remove this chunk from list */</span>            z<span class="token operator">-></span>z_freechunk <span class="token operator">=</span> z<span class="token operator">-></span>z_freechunk<span class="token operator">-></span>c_next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>        used_mem <span class="token operator">+</span><span class="token operator">=</span> z<span class="token operator">-></span>z_chunksize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>used_mem <span class="token operator">></span> max_mem<span class="token punctuation">)</span>            max_mem <span class="token operator">=</span> used_mem<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取得一塊，跳至 done<ul><li>從 <code>uindex</code> 找，這種方式取得的屬於此 zone 最初的 chunk</li><li>如果不行，從 free list 中取得，並從 free list 移除此 chunk；這種的 chunk 是已經被要過，又還回來的</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*     * If all zones are exhausted we need to allocate a new zone for this     * index.     *     * At least one subsystem, the tty code (see CROUND) expects power-of-2     * allocations to be power-of-2 aligned.  We maintain compatibility by     * adjusting the base offset below.     */</span>    <span class="token punctuation">{</span>        rt_int32_t off<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">=</span> zone_free<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* remove zone from free zone list */</span>            zone_free <span class="token operator">=</span> z<span class="token operator">-></span>z_next<span class="token punctuation">;</span>            <span class="token operator">--</span> zone_free_cnt<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果找到的 zone 為空，且 zone_free 不為空：代表有可用的空 zone 可以使用</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* unlock heap, since page allocator will think about lock */</span>            <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* allocate a zone from page */</span>            z <span class="token operator">=</span> <span class="token function">rt_page_alloc</span><span class="token punctuation">(</span>zone_size <span class="token operator">/</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                chunk <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>                <span class="token keyword">goto</span> __exit<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>否則需要重新與頁分配器要一個 zone</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* lock heap */</span>            <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"alloc a new zone: 0x%x\n"</span><span class="token punctuation">,</span>                                         <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* set message usage */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> kup <span class="token operator">=</span> <span class="token function">btokup</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> off <span class="token operator">&lt;</span> zone_page_cnt<span class="token punctuation">;</span> off <span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                kup<span class="token operator">-></span>type <span class="token operator">=</span> PAGE_TYPE_SMALL<span class="token punctuation">;</span>                kup<span class="token operator">-></span>size <span class="token operator">=</span> off<span class="token punctuation">;</span>                kup <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著設定每一頁的資訊</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* clear to zero */</span>        <span class="token function">rt_memset</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slab_zone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>清空整個 zone</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* offset of slab zone struct in zone */</span>        off <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slab_zone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * Guarentee power-of-2 alignment for power-of-2-sized chunks.         * Otherwise just 8-byte align the data.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">|</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            off <span class="token operator">=</span> <span class="token punctuation">(</span>off <span class="token operator">+</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            off <span class="token operator">=</span> <span class="token punctuation">(</span>off <span class="token operator">+</span> MIN_CHUNK_MASK<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>MIN_CHUNK_MASK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>計算我們要用的對齊法：<ul><li>如果 size 是二的次方，將 off (zone 的頭) 與 size 向上對齊</li><li>否則直接與 8 向上對齊</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">        z<span class="token operator">-></span>z_magic     <span class="token operator">=</span> ZALLOC_SLAB_MAGIC<span class="token punctuation">;</span>        z<span class="token operator">-></span>z_zoneindex <span class="token operator">=</span> zi<span class="token punctuation">;</span>        z<span class="token operator">-></span>z_nmax      <span class="token operator">=</span> <span class="token punctuation">(</span>zone_size <span class="token operator">-</span> off<span class="token punctuation">)</span> <span class="token operator">/</span> size<span class="token punctuation">;</span>        z<span class="token operator">-></span>z_nfree     <span class="token operator">=</span> z<span class="token operator">-></span>z_nmax <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        z<span class="token operator">-></span>z_baseptr   <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>z <span class="token operator">+</span> off<span class="token punctuation">;</span>        z<span class="token operator">-></span>z_uindex    <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        z<span class="token operator">-></span>z_chunksize <span class="token operator">=</span> size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 magic、對應 <code>zone_array</code> 的 index<ul><li>最大數量為 <code>zone_size</code> - off 再除以一個 chunk 的大小</li><li>目前可用的數量則為最大數量減 1，因為待會會拿走一塊</li><li>基址為起始位址加上 <code>off，uindex</code> 為 0，這是之後 alloc 時可直接使用這兩個來找到 free chunk</li><li>最後設定 chunk size</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">        chunk <span class="token operator">=</span> <span class="token punctuation">(</span>slab_chunk <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>z<span class="token operator">-></span>z_baseptr <span class="token operator">+</span> z<span class="token operator">-></span>z_uindex <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* link to zone array */</span>        z<span class="token operator">-></span>z_next <span class="token operator">=</span> zone_array<span class="token punctuation">[</span>zi<span class="token punctuation">]</span><span class="token punctuation">;</span>        zone_array<span class="token punctuation">[</span>zi<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>        used_mem <span class="token operator">+</span><span class="token operator">=</span> z<span class="token operator">-></span>z_chunksize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>used_mem <span class="token operator">></span> max_mem<span class="token punctuation">)</span>            max_mem <span class="token operator">=</span> used_mem<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拿走第一塊，並將這個 zone 插上對應的 zone array entry</li></ul><pre class="line-numbers language-c"><code class="language-c">done<span class="token punctuation">:</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_malloc_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>chunk<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>__exit<span class="token punctuation">:</span>    <span class="token keyword">return</span> chunk<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_malloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後回傳找到的 chunk</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>zoneindex</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>尋找傳入的 size 對應 zone array 的 index</td><td>index</td></tr></tbody></table><table><thead><tr><th><code>*bytes</code></th></tr></thead><tbody><tr><td>傳入的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Calculate the zone index for the allocation request size and set the * allocation request size to that particular zone's chunk size. */</span>rt_inline <span class="token keyword">int</span> <span class="token function">zoneindex</span><span class="token punctuation">(</span>rt_uint32_t <span class="token operator">*</span>bytes<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* unsigned for shift opt */</span>    rt_uint32_t n <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span> <span class="token operator">*</span> bytes<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">7</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 8 byte chunks, 16 zones */</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">15</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">8192</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">512</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">31</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">63</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">64</span> <span class="token operator">+</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2048</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">127</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">4096</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">255</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">256</span> <span class="token operator">+</span> <span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">511</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">511</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">512</span> <span class="token operator">+</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">16384</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1023</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">1023</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"Unexpected byte count %d"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根據不同的 range，將傳入的大小對齊，並平均分配每個 range 有 16 個 zone index</p><hr><h4 id="rt-page-alloc"><a href="#rt-page-alloc" class="headerlink" title="rt_page_alloc"></a>rt_page_alloc</h4><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求頁記憶體</td><td>頁</td></tr></tbody></table><table><thead><tr><th><code>npages</code></th></tr></thead><tbody><tr><td>欲要求的頁數</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_page_alloc</span><span class="token punctuation">(</span>rt_size_t npages<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span><span class="token operator">*</span>prev<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>npages <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* lock heap */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>prev <span class="token operator">=</span> <span class="token operator">&amp;</span>rt_page_list<span class="token punctuation">;</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token operator">*</span>prev<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_NULL<span class="token punctuation">;</span> prev <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>b<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>page <span class="token operator">></span> npages<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* splite pages */</span>            n       <span class="token operator">=</span> b <span class="token operator">+</span> npages<span class="token punctuation">;</span>            n<span class="token operator">-></span>next <span class="token operator">=</span> b<span class="token operator">-></span>next<span class="token punctuation">;</span>            n<span class="token operator">-></span>page <span class="token operator">=</span> b<span class="token operator">-></span>page <span class="token operator">-</span> npages<span class="token punctuation">;</span>            <span class="token operator">*</span>prev   <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果找到一個頁數大於需求的，選擇此頁，並分割</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>page <span class="token operator">==</span> npages<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* this node fit, remove this node */</span>            <span class="token operator">*</span>prev <span class="token operator">=</span> b<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* unlock heap */</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有一個剛剛好，選擇此頁</li><li>最後回傳選擇的頁</li></ul><hr><h3 id="rt-realloc"><a href="#rt-realloc" class="headerlink" title="rt_realloc"></a>rt_realloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>增長/縮減記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>*rmem</code></th><th><code>newsize</code></th></tr></thead><tbody><tr><td>欲增長/縮減的記憶體位址</td><td>新的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will change the size of previously allocated memory block. * * @param ptr the previously allocated memory block * @param size the new size of memory block * * @return the allocated memory */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>nptr<span class="token punctuation">;</span>    slab_zone <span class="token operator">*</span>z<span class="token punctuation">;</span>    <span class="token keyword">struct</span> memusage <span class="token operator">*</span>kup<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果傳入的 ptr 為空，malloc(size)</li><li>如果傳入的 size 為 0，free(ptr)</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*     * Get the original allocation's zone.  If the new request winds up     * using the same chunk size we do not have to do anything.     */</span>    kup <span class="token operator">=</span> <span class="token function">btokup</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_MM_PAGE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>kup<span class="token operator">-></span>type <span class="token operator">==</span> PAGE_TYPE_LARGE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rt_size_t osize<span class="token punctuation">;</span>        osize <span class="token operator">=</span> kup<span class="token operator">-></span>size <span class="token operator">&lt;&lt;</span> RT_MM_PAGE_BITS<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nptr <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>nptr<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> size <span class="token operator">></span> osize <span class="token operator">?</span> osize <span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著檢查此 ptr 所在的頁資訊，如果是 LARGE，代表原來的 ptr 是由頁分配器所分配的</li><li>新 malloc(size)，並還原資料，釋放舊的記憶體</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>kup<span class="token operator">-></span>type <span class="token operator">==</span> PAGE_TYPE_SMALL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        z <span class="token operator">=</span> <span class="token punctuation">(</span>slab_zone <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_MM_PAGE_MASK<span class="token punctuation">)</span> <span class="token operator">-</span>                          kup<span class="token operator">-></span>size <span class="token operator">*</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>z<span class="token operator">-></span>z_magic <span class="token operator">==</span> ZALLOC_SLAB_MAGIC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">zoneindex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token operator">-></span>z_chunksize <span class="token operator">==</span> size<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* same chunk */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果是 SMALL，首先找到歸屬得 zone：<ul><li>透過減掉頁資訊上的 size 乘以頁的大小，即可找到zone的初始位址</li><li>在 malloc 中，建立 zone 時 size 是從 0 開始填，一頁一頁加一</li><li>如果新的大小與原本的 chunk 相同，不做事</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/*         * Allocate memory for the new request size.  Note that zoneindex has         * already adjusted the request size to the appropriate chunk size, which         * should optimize our bcopy().  Then copy and return the new pointer.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nptr <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>nptr<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> size <span class="token operator">></span> z<span class="token operator">-></span>z_chunksize <span class="token operator">?</span> z<span class="token operator">-></span>z_chunksize <span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_realloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不同，malloc(size)，並還原資料，釋放舊的記憶體</li></ul><hr><h3 id="rt-calloc"><a href="#rt-calloc" class="headerlink" title="rt_calloc"></a>rt_calloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求一段連續的記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>count</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的數量</td><td>一塊的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will contiguously allocate enough space for count objects * that are size bytes of memory each and returns a pointer to the allocated * memory. * * The allocated memory is filled with bytes of value zero. * * @param count number of objects to allocate * @param size size of the objects to allocate * * @return pointer to allocated memory / NULL pointer if there is an error */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_calloc</span><span class="token punctuation">(</span>rt_size_t count<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate 'count' objects of size 'size' */</span>    p <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>count <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* zero the memory */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token function">rt_memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_calloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>與 memheap 相同，一次要一塊 count 乘 size 的記憶體</li><li>清 0 並回傳起始位址</li></ul><hr><h2 id="釋放記憶體"><a href="#釋放記憶體" class="headerlink" title="釋放記憶體"></a>釋放記憶體</h2><p><i class="fa fa-code"></i> Code: <code>rt_free</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*ptr</code></th></tr></thead><tbody><tr><td>欲釋放的記憶體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will release the previous allocated memory block by rt_malloc. * The released memory block is taken back to system heap. * * @param ptr the address of memory which will be released */</span><span class="token keyword">void</span> <span class="token function">rt_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">{</span>    slab_zone <span class="token operator">*</span>z<span class="token punctuation">;</span>    slab_chunk <span class="token operator">*</span>chunk<span class="token punctuation">;</span>    <span class="token keyword">struct</span> memusage <span class="token operator">*</span>kup<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* free a RT_NULL pointer */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_free_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get memory usage */</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_DEBUG_SLAB</span>    <span class="token punctuation">{</span>        rt_uint32_t addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_MM_PAGE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"free a memory 0x%x and align to 0x%x, kup index %d\n"</span><span class="token punctuation">,</span>                      <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr<span class="token punctuation">,</span>                      <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>addr<span class="token punctuation">,</span>                      <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">-</span> heap_start<span class="token punctuation">)</span> <span class="token operator">>></span> RT_MM_PAGE_BITS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    kup <span class="token operator">=</span> <span class="token function">btokup</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_MM_PAGE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* release large allocation */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>kup<span class="token operator">-></span>type <span class="token operator">==</span> PAGE_TYPE_LARGE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rt_uint32_t size<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* lock heap */</span>        <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* clear page counter */</span>        size <span class="token operator">=</span> kup<span class="token operator">-></span>size<span class="token punctuation">;</span>        kup<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>        used_mem <span class="token operator">-</span><span class="token operator">=</span> size <span class="token operator">*</span> RT_MM_PAGE_SIZE<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"free large memory block 0x%x, page count %d\n"</span><span class="token punctuation">,</span>                      <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* free this page */</span>        <span class="token function">rt_page_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果要釋放的記憶體是由頁分配器分配的，根據頁資訊中的 size 來釋放，並清 0</li><li>實際呼叫 <code>rt_page_free(ptr, size)</code> 來完成</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* lock heap */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* zone case. get out zone. */</span>    z <span class="token operator">=</span> <span class="token punctuation">(</span>slab_zone <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_MM_PAGE_MASK<span class="token punctuation">)</span> <span class="token operator">-</span>                      kup<span class="token operator">-></span>size <span class="token operator">*</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>z<span class="token operator">-></span>z_magic <span class="token operator">==</span> ZALLOC_SLAB_MAGIC<span class="token punctuation">)</span><span class="token punctuation">;</span>    chunk          <span class="token operator">=</span> <span class="token punctuation">(</span>slab_chunk <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">;</span>    chunk<span class="token operator">-></span>c_next  <span class="token operator">=</span> z<span class="token operator">-></span>z_freechunk<span class="token punctuation">;</span>    z<span class="token operator">-></span>z_freechunk <span class="token operator">=</span> chunk<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>    used_mem <span class="token operator">-</span><span class="token operator">=</span> z<span class="token operator">-></span>z_chunksize<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果是由 zone 分配，找到歸屬的 zone，並將需要釋放的 chunk 插到 free list 上</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*     * Bump the number of free chunks.  If it becomes non-zero the zone     * must be added back onto the appropriate list.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token operator">-></span>z_nfree<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        z<span class="token operator">-></span>z_next <span class="token operator">=</span> zone_array<span class="token punctuation">[</span>z<span class="token operator">-></span>z_zoneindex<span class="token punctuation">]</span><span class="token punctuation">;</span>        zone_array<span class="token punctuation">[</span>z<span class="token operator">-></span>z_zoneindex<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新 <code>nfree</code>，如果本來為 0 ，則需要將此 zone 插回 zone array</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*     * If the zone becomes totally free, and there are other zones we     * can allocate from, move this zone to the FreeZones list.  Since     * this code can be called from an IPI callback, do *NOT* try to mess     * with kernel_map here.  Hysteresis will be performed at malloc() time.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token operator">-></span>z_nfree <span class="token operator">==</span> z<span class="token operator">-></span>z_nmax <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>z<span class="token operator">-></span>z_next <span class="token operator">||</span> zone_array<span class="token punctuation">[</span>z<span class="token operator">-></span>z_zoneindex<span class="token punctuation">]</span> <span class="token operator">!=</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        slab_zone <span class="token operator">*</span><span class="token operator">*</span>pz<span class="token punctuation">;</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"free zone 0x%x\n"</span><span class="token punctuation">,</span>                                     <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>z<span class="token punctuation">,</span> z<span class="token operator">-></span>z_zoneindex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* remove zone from zone array list */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>pz <span class="token operator">=</span> <span class="token operator">&amp;</span>zone_array<span class="token punctuation">[</span>z<span class="token operator">-></span>z_zoneindex<span class="token punctuation">]</span><span class="token punctuation">;</span> z <span class="token operator">!=</span> <span class="token operator">*</span>pz<span class="token punctuation">;</span> pz <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>pz<span class="token punctuation">)</span><span class="token operator">-></span>z_next<span class="token punctuation">)</span>            <span class="token punctuation">;</span>        <span class="token operator">*</span>pz <span class="token operator">=</span> z<span class="token operator">-></span>z_next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果釋放完這個 chunk 後整個 zone 都釋放完了，我們需要釋放整個 zone</li><li>這裡還同時確保在同一個 zone array entry 中還有其他的 zone 可以分配</li><li>接著我們把這個 zone 從 zone array 移除</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* reset zone */</span>        z<span class="token operator">-></span>z_magic <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* insert to free zone list */</span>        z<span class="token operator">-></span>z_next <span class="token operator">=</span> zone_free<span class="token punctuation">;</span>        zone_free <span class="token operator">=</span> z<span class="token punctuation">;</span>        <span class="token operator">++</span> zone_free_cnt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重設 magic，將這個 zone 插上 free zone，free count 加一</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* release zone to page allocator */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>zone_free_cnt <span class="token operator">></span> ZONE_RELEASE_THRESH<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">register</span> rt_base_t i<span class="token punctuation">;</span>            z         <span class="token operator">=</span> zone_free<span class="token punctuation">;</span>            zone_free <span class="token operator">=</span> z<span class="token operator">-></span>z_next<span class="token punctuation">;</span>            <span class="token operator">--</span> zone_free_cnt<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* set message usage */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> kup <span class="token operator">=</span> <span class="token function">btokup</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> zone_page_cnt<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                kup<span class="token operator">-></span>type <span class="token operator">=</span> PAGE_TYPE_FREE<span class="token punctuation">;</span>                kup<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                kup <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/* unlock heap */</span>            <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* release pages */</span>            <span class="token function">rt_page_free</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> zone_size <span class="token operator">/</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* unlock heap */</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_free<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果已經有 <code>ZONE_RELEASE_THRESH</code> (2) 個以上的 free zone，完全釋放一個 zone 給頁分配器<ul><li>從 free zone 中移除，free count 減一</li><li>重設頁資訊：type free、size 0</li><li>透過 <code>rt_page_free</code> 完成</li></ul></li></ul><hr><h3 id="rt-page-free"><a href="#rt-page-free" class="headerlink" title="rt_page_free"></a>rt_page_free</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放頁記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*addr</code></th><th><code>pages</code></th></tr></thead><tbody><tr><td>欲釋放的頁</td><td>欲釋放的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rt_page_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> rt_size_t npages<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span><span class="token operator">*</span>prev<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>addr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>addr <span class="token operator">%</span> RT_MM_PAGE_SIZE <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>npages <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* lock heap */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>prev <span class="token operator">=</span> <span class="token operator">&amp;</span>rt_page_list<span class="token punctuation">;</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token operator">*</span>prev<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_NULL<span class="token punctuation">;</span> prev <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>b<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>b<span class="token operator">-></span>page <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>b <span class="token operator">></span> n <span class="token operator">||</span> b <span class="token operator">+</span> b<span class="token operator">-></span>page <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> b<span class="token operator">-></span>page <span class="token operator">==</span> n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>page <span class="token operator">+</span><span class="token operator">=</span> npages<span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token operator">-></span>next<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                b<span class="token operator">-></span>page <span class="token operator">+</span><span class="token operator">=</span> b<span class="token operator">-></span>next<span class="token operator">-></span>page<span class="token punctuation">;</span>                b<span class="token operator">-></span>next  <span class="token operator">=</span> b<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">goto</span> _return<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> n <span class="token operator">+</span> npages<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n<span class="token operator">-></span>page <span class="token operator">=</span> b<span class="token operator">-></span>page <span class="token operator">+</span> npages<span class="token punctuation">;</span>            n<span class="token operator">-></span>next <span class="token operator">=</span> b<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token operator">*</span>prev   <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token keyword">goto</span> _return<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> n <span class="token operator">+</span> npages<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    n<span class="token operator">-></span>page <span class="token operator">=</span> npages<span class="token punctuation">;</span>    n<span class="token operator">-></span>next <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token operator">*</span>prev   <span class="token operator">=</span> n<span class="token punctuation">;</span>_return<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">/* unlock heap */</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> 記憶體管理 </tag>
            
            <tag> SLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread 小記憶體動態管理</title>
      <link href="/rt-small-mem/"/>
      <url>/rt-small-mem/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: mem.c</p></blockquote><ul><li>與 memory heap 的做法類似，一開始是一塊大的記憶體，包含 header</li><li>分配記憶體時適當的切割</li><li>所有的記憶體塊透過 header 串起來，形成一個雙向鏈結</li></ul><p><img src="https://i.imgur.com/tbptSYO.png" alt="" title="small memory example"></p><blockquote><p>使用此管理方式： <code>#defined RT_USING_HEAP &amp;&amp; #defined RT_USING_SMALL_MEM</code></p></blockquote><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> heap_mem<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* magic and used flag */</span>    rt_uint16_t magic<span class="token punctuation">;</span>    rt_uint16_t used<span class="token punctuation">;</span>    rt_size_t next<span class="token punctuation">,</span> prev<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>    rt_uint8_t thread<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* thread name */</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>此結構即為一個記憶體塊的 header</li><li>包含了<ul><li>magic 碼 <code>0x1ea0</code></li><li>使用中標記</li><li>前一顆與下一顆</li><li>使用此記憶體的 thread 名稱（選）</li></ul></li></ul><hr><h2 id="初始化-heap"><a href="#初始化-heap" class="headerlink" title="初始化 heap"></a>初始化 heap</h2><p><i class="fa fa-code"></i> Code: <code>rt_system_heap_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 heap</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*begin_addr</code></th><th><code>*end_addr</code></th></tr></thead><tbody><tr><td>記憶體起始位址</td><td>結束位址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @ingroup SystemInit * * This function will initialize system heap memory. * * @param begin_addr the beginning address of system heap memory. * @param end_addr the end address of system heap memory. */</span><span class="token keyword">void</span> <span class="token function">rt_system_heap_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>begin_addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>end_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>mem<span class="token punctuation">;</span>    rt_uint32_t begin_align <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>begin_addr<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    rt_uint32_t end_align <span class="token operator">=</span> <span class="token function">RT_ALIGN_DOWN</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>end_addr<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向上對齊起始位址與向下對齊結束位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* alignment addr */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end_align <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>end_align <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span> <span class="token operator">>=</span> begin_align<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* calculate the aligned memory size */</span>        mem_size_aligned <span class="token operator">=</span> end_align <span class="token operator">-</span> begin_align <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"mem init, error begin address 0x%x, and end address 0x%x\n"</span><span class="token punctuation">,</span>                   <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>begin_addr<span class="token punctuation">,</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>end_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著檢查起始與結束位址是否合法</li><li>如果合法，給定 <code>mem_size</code> 為結束位址 - 起始位址 - 2 倍的 <code>struct mem</code> 大小</li><li>也就是與 <code>mem_heap</code> 相同，一開始的記憶體設定為一大塊，頭與尾都要有一個 header</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* point to begin address of heap */</span>    heap_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>begin_align<span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"mem init, heap begin address 0x%x, size %d\n"</span><span class="token punctuation">,</span>                                <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>heap_ptr<span class="token punctuation">,</span> mem_size_aligned<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize the start of the heap */</span>    mem        <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span>heap_ptr<span class="token punctuation">;</span>    mem<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span>    mem<span class="token operator">-></span>next  <span class="token operator">=</span> mem_size_aligned <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span>    mem<span class="token operator">-></span>prev  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mem<span class="token operator">-></span>used  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著設定前面的 header：<ul><li>設定 magic 碼</li><li>下一塊為結尾的 header</li><li>上一塊為自己</li><li>以及沒有使用過</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>    <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token string">"INIT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* initialize the end of the heap */</span>    heap_end        <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>    heap_end<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span>    heap_end<span class="token operator">-></span>used  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    heap_end<span class="token operator">-></span>next  <span class="token operator">=</span> mem_size_aligned <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span>    heap_end<span class="token operator">-></span>prev  <span class="token operator">=</span> mem_size_aligned <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>    <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>heap_end<span class="token punctuation">,</span> <span class="token string">"INIT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著設定結尾的 header<ul><li>magic 碼</li><li>已被使用過</li><li>上一塊與下一塊指向自己</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">rt_sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> <span class="token string">"heap"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> RT_IPC_FLAG_FIFO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize the lowest-free pointer to the start of the heap */</span>    lfree <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span>heap_ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後初始化 semaphore</li><li>把這一塊掛上 <code>lfree</code></li></ul><hr><h2 id="分配記憶體"><a href="#分配記憶體" class="headerlink" title="分配記憶體"></a>分配記憶體</h2><h3 id="Code-rt-malloc"><a href="#Code-rt-malloc" class="headerlink" title="Code: rt_malloc"></a>Code: rt_malloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Allocate a block of memory with a minimum of 'size' bytes. * * @param size is the minimum size of the requested block in bytes. * * @return pointer to allocated memory or NULL if no free memory was found. */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_malloc</span><span class="token punctuation">(</span>rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_size_t ptr<span class="token punctuation">,</span> ptr2<span class="token punctuation">;</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>mem<span class="token punctuation">,</span> <span class="token operator">*</span>mem2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 <code>size</code> 為 0，回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"malloc size %d, but align to %d\n"</span><span class="token punctuation">,</span>                                    size<span class="token punctuation">,</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"malloc size %d\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* alignment size */</span>    size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> mem_size_aligned<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"no memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向上對齊 <code>size</code>，如果超過可用大小，回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* every data block must be at least MIN_SIZE_ALIGNED long */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> MIN_SIZE_ALIGNED<span class="token punctuation">)</span>        size <span class="token operator">=</span> MIN_SIZE_ALIGNED<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果小於 min size，設為 min size</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* take memory semaphore */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>取得 semaphore</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>lfree <span class="token operator">-</span> heap_ptr<span class="token punctuation">;</span>         ptr <span class="token operator">&lt;</span> mem_size_aligned <span class="token operator">-</span> size<span class="token punctuation">;</span>         ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這裡特別的說明一下 for 迴圈：<br>首先起點是 <code>lfree</code> - <code>heap_ptr</code>，這裡代表最左邊的 free block 與 heap 起點的距離。 我們把 <code>heap_ptr</code> 看成是一個 <code>rt_uint8_t</code> 的陣列，也就是一格一個 byte 的陣列。 再來把 <code>lfree</code> - <code>heap_ptr</code> 看成是差量 (offset)，單位是 byte。 如此一來，<code>&amp;heap_ptr[ptr]</code> 就會是 <code>lfree</code> 的起始位置了。</p><p>再來我們看 <code>next</code>，在初始化的時候，<code>next</code> 是指向 0，這個意思是下一顆在陣列的第 0 個，也就是自己；所以 <code>next</code> 存放的是下一顆的 index，而不是起始位置。</p><p>最後來看上界，理論上我們需要從 lfree 找到最後一顆，實際上如果最後幾顆不夠大的話是不需要檢查的，所以這裡上界設在 <code>mem_size_aligned</code> - <code>size</code> 的意思就是說如果最後幾顆的大小總和不夠大，我們可以略過。</p><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>mem<span class="token operator">-></span>used<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span>ptr <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> size<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* mem is not used and at least perfect fit is possible:             * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>first fit，如果找到第一顆可用的就進去</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token keyword">if</span> <span class="token punctuation">(</span>mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span>ptr <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span> <span class="token operator">>=</span>                <span class="token punctuation">(</span>size <span class="token operator">+</span> SIZEOF_STRUCT_MEM <span class="token operator">+</span> MIN_SIZE_ALIGNED<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>又，如果這顆夠大到可以切割的話</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* (in addition to the above, we test if another struct heap_mem (SIZEOF_STRUCT_MEM) containing                 * at least MIN_SIZE_ALIGNED of data also fits in the 'user data space' of 'mem')                 * -> split large block, create empty remainder,                 * remainder must be large enough to contain MIN_SIZE_ALIGNED data: if                 * mem->next - (ptr + (2*SIZEOF_STRUCT_MEM)) == size,                 * struct heap_mem would fit in but no data between mem2 and mem2->next                 * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty                 *       region that couldn't hold data, but when mem->next gets freed,                 *       the 2 regions would be combined, resulting in more free memory                 */</span>                ptr2 <span class="token operator">=</span> ptr <span class="token operator">+</span> SIZEOF_STRUCT_MEM <span class="token operator">+</span> size<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* create mem2 struct */</span>                mem2       <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>ptr2<span class="token punctuation">]</span><span class="token punctuation">;</span>                mem2<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span>                mem2<span class="token operator">-></span>used <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                mem2<span class="token operator">-></span>next <span class="token operator">=</span> mem<span class="token operator">-></span>next<span class="token punctuation">;</span>                mem2<span class="token operator">-></span>prev <span class="token operator">=</span> ptr<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>                <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem2<span class="token punctuation">,</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定下一顆的資料，同時把 <code>next</code> 與 <code>prev</code> 接到正確位置</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* and insert it between mem and mem->next */</span>                mem<span class="token operator">-></span>next <span class="token operator">=</span> ptr2<span class="token punctuation">;</span>                mem<span class="token operator">-></span>used <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mem2<span class="token operator">-></span>next <span class="token operator">!=</span> mem_size_aligned <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem2<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span>prev <span class="token operator">=</span> ptr2<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著把原本那塊的 <code>next</code> 指向新的那塊，設為使用中</li><li>如果新的那塊 <code>next</code> 不是最後一塊，設定 <code>prev</code></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>                used_mem <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>max_mem <span class="token operator">&lt;</span> used_mem<span class="token punctuation">)</span>                    max_mem <span class="token operator">=</span> used_mem<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後更新 <code>used_mem</code> 與 <code>max_mem</code></li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* (a mem2 struct does no fit into the user data space of mem and mem->next will always                 * be used at this point: if not we have 2 unused structs in a row, plug_holes should have                 * take care of this).                 * -> near fit or excact fit: do not split, no mem2 creation                 * also can't move mem->next directly behind mem, since mem->next                 * will always be used at this point!                 */</span>                mem<span class="token operator">-></span>used <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>                used_mem <span class="token operator">+</span><span class="token operator">=</span> mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>max_mem <span class="token operator">&lt;</span> used_mem<span class="token punctuation">)</span>                    max_mem <span class="token operator">=</span> used_mem<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不可切割，只需設定使用中即可</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* set memory block magic */</span>            mem<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token string">"NONE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mem <span class="token operator">==</span> lfree<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* Find next free block after mem and update lowest free pointer */</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>lfree<span class="token operator">-></span>used <span class="token operator">&amp;&amp;</span> lfree <span class="token operator">!=</span> heap_end<span class="token punctuation">)</span>                    lfree <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>lfree<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lfree <span class="token operator">==</span> heap_end<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>lfree<span class="token operator">-></span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>視情況更新 <code>lfree</code></li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>mem <span class="token operator">+</span> SIZEOF_STRUCT_MEM <span class="token operator">+</span> size <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span> <span class="token operator">%</span> RT_ALIGN_SIZE <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>mem<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>RT_ALIGN_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span>                         <span class="token punctuation">(</span><span class="token string">"allocate memory at 0x%x, size: %d\n"</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span>mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_malloc_hook<span class="token punctuation">,</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* return the memory data except mem struct */</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>還鎖，並回傳找到的記憶體位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_malloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>沒找到一樣還鎖，並回傳 NULL</li></ul><hr><h3 id="Code-rt-realloc"><a href="#Code-rt-realloc" class="headerlink" title="Code: rt_realloc"></a>Code: rt_realloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>增長/縮減記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>*rmeme</code></th><th><code>newsize</code></th></tr></thead><tbody><tr><td>欲增長/縮減的記憶體位址</td><td>新的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will change the previously allocated memory block. * * @param rmem pointer to memory allocated by rt_malloc * @param newsize the required new size * * @return the changed memory block address */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>rmem<span class="token punctuation">,</span> rt_size_t newsize<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_size_t size<span class="token punctuation">;</span>    rt_size_t ptr<span class="token punctuation">,</span> ptr2<span class="token punctuation">;</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>mem<span class="token punctuation">,</span> <span class="token operator">*</span>mem2<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>nmem<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* alignment size */</span>    newsize <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>newsize<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">></span> mem_size_aligned<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"realloc: out of memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向上對齊 size，如果：<ul><li>大於可用大小，回傳 NULL</li><li>等於 0，free 記憶體，回傳 NULL</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* allocate a new memory block */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rmem <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如原來的記憶體為空，直接 <code>malloc</code>，並回傳</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_ptr <span class="token operator">||</span>        <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">>=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* illegal memory */</span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rmem<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著取得鎖，檢查傳入的記憶體是否合法</li></ul><pre class="line-numbers language-c"><code class="language-c">    mem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">-</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">;</span>    size <span class="token operator">=</span> mem<span class="token operator">-></span>next <span class="token operator">-</span> ptr <span class="token operator">-</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> newsize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* the size is the same as */</span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rmem<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找到記憶體塊的起始位址，算出 size，如果記憶體大小不需要變動，不做事，回傳原本的記憶體位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">+</span> SIZEOF_STRUCT_MEM <span class="token operator">+</span> MIN_SIZE <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* split memory block */</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>        used_mem <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        ptr2 <span class="token operator">=</span> ptr <span class="token operator">+</span> SIZEOF_STRUCT_MEM <span class="token operator">+</span> newsize<span class="token punctuation">;</span>        mem2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>ptr2<span class="token punctuation">]</span><span class="token punctuation">;</span>        mem2<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span>        mem2<span class="token operator">-></span>used <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mem2<span class="token operator">-></span>next <span class="token operator">=</span> mem<span class="token operator">-></span>next<span class="token punctuation">;</span>        mem2<span class="token operator">-></span>prev <span class="token operator">=</span> ptr<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>        <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem2<span class="token punctuation">,</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        mem<span class="token operator">-></span>next <span class="token operator">=</span> ptr2<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mem2<span class="token operator">-></span>next <span class="token operator">!=</span> mem_size_aligned <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem2<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span>prev <span class="token operator">=</span> ptr2<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可以切割，與上面的動作相同</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token function">plug_holes</span><span class="token punctuation">(</span>mem2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rmem<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-使用 <code>plug_holes</code> 來合併 free block</p><ul><li>還鎖，回傳更新後的記憶體位置</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* expand memory */</span>    nmem <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nmem <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* check memory */</span>    <span class="token punctuation">{</span>        <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>nmem<span class="token punctuation">,</span> rmem<span class="token punctuation">,</span> size <span class="token operator">&lt;</span> newsize <span class="token operator">?</span> size <span class="token punctuation">:</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nmem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_realloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不可切割，或是需要增長，直接要一塊 new size，釋放原本的記憶體</li><li>最後回傳新的記憶體位址</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>plug_holes</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>合併 free block</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*mem</code></th></tr></thead><tbody><tr><td>欲合併的記憶體位址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">plug_holes</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>mem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>nmem<span class="token punctuation">;</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>pmem<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">>=</span> heap_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mem<span class="token operator">-></span>used <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* plug hole forward */</span>    nmem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mem <span class="token operator">!=</span> nmem <span class="token operator">&amp;&amp;</span>        nmem<span class="token operator">-></span>used <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>nmem <span class="token operator">!=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* if mem->next is unused and not end of heap_ptr,         * combine mem and mem->next         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lfree <span class="token operator">==</span> nmem<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lfree <span class="token operator">=</span> mem<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mem<span class="token operator">-></span>next <span class="token operator">=</span> nmem<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>nmem<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span>prev <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可以與下一顆合併</li><li>檢查是否需要更新 <code>lfree</code></li><li>重新接上 <code>next</code> 與 <code>prev</code> (<code>next</code> 的 <code>prev</code>)</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* plug hole backward */</span>    pmem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem<span class="token operator">-></span>prev<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pmem <span class="token operator">!=</span> mem <span class="token operator">&amp;&amp;</span> pmem<span class="token operator">-></span>used <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* if mem->prev is unused, combine mem and mem->prev */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lfree <span class="token operator">==</span> mem<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lfree <span class="token operator">=</span> pmem<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pmem<span class="token operator">-></span>next <span class="token operator">=</span> mem<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span>prev <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>pmem <span class="token operator">-</span> heap_ptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可以與上一顆合併，動作一樣</li></ul><hr><h3 id="Code-rt-calloc"><a href="#Code-rt-calloc" class="headerlink" title="Code: rt_calloc"></a>Code: rt_calloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求一段連續的記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>count</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的數量</td><td>一塊的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will contiguously allocate enough space for count objects * that are size bytes of memory each and returns a pointer to the allocated * memory. * * The allocated memory is filled with bytes of value zero. * * @param count number of objects to allocate * @param size size of the objects to allocate * * @return pointer to allocated memory / NULL pointer if there is an error */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_calloc</span><span class="token punctuation">(</span>rt_size_t count<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate 'count' objects of size 'size' */</span>    p <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>count <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* zero the memory */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token function">rt_memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_calloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>與 memheap 相同，一次要一塊 count 乘 size 的記憶體</li><li>清 0 並回傳起始位址</li></ul><hr><h2 id="釋放記憶體"><a href="#釋放記憶體" class="headerlink" title="釋放記憶體"></a>釋放記憶體</h2><p><i class="fa fa-code"></i> Code: <code>rt_free</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*rmem</code></th></tr></thead><tbody><tr><td>欲釋放的記憶體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will release the previously allocated memory block by * rt_malloc. The released memory block is taken back to system heap. * * @param rmem the address of memory which will be released */</span><span class="token keyword">void</span> <span class="token function">rt_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>rmem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>mem<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rmem <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果需要釋放得記憶體為空，不做事</li></ul><pre class="line-numbers language-c"><code class="language-c">    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>rmem<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>RT_ALIGN_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">>=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_ptr <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_free_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_ptr <span class="token operator">||</span>        <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">>=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"illegal memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Get the corresponding struct heap_mem ... */</span>    mem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">-</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>檢查記憶體位址是否合法，並找到真正的記憶體區塊位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token string">"release memory 0x%x, size: %d\n"</span><span class="token punctuation">,</span>                  <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>rmem<span class="token punctuation">,</span>                  <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span>mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* protect the heap from concurrent access */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* ... which has to be in a used state ... */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mem<span class="token operator">-></span>used <span class="token operator">||</span> mem<span class="token operator">-></span>magic <span class="token operator">!=</span> HEAP_MAGIC<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"to free a bad data block:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"mem: 0x%08x, used flag: %d, magic code: 0x%04x\n"</span><span class="token punctuation">,</span> mem<span class="token punctuation">,</span> mem<span class="token operator">-></span>used<span class="token punctuation">,</span> mem<span class="token operator">-></span>magic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mem<span class="token operator">-></span>used<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mem<span class="token operator">-></span>magic <span class="token operator">==</span> HEAP_MAGIC<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要鎖，檢查是否是使用中的區塊，及是否屬於 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* ... and is now unused. */</span>    mem<span class="token operator">-></span>used  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mem<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>    <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mem <span class="token operator">&lt;</span> lfree<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* the newly freed struct is now the lowest */</span>        lfree <span class="token operator">=</span> mem<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著設為可使用，及更新 <code>lfree</code></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>    used_mem <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* finally, see if prev or next are free also */</span>    <span class="token function">plug_holes</span><span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_free<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後合併記憶體塊，並還鎖</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> 記憶體管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread Memory Heap</title>
      <link href="/rt-memheap/"/>
      <url>/rt-memheap/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: memheap.c</p></blockquote><ul><li>memheap 的管理方法（動態管理）:<ul><li>從 RAM 中要一塊記憶體</li><li>根據使用者需要的大小進行切割</li><li>剩下的以雙向鏈結的方式接起來，形成 free list</li></ul></li></ul><blockquote><p>使用此管理方式： <code>#define RT_USING_MEMHEAP_AS_HEAP</code></p></blockquote><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMHEAP</span><span class="token comment" spellcheck="true">/** * memory item on the heap */</span><span class="token keyword">struct</span> rt_memheap_item<span class="token punctuation">{</span>    rt_uint32_t             magic<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; magic number for memheap */</span>    <span class="token keyword">struct</span> rt_memheap      <span class="token operator">*</span>pool_ptr<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">/**&lt; point of pool */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>next<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/**&lt; next memheap item */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>prev<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/**&lt; prev memheap item */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>next_free<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/**&lt; next free memheap item */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>prev_free<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/**&lt; prev free memheap item */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Base structure of memory heap object */</span><span class="token keyword">struct</span> rt_memheap<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_object        parent<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">/**&lt; inherit from rt_object */</span>    <span class="token keyword">void</span>                   <span class="token operator">*</span>start_addr<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/**&lt; pool start address and size */</span>    rt_uint32_t             pool_size<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/**&lt; pool size */</span>    rt_uint32_t             available_size<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/**&lt; available size */</span>    rt_uint32_t             max_used_size<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/**&lt; maximum allocated size */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>block_list<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/**&lt; used block list */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>free_list<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/**&lt; free block list */</span>    <span class="token keyword">struct</span> rt_memheap_item  free_header<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**&lt; free block list header */</span>    <span class="token keyword">struct</span> rt_semaphore     lock<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/**&lt; semaphore lock */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>*start_addr</code> 指向可用的記憶體<br><br></li><li><code>pool_size</code> 代表總共可用的大小</li><li><code>available_size</code> 目前可用的大小</li><li><code>max_used_size</code> 已使用的歷史中，最大的使用大小<br><br></li><li><code>*block_list</code> 所有切割過的區塊（包含 header）<br><br></li><li><code>*free_list</code> 目前所有可用的區塊</li><li><code>*free_list</code> 的第一顆<br><br></li><li><code>lock</code> semaphore</li></ul><hr><h2 id="建立-memory-heap"><a href="#建立-memory-heap" class="headerlink" title="建立 memory heap"></a>建立 memory heap</h2><p><i class="fa fa-code"></i> Code: <code>rt_system_heap_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 memheap</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*begin_addr</code></th><th><code>*end_addr</code></th></tr></thead><tbody><tr><td>起始位址（欲分配的）</td><td>結束位址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rt_system_heap_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>begin_addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>end_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* initialize a default heap in the system */</span>    <span class="token function">rt_memheap_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_heap<span class="token punctuation">,</span>                    <span class="token string">"heap"</span><span class="token punctuation">,</span>                    begin_addr<span class="token punctuation">,</span>                    <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>end_addr <span class="token operator">-</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>begin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將起始位置，大小，結構體傳入 <code>rt_memheap_init</code></li></ul><hr><p><i class="fa fa-code"></i> Code: <code>rt_memheap_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 memheap</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*memheap</code></th><th><code>*name</code></th><th><code>*start_addr</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>memheap 結構</td><td>名字</td><td>欲分配的記憶體起始位址</td><td>記憶體大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * The initialized memory pool will be: * +-----------------------------------+--------------------------+ * | whole freed memory block          | Used Memory Block Tailer | * +-----------------------------------+--------------------------+ * * block_list --> whole freed memory block * * The length of Used Memory Block Tailer is 0, * which is prevents block merging across list */</span>rt_err_t <span class="token function">rt_memheap_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>memheap<span class="token punctuation">,</span>                         <span class="token keyword">const</span> <span class="token keyword">char</span>        <span class="token operator">*</span>name<span class="token punctuation">,</span>                         <span class="token keyword">void</span>              <span class="token operator">*</span>start_addr<span class="token punctuation">,</span>                         rt_uint32_t        size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>item<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>memheap <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize pool object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>memheap<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_Object_Class_MemHeap<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    memheap<span class="token operator">-></span>start_addr     <span class="token operator">=</span> start_addr<span class="token punctuation">;</span>    memheap<span class="token operator">-></span>pool_size      <span class="token operator">=</span> <span class="token function">RT_ALIGN_DOWN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    memheap<span class="token operator">-></span>available_size <span class="token operator">=</span> memheap<span class="token operator">-></span>pool_size <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    memheap<span class="token operator">-></span>max_used_size  <span class="token operator">=</span> memheap<span class="token operator">-></span>pool_size <span class="token operator">-</span> memheap<span class="token operator">-></span>available_size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先填入 <code>start_addr</code></li><li>向下對齊 <code>size</code></li><li>設定可用大小為 <code>size</code> 減掉 2 個 header</li><li>設定最大已使用大小為目前已使用的大小（即 2 倍的 header）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize the free list header */</span>    item            <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>memheap<span class="token operator">-></span>free_header<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span>magic     <span class="token operator">=</span> RT_MEMHEAP_MAGIC<span class="token punctuation">;</span>    item<span class="token operator">-></span>pool_ptr  <span class="token operator">=</span> memheap<span class="token punctuation">;</span>    item<span class="token operator">-></span>next      <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev      <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    item<span class="token operator">-></span>next_free <span class="token operator">=</span> item<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev_free <span class="token operator">=</span> item<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先初始化 free list：<ul><li>讓 item 指向 free list 的 header</li><li>設定 magic 碼</li><li>將 <code>pool_ptr</code> 指向 memheap 結構</li><li><code>next</code>、<code>prev</code> 指向 <code>NULL</code></li><li><code>next_free</code>、<code>prev_free</code> 指向自己</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set the free list to free list header */</span>    memheap<span class="token operator">-></span>free_list <span class="token operator">=</span> item<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>給定 free list</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize the first big memory block */</span>    item            <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>start_addr<span class="token punctuation">;</span>    item<span class="token operator">-></span>magic     <span class="token operator">=</span> RT_MEMHEAP_MAGIC<span class="token punctuation">;</span>    item<span class="token operator">-></span>pool_ptr  <span class="token operator">=</span> memheap<span class="token punctuation">;</span>    item<span class="token operator">-></span>next      <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev      <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    item<span class="token operator">-></span>next_free <span class="token operator">=</span> item<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev_free <span class="token operator">=</span> item<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著將整個 pool 設定為一個可用的 block<ul><li>讓 item 指向 起始位址</li><li>設定 magic 碼</li><li>將 <code>pool_ptr</code> 指向 memheap 結構</li><li><code>next</code>、<code>prev</code> 指向 <code>NULL</code></li><li><code>next_free</code>、<code>prev_free</code> 指向自己</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    item<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>                 <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>item <span class="token operator">+</span> memheap<span class="token operator">-></span>available_size <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span>prev <span class="token operator">=</span> item<span class="token operator">-></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>讓 next 與 prev 指到結尾的 header</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* block list header */</span>    memheap<span class="token operator">-></span>block_list <span class="token operator">=</span> item<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>給定 block_list</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* place the big memory block to free list */</span>    item<span class="token operator">-></span>next_free <span class="token operator">=</span> memheap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev_free <span class="token operator">=</span> memheap<span class="token operator">-></span>free_list<span class="token punctuation">;</span>    memheap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> item<span class="token punctuation">;</span>    memheap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free            <span class="token operator">=</span> item<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將 free list (item) 的 <code>next</code> 指向 <code>memheap-&gt;free_list-&gt;next_free</code>，也就是 free list</li><li><code>prev</code> 同上</li><li>將 free list (heap) 的 <code>next</code> 指向 <code>item</code></li><li><code>prev</code> 同上</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* move to the end of memory pool to build a small tailer block,     * which prevents block merging     */</span>    item <span class="token operator">=</span> item<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* it's a used memory block */</span>    item<span class="token operator">-></span>magic     <span class="token operator">=</span> RT_MEMHEAP_MAGIC <span class="token operator">|</span> RT_MEMHEAP_USED<span class="token punctuation">;</span>    item<span class="token operator">-></span>pool_ptr  <span class="token operator">=</span> memheap<span class="token punctuation">;</span>    item<span class="token operator">-></span>next      <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>start_addr<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev      <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>start_addr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* not in free list */</span>    item<span class="token operator">-></span>next_free <span class="token operator">=</span> item<span class="token operator">-></span>prev_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定尾巴的 header<ul><li>讓 item 指向 free list 的 header</li><li>設定 magic 碼為<strong>使用過</strong>的</li><li>將 <code>pool_ptr</code> 指向 memheap 結構</li><li><code>next</code>、<code>prev</code> 指向起始位置</li><li><code>next_free</code>、<code>prev_free</code> 指向 <code>NULL</code></li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize semaphore lock */</span>    <span class="token function">rt_sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>memheap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> RT_IPC_FLAG_FIFO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token string">"memory heap: start addr 0x%08x, size %d, free list header 0x%08x\n"</span><span class="token punctuation">,</span>                  start_addr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>memheap<span class="token operator">-></span>free_header<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_memheap_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後初始化 semaphore 並使用 FIFO</li></ul><hr><h2 id="刪除-memory-heap"><a href="#刪除-memory-heap" class="headerlink" title="刪除 memory heap"></a>刪除 memory heap</h2><p><i class="fa fa-code"></i> Code: <code>rt_memheap_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 memheap</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*heap</code></th></tr></thead><tbody><tr><td>欲刪除的 memheap</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_err_t <span class="token function">rt_memheap_detach</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>heap<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Return a successful completion. */</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_memheap_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 <code>rt_object_detach</code> 刪除 semaphore 與 memheap</li></ul><hr><h2 id="分配記憶體"><a href="#分配記憶體" class="headerlink" title="分配記憶體"></a>分配記憶體</h2><h3 id="Code-rt-malloc"><a href="#Code-rt-malloc" class="headerlink" title="Code: rt_malloc"></a>Code: rt_malloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求一塊記憶體</td><td>取得的記憶體</td></tr></tbody></table><table><thead><tr><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_malloc</span><span class="token punctuation">(</span>rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* try to allocate in system heap */</span>    ptr <span class="token operator">=</span> <span class="token function">rt_memheap_alloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_heap<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先嘗試從系統的 heap（<code>_heap</code>）要求記憶體（透過 <code>rt_memheap_alloc</code>）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rt_object <span class="token operator">*</span>object<span class="token punctuation">;</span>        <span class="token keyword">struct</span> rt_list_node <span class="token operator">*</span>node<span class="token punctuation">;</span>        <span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>heap<span class="token punctuation">;</span>        <span class="token keyword">struct</span> rt_object_information <span class="token operator">*</span>information<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* try to allocate on other memory heap */</span>        information <span class="token operator">=</span> <span class="token function">rt_object_get_information</span><span class="token punctuation">(</span>RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果失敗，嘗試從其他的 heap 要求</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>information <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>node  <span class="token operator">=</span> information<span class="token operator">-></span>object_list<span class="token punctuation">.</span>next<span class="token punctuation">;</span>             node <span class="token operator">!=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>information<span class="token operator">-></span>object_list<span class="token punctuation">)</span><span class="token punctuation">;</span>             node  <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            object <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> rt_object<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>            heap   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span><span class="token punctuation">)</span>object<span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* not allocate in the default system heap */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>heap <span class="token operator">==</span> <span class="token operator">&amp;</span>_heap<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>跳過系統的 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">            ptr <span class="token operator">=</span> <span class="token function">rt_memheap_alloc</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_malloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一樣透過 <code>rt_memheap_alloc</code> 來完成</li><li>如果成功就跳出迴圈，最後回傳記憶體位址</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>rt_memheap_alloc</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求一塊記憶體</td><td>取得的記憶體</td></tr></tbody></table><table><thead><tr><th><code>*heap</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>目標 heap</td><td>欲要求的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_memheap_alloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>heap<span class="token punctuation">,</span> rt_uint32_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_err_t result<span class="token punctuation">;</span>    rt_uint32_t free_size<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>header_ptr<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>heap <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* align allocated size */</span>    size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">)</span>        size <span class="token operator">=</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先向上對齊 <code>size</code></li><li>如果小於 <code>RT_MEMHEAP_MINIALLOC</code> (12)，設定為 <code>RT_MEMHEAP_MINIALLOC</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"allocate %d on heap:%8.*s"</span><span class="token punctuation">,</span>                                    size<span class="token punctuation">,</span> RT_NAME_MAX<span class="token punctuation">,</span> heap<span class="token operator">-></span>parent<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> heap<span class="token operator">-></span>available_size<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* search on free list */</span>        free_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 heap 還夠使用，先將 <code>free_size</code> 設為 0</li><li><code>free_size</code> 代表我們目前找到的可用大小</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* lock memheap */</span>        result <span class="token operator">=</span> <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_set_errno</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著試著索取 semaphore</li><li>如果失敗，設定錯誤碼並回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* get the first free memory block */</span>        header_ptr <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>header_ptr <span class="token operator">!=</span> heap<span class="token operator">-></span>free_list <span class="token operator">&amp;&amp;</span> free_size <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get current freed memory block size */</span>            free_size <span class="token operator">=</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>header_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>free_size <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* move to next free memory block */</span>                header_ptr <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著從 free list 上一個一個找</li><li>使用 <em>first fit</em>，找到一個大魚的就退出迴圈</li><li><code>MEMITEM_SIZE(item)</code>：<code>((rt_uint32_t)item-&gt;next - (rt_uint32_t)item - RT_MEMHEAP_SIZE)</code></li><li>利用下一顆的位址減掉自己的位址取的總體大小，再減掉 header 的大小</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* determine if the memory is available. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>free_size <span class="token operator">>=</span> size<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* a block that satisfies the request has been found. */</span>            <span class="token comment" spellcheck="true">/* determine if the block needs to be split. */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>free_size <span class="token operator">>=</span> <span class="token punctuation">(</span>size <span class="token operator">+</span> RT_MEMHEAP_SIZE <span class="token operator">+</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>new_ptr<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* split the block. */</span>                new_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>                          <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>header_ptr<span class="token punctuation">)</span> <span class="token operator">+</span> size <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有成功找到（不是因為走完迴圈才往下）</li><li>且這塊大到可以再切一塊，切割這塊：<ul><li>從找到的那塊開始往後一個 <code>size</code> 與一個 <code>RT_MEMHEAP_SIZE</code> 作為新的 header</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">"split: block[0x%08x] nextm[0x%08x] prevm[0x%08x] to new[0x%08x]\n"</span><span class="token punctuation">,</span>                              header_ptr<span class="token punctuation">,</span>                              header_ptr<span class="token operator">-></span>next<span class="token punctuation">,</span>                              header_ptr<span class="token operator">-></span>prev<span class="token punctuation">,</span>                              new_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* mark the new block as a memory block and freed. */</span>                new_ptr<span class="token operator">-></span>magic <span class="token operator">=</span> RT_MEMHEAP_MAGIC<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* put the pool pointer into the new block. */</span>                new_ptr<span class="token operator">-></span>pool_ptr <span class="token operator">=</span> heap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 magic 碼</li><li>設定所屬 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* break down the block list */</span>                new_ptr<span class="token operator">-></span>prev          <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>                new_ptr<span class="token operator">-></span>next          <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next       <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將此 block 插入 <code>block_list</code></li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* remove header ptr from free list */</span>                header_ptr<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> header_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>prev_free<span class="token operator">-></span>next_free <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>從 free list 中移除找到的 block </li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* insert new_ptr to free list */</span>                new_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>                new_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token punctuation">;</span>                heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>                heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free            <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"new ptr: next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                                                new_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span>                                                new_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將分割好的 block 插入 free list</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* decrement the available byte count.  */</span>                heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">-</span>                                       size <span class="token operator">-</span>                                       RT_MEMHEAP_SIZE<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size <span class="token operator">></span> heap<span class="token operator">-></span>max_used_size<span class="token punctuation">)</span>                    heap<span class="token operator">-></span>max_used_size <span class="token operator">=</span> heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新 <code>available_size</code> 與 <code>max_used_size</code> (如果需要)</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* decrement the entire free size from the available bytes count. */</span>                heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">-</span> free_size<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size <span class="token operator">></span> heap<span class="token operator">-></span>max_used_size<span class="token punctuation">)</span>                    heap<span class="token operator">-></span>max_used_size <span class="token operator">=</span> heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不能切割，一樣更新 <code>available_size</code> 與 <code>max_used_size</code> (如果需要)</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* remove header_ptr from free list */</span>                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">"one block: block[0x%08x], next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                              header_ptr<span class="token punctuation">,</span>                              header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span>                              header_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> header_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>prev_free<span class="token operator">-></span>next_free <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>從 free list 中移除找到的 block </li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* Mark the allocated block as not available. */</span>            header_ptr<span class="token operator">-></span>magic <span class="token operator">|</span><span class="token operator">=</span> RT_MEMHEAP_USED<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* release lock */</span>            <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>標記為使用中，釋放 semaphore</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* Return a memory address to the caller.  */</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                         <span class="token punctuation">(</span><span class="token string">"alloc mem: memory[0x%08x], heap[0x%08x], size: %d\n"</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>header_ptr <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">,</span>                          header_ptr<span class="token punctuation">,</span>                          size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>header_ptr <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後回傳 block 記憶體位址 + header</li><li>即回傳可用的區塊</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* release lock */</span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"allocate memory: failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Return the completion status.  */</span>    <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_memheap_alloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果找失敗，一樣釋放 semaphore</li><li>不論是找失敗，或是記憶體不足，皆回傳 NULL</li></ul><hr><h3 id="Code-rt-realloc"><a href="#Code-rt-realloc" class="headerlink" title="Code: rt_realloc"></a>Code: rt_realloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>重新要求記憶體（增長或縮減）</td><td>新分配完的記憶體塊</td></tr></tbody></table><table><thead><tr><th><code>*rmem</code></th><th><code>newsize</code></th></tr></thead><tbody><tr><td>欲重新分配的記憶體</td><td>新的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>rmem<span class="token punctuation">,</span> rt_size_t newsize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>new_ptr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>header_ptr<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rmem <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果傳入的記憶體位置為空，直接 <code>rt_malloc(newsize)</code> 並回傳</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 <code>newsize</code> 為 0，free 傳入的記憶體位置，回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* get old memory item */</span>    header_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>                 <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">-</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>取得傳入的記憶體塊所屬的 header</li><li>malloc 時回傳的是可使用的起始位址，並不會包含 header，因此這裡減掉一個 header 的大小</li></ul><pre class="line-numbers language-c"><code class="language-c">    new_ptr <span class="token operator">=</span> <span class="token function">rt_memheap_realloc</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>pool_ptr<span class="token punctuation">,</span> rmem<span class="token punctuation">,</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>透過 <code>rt_memheap_realloc</code> 來完成</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_ptr <span class="token operator">==</span> RT_NULL <span class="token operator">&amp;&amp;</span> newsize <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* allocate memory block from other memheap */</span>        new_ptr <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果無法在原本的 heap 完成增長（或縮減），直接從別的 heap 要一塊 <code>newsize</code> 大的記憶體</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">if</span> <span class="token punctuation">(</span>new_ptr <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> rmem <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rt_size_t oldsize<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* get the size of old memory block */</span>            oldsize <span class="token operator">=</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>header_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">></span> oldsize<span class="token punctuation">)</span>                <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>new_ptr<span class="token punctuation">,</span> rmem<span class="token punctuation">,</span> oldsize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>new_ptr<span class="token punctuation">,</span> rmem<span class="token punctuation">,</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_free</span><span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果最後有要成功，復原原本的資料</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">return</span> new_ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_realloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>最後回傳新的記憶體位址</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>rt_memheap_realloc</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>重新要求記憶體（增長或縮減）</td><td>新分配完的記憶體塊</td></tr></tbody></table><table><thead><tr><th><code>heap</code></th><th><code>*ptr</code></th><th><code>newsize</code></th></tr></thead><tbody><tr><td>目標 heap</td><td>欲重新分配的記憶體</td><td>新的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">oid <span class="token operator">*</span><span class="token function">rt_memheap_realloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>heap<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> rt_size_t newsize<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_err_t result<span class="token punctuation">;</span>    rt_size_t oldsize<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>header_ptr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>new_ptr<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_memheap_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 <code>newsize</code> 為 0，free 並回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* align allocated size */</span>    newsize <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>newsize<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">&lt;</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">)</span>        newsize <span class="token operator">=</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向上對齊 <code>newsize</code></li><li>如果小於 <code>RT_MEMHEAP_MINIALLOC</code> (12)，設定為 <code>RT_MEMHEAP_MINIALLOC</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">rt_memheap_alloc</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果傳入的記憶體位置為空，直接 malloc newsize 的大小並回傳</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* get memory block header and get the size of memory block */</span>    header_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>                 <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>ptr <span class="token operator">-</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    oldsize <span class="token operator">=</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>header_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取得傳入的 block 所屬的 header</li><li>一併計算這塊的大小</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* re-allocate memory */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">></span> oldsize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token operator">*</span>new_ptr<span class="token punctuation">;</span>        <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>next_ptr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* lock memheap */</span>        result <span class="token operator">=</span> <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_set_errno</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果需要增長記憶體，先取得 semaphore</li></ul><pre class="line-numbers language-c"><code class="language-c">        next_ptr <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* header_ptr should not be the tail */</span>        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>next_ptr <span class="token operator">></span> header_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* check whether the following free space is enough to expand */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RT_MEMHEAP_IS_USED</span><span class="token punctuation">(</span>next_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rt_int32_t nextsize<span class="token punctuation">;</span>            nextsize <span class="token operator">=</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>next_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>next_ptr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先判斷下一顆可不可用</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* Here is the ASCII art of the situation that we can make use of             * the next free node without alloc/memcpy, |*| is the control             * block:             *             *      oldsize           free node             * |*|-----------|*|----------------------|*|             *         newsize          >= minialloc             * |*|----------------|*|-----------------|*|             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextsize <span class="token operator">+</span> oldsize <span class="token operator">></span> newsize <span class="token operator">+</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* decrement the entire free size from the available bytes count. */</span>                heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">-</span> <span class="token punctuation">(</span>newsize <span class="token operator">-</span> oldsize<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size <span class="token operator">></span> heap<span class="token operator">-></span>max_used_size<span class="token punctuation">)</span>                    heap<span class="token operator">-></span>max_used_size <span class="token operator">=</span> heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可用，而且下一顆足夠分割出一塊新的 block</li><li>更新 <code>available_size</code> 與 <code>max_used_size</code> (如果需要)</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* remove next_ptr from free list */</span>                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">"remove block: block[0x%08x], next_free 0x%08x, prev_free 0x%08x"</span><span class="token punctuation">,</span>                              next_ptr<span class="token punctuation">,</span>                              next_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span>                              next_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> next_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>prev_free<span class="token operator">-></span>next_free <span class="token operator">=</span> next_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> next_ptr<span class="token operator">-></span>prev<span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> next_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>從 free list 移除舊的下一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* build a new one on the right place */</span>                next_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr <span class="token operator">+</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>重新定指新的下一顆（傳入的起始位址加上 <code>newsize</code>）</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">"new free block: block[0x%08x] nextm[0x%08x] prevm[0x%08x]"</span><span class="token punctuation">,</span>                              next_ptr<span class="token punctuation">,</span>                              next_ptr<span class="token operator">-></span>next<span class="token punctuation">,</span>                              next_ptr<span class="token operator">-></span>prev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* mark the new block as a memory block and freed. */</span>                next_ptr<span class="token operator">-></span>magic <span class="token operator">=</span> RT_MEMHEAP_MAGIC<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* put the pool pointer into the new block. */</span>                next_ptr<span class="token operator">-></span>pool_ptr <span class="token operator">=</span> heap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 magic 碼</li><li>設定所屬 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">                next_ptr<span class="token operator">-></span>prev          <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>next          <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> next_ptr<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next       <span class="token operator">=</span> next_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>插入 block list</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* insert next_ptr to free list */</span>                next_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token punctuation">;</span>                heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> next_ptr<span class="token punctuation">;</span>                heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free            <span class="token operator">=</span> next_ptr<span class="token punctuation">;</span>                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"new ptr: next_free 0x%08x, prev_free 0x%08x"</span><span class="token punctuation">,</span>                                                next_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span>                                                next_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入 free list</p><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* release lock */</span>                <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>釋放 semaphore 並回傳更新後的記憶體位址</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* release lock */</span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* re-allocate a memory block */</span>        new_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">rt_memheap_alloc</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>new_ptr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>new_ptr<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> oldsize <span class="token operator">&lt;</span> newsize <span class="token operator">?</span> oldsize <span class="token punctuation">:</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_memheap_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> new_ptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果下一顆不夠大，重新在原本的 heap 上要一塊 <code>newsize</code> 大的記憶體</li><li>成功的話還原資料，並釋放原本的記憶體 </li><li>回傳新的記憶體位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* don't split when there is less than one node space left */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">+</span> RT_MEMHEAP_SIZE <span class="token operator">+</span> RT_MEMHEAP_MINIALLOC <span class="token operator">>=</span> oldsize<span class="token punctuation">)</span>        <span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果是需要縮減，且縮減後剩下的大小不足以切成一塊</li><li>什麼事都不做，直接回傳原本的位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* lock memheap */</span>    result <span class="token operator">=</span> <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_set_errno</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以分割的話先取得 semaphore</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* split the block. */</span>    new_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>header_ptr<span class="token punctuation">)</span> <span class="token operator">+</span> newsize <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>定址新的 block</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token string">"split: block[0x%08x] nextm[0x%08x] prevm[0x%08x] to new[0x%08x]\n"</span><span class="token punctuation">,</span>                  header_ptr<span class="token punctuation">,</span>                  header_ptr<span class="token operator">-></span>next<span class="token punctuation">,</span>                  header_ptr<span class="token operator">-></span>prev<span class="token punctuation">,</span>                  new_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* mark the new block as a memory block and freed. */</span>    new_ptr<span class="token operator">-></span>magic <span class="token operator">=</span> RT_MEMHEAP_MAGIC<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* put the pool pointer into the new block. */</span>    new_ptr<span class="token operator">-></span>pool_ptr <span class="token operator">=</span> heap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 magic 碼</li><li>設定所屬 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* break down the block list */</span>    new_ptr<span class="token operator">-></span>prev          <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>    new_ptr<span class="token operator">-></span>next          <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>    header_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>    header_ptr<span class="token operator">-></span>next       <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>插入至 block list</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* determine if the block can be merged with the next neighbor. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RT_MEMHEAP_IS_USED</span><span class="token punctuation">(</span>new_ptr<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>free_ptr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* merge block with next neighbor. */</span>        free_ptr <span class="token operator">=</span> new_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>        heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">-</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>free_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果新的 block 下一顆未使用，即可合併</li><li>先將可用大小減掉下一顆的大小，待會會加回來</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"merge: right node 0x%08x, next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                      header_ptr<span class="token punctuation">,</span> header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span> header_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        free_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>        new_ptr<span class="token operator">-></span>next   <span class="token operator">=</span> free_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>從 block list 移除下一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* remove free ptr from free list */</span>        free_ptr<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> free_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">;</span>        free_ptr<span class="token operator">-></span>prev_free<span class="token operator">-></span>next_free <span class="token operator">=</span> free_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>從 free list 移除下一顆，完成合併</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* insert the split block to free list */</span>    new_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>    new_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token punctuation">;</span>    heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>    heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free            <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"new free ptr: next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                                    new_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span>                                    new_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>無論下一顆是否可以合併，都把新的 block 插入 free list</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* increment the available byte count.  */</span>    heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">+</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>new_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* release lock */</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* return the old memory block */</span>    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_memheap_realloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新可用大小，並釋放 semaphore</li><li>回傳更新後的記憶體位址</li></ul><hr><h3 id="Code-rt-calloc"><a href="#Code-rt-calloc" class="headerlink" title="Code: rt_calloc"></a>Code: rt_calloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求多個連續的記憶體</td><td>第一塊的位址</td></tr></tbody></table><table><thead><tr><th><code>count</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的數量</td><td>欲要求的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_calloc</span><span class="token punctuation">(</span>rt_size_t count<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    rt_size_t total_size<span class="token punctuation">;</span>    total_size <span class="token operator">=</span> count <span class="token operator">*</span> size<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* clean memory */</span>        <span class="token function">rt_memset</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> total_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_calloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>即要求一塊 <code>count * size</code> 大的記憶體</li></ul><hr><h2 id="釋放記憶體"><a href="#釋放記憶體" class="headerlink" title="釋放記憶體"></a>釋放記憶體</h2><p><i class="fa fa-code"></i> Code: <code>rt_free</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放一塊記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*rmem</code></th></tr></thead><tbody><tr><td>欲釋放的記憶體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rt_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>rmem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">rt_memheap_free</span><span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_free<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>透過 <code>rt_memheap_free</code> 完成</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>rt_memheap_free</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放一塊記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*ptr</code></th></tr></thead><tbody><tr><td>欲釋放的記憶體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rt_memheap_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_err_t result<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>heap<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>header_ptr<span class="token punctuation">,</span> <span class="token operator">*</span>new_ptr<span class="token punctuation">;</span>    rt_uint32_t insert_header<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* NULL check */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果傳入 NULL，什麼事都不用做</li><li><code>return</code> 退出副程式</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set initial status as OK */</span>    insert_header <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    new_ptr       <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    header_ptr    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>ptr <span class="token operator">-</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>初始化一些參數，並找到傳入的 block 所屬的 header</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"free memory: memory[0x%08x], block[0x%08x]\n"</span><span class="token punctuation">,</span>                                    ptr<span class="token punctuation">,</span> header_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* check magic */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>magic <span class="token operator">&amp;</span> RT_MEMHEAP_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> RT_MEMHEAP_MAGIC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>magic <span class="token operator">&amp;</span> RT_MEMHEAP_USED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* check whether this block of memory has been over-written. */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>next<span class="token operator">-></span>magic <span class="token operator">&amp;</span> RT_MEMHEAP_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> RT_MEMHEAP_MAGIC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get pool ptr */</span>    heap <span class="token operator">=</span> header_ptr<span class="token operator">-></span>pool_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定址 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* lock memheap */</span>    result <span class="token operator">=</span> <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_set_errno</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先取得 semaphore</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* Mark the memory as available. */</span>    header_ptr<span class="token operator">-></span>magic <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RT_MEMHEAP_USED<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Adjust the available number of bytes. */</span>    heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">+</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>header_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將使用中的標記清除，更新可用大小</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* Determine if the block can be merged with the previous neighbor. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RT_MEMHEAP_IS_USED</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>prev<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"merge: left node 0x%08x\n"</span><span class="token punctuation">,</span>                                        header_ptr<span class="token operator">-></span>prev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* adjust the available number of bytes. */</span>        heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可以往前合併，更新可用大小（加一個 header 的大小）</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* yes, merge block with previous neighbor. */</span>        <span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>prev<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token operator">-></span>prev <span class="token operator">=</span> header_ptr<span class="token operator">-></span>prev<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>從 block list 移除此 block</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* move header pointer to previous. */</span>        header_ptr <span class="token operator">=</span> header_ptr<span class="token operator">-></span>prev<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* don't insert header to free list */</span>        insert_header <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重新定址 <code>header_ptr</code></li><li>設定 <code>insert_header</code> 為 0，表示待會不需要將此 block 插回 free list（現在此 block 是與前一塊合併的，已經在 free list 上了）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* determine if the block can be merged with the next neighbor. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RT_MEMHEAP_IS_USED</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* adjust the available number of bytes. */</span>        heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可以往前合併，更新可用大小（加一個 header 的大小）</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* merge block with next neighbor. */</span>        new_ptr <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"merge: right node 0x%08x, next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                      new_ptr<span class="token punctuation">,</span> new_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span> new_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        new_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>        header_ptr<span class="token operator">-></span>next    <span class="token operator">=</span> new_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定址下一塊，並從 block list 移除下一塊</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* remove new ptr from free list */</span>        new_ptr<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> new_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">;</span>        new_ptr<span class="token operator">-></span>prev_free<span class="token operator">-></span>next_free <span class="token operator">=</span> new_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一併從 free list 中移除</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>insert_header<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* no left merge, insert to free list */</span>        header_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>        header_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token punctuation">;</span>        heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>        heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free            <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"insert to free list: next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                      header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span> header_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果需要，插回 free list 上</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* release lock */</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_memheap_free<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後釋放 semaphore</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> 記憶體管理 </tag>
            
            <tag> Memory Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread Memory Pool</title>
      <link href="/rt-mem/"/>
      <url>/rt-mem/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li>分配記憶體的時間需固定，而且可確定（可預測）的</li><li>分配記憶體同時也要盡量避免碎片化，才能減少系統需重啟的次數</li><li>RT-Thread 使用了靜態與動態管理，其中動態又分為小記憶體管理，與大記憶體管理（SLAB)</li></ul><hr><blockquote><p>File: mempool.c</p></blockquote><ul><li>mempool 的管理方法（靜態管理）:<ul><li>從 RAM 中要一塊記憶體</li><li>將此記憶體切成<strong>固定大小</strong>的區塊</li><li>以間接定址的方式接起來，形成 free list</li></ul></li></ul><blockquote><p>使用此管理方式： <code>#define RT_USING_MEMPOOL</code></p></blockquote><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMPOOL</span><span class="token comment" spellcheck="true">/** * Base structure of Memory pool object */</span><span class="token keyword">struct</span> rt_mempool<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_object parent<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">/**&lt; inherit from rt_object */</span>    <span class="token keyword">void</span>            <span class="token operator">*</span>start_address<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">/**&lt; memory pool start */</span>    rt_size_t        size<span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">/**&lt; size of memory pool */</span>    rt_size_t        block_size<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; size of memory blocks */</span>    rt_uint8_t      <span class="token operator">*</span>block_list<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; memory blocks list */</span>    rt_size_t        block_total_count<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/**&lt; numbers of memory block */</span>    rt_size_t        block_free_count<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/**&lt; numbers of free memory block */</span>    rt_list_t        suspend_thread<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/**&lt; threads pended on this resource */</span>    rt_size_t        suspend_thread_count<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/**&lt; numbers of thread pended on this resource */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span>rt_mp_t<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我們從文本的圖來解釋結構：<br><img src="https://i.imgur.com/9KWhnUY.png" alt="memory pool example" title="memory pool example"></p><ul><li><code>start_address</code> 為每個 mempool 的起始位置，此圖為例則為<em>mempool 1</em> 的起始位置</li><li><code>size</code> 為 mempool 的大小，此圖為例則為<em>mempool 1</em> 的大小（灰色區塊）<br><br></li><li><code>block_size</code> 為由 mempool 產出的空閒鏈表中，每一塊的大小，以<em>mempool 1</em> 為例，則為 32k</li><li><code>block_list</code> 為空閒鏈表，此圖為例則為<em>mempool 1</em> 旁邊的鏈結<br><br></li><li><code>block_total_count</code> 為空閒鏈表創建時的總塊數，以<em>mempool 1</em> 為例，則為 128</li><li><code>block_free_count</code> 為為空閒鏈表現在可用的總塊數<br><br></li><li><code>suspend_thread</code> 則為等待隊伍，此圖為例為最右邊的鏈結</li><li><code>suspend_thread_count</code> 則為等待隊伍的總排隊數，以此圖為例為 3</li></ul><hr><h2 id="建立-memory-pool"><a href="#建立-memory-pool" class="headerlink" title="建立 memory pool"></a>建立 memory pool</h2><ul><li>建立 memory pool 的方法一樣也可分為靜態的與動態的</li><li>這裡的動態是指從原先記憶體 heap 的區塊拿取記憶體</li></ul><h3 id="動態"><a href="#動態" class="headerlink" title="動態"></a>動態</h3><p><i class="fa fa-code"></i> Code: <code>rt_mp_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 mempool（使用 heap）</td><td>mempool</td></tr></tbody></table><table><thead><tr><th><code>*name</code></th><th><code>block_count</code></th><th><code>block_size</code></th></tr></thead><tbody><tr><td>名字</td><td>要切割的總塊數</td><td>一塊 free block 的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will create a mempool object and allocate the memory pool from * heap. * * @param name the name of memory pool * @param block_count the count of blocks in memory pool * @param block_size the size for each block * * @return the created mempool object */</span>rt_mp_t <span class="token function">rt_mp_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>                     rt_size_t   block_count<span class="token punctuation">,</span>                     rt_size_t   block_size<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_uint8_t <span class="token operator">*</span>block_ptr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span>mp<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_size_t offset<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate object */</span>    mp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">rt_object_allocate</span><span class="token punctuation">(</span>RT_Object_Class_MemPool<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate object failed */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mp <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先一樣先從 heap 取一塊記憶體作為 mempool 使用</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize memory pool */</span>    block_size     <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_size <span class="token operator">=</span> block_size<span class="token punctuation">;</span>    mp<span class="token operator">-></span>size       <span class="token operator">=</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> block_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate memory */</span>    mp<span class="token operator">-></span>start_address <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>                                  block_count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token operator">-></span>start_address <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* no memory, delete memory pool object */</span>        <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著對齊 <code>block_size</code> 後填入結構中，一併計算 mempool 的大小</li><li>並從 heap 中取出一塊待會做成 free list</li></ul><pre class="line-numbers language-c"><code class="language-c">    mp<span class="token operator">-></span>block_total_count <span class="token operator">=</span> block_count<span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_free_count  <span class="token operator">=</span> mp<span class="token operator">-></span>block_total_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize suspended thread list */</span>    <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>填入總數，建立等待鏈</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize free block list */</span>    block_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mp<span class="token operator">-></span>start_address<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> mp<span class="token operator">-></span>block_total_count<span class="token punctuation">;</span> offset <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> offset <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">=</span> block_ptr <span class="token operator">+</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> <span class="token punctuation">(</span>offset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_list <span class="token operator">=</span> block_ptr<span class="token punctuation">;</span>    <span class="token keyword">return</span> mp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後製作 free list：<ul><li>一個 free block 分成兩部分：前 8-bit (rt_uint8_t *）與一個 block_size</li><li>前 8-bit 存放下一個 free block 的位置</li></ul></li></ul><hr><h3 id="靜態"><a href="#靜態" class="headerlink" title="靜態"></a>靜態</h3><ul><li>多傳了兩個參數 <code>size</code> 與 <code>*start</code></li></ul><p><i class="fa fa-code"></i> Code: <code>rt_mp_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 mempool</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*mp</code></th><th><code>*name</code></th><th><code>*start</code></th><th><code>size</code></th><th><code>block_size</code></th></tr></thead><tbody><tr><td>結構位址</td><td>名字</td><td>所要使用的記憶體位址</td><td>mempool 大小</td><td>一塊 free block 的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will initialize a memory pool object, normally which is used * for static object. * * @param mp the memory pool object * @param name the name of memory pool * @param start the star address of memory pool * @param size the total size of memory pool * @param block_size the size for each block * * @return RT_EOK */</span>rt_err_t <span class="token function">rt_mp_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span>mp<span class="token punctuation">,</span>                    <span class="token keyword">const</span> <span class="token keyword">char</span>        <span class="token operator">*</span>name<span class="token punctuation">,</span>                    <span class="token keyword">void</span>              <span class="token operator">*</span>start<span class="token punctuation">,</span>                    rt_size_t          size<span class="token punctuation">,</span>                    rt_size_t          block_size<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_uint8_t <span class="token operator">*</span>block_ptr<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_size_t offset<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mp <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_Object_Class_MemPool<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize memory pool */</span>    mp<span class="token operator">-></span>start_address <span class="token operator">=</span> start<span class="token punctuation">;</span>    mp<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token function">RT_ALIGN_DOWN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* align the block size */</span>    block_size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_size <span class="token operator">=</span> block_size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可直接用 <code>rt_object_init</code> 初始化物件</li><li>同時用 <code>RT_ALIGN_DOWN</code> 對齊 size </li><li>填入 <code>block_size</code></li></ul><p><code>RT_ALIGN_DOWN</code> v.s. <code>RT_ALIGN</code></p><ul><li>當傳入 (13,4) 時：</li><li><code>RT_ALIGN_DOWN</code> 回傳 12，也就是在不超過 13 中，4 的倍數中最大的</li><li><code>RT_ALIGN</code> 回傳 16，也就是在大於等於 13 中，4 的倍數中最小的</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* align to align size byte */</span>    mp<span class="token operator">-></span>block_total_count <span class="token operator">=</span> mp<span class="token operator">-></span>size <span class="token operator">/</span> <span class="token punctuation">(</span>mp<span class="token operator">-></span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_free_count  <span class="token operator">=</span> mp<span class="token operator">-></span>block_total_count<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>接著手動算出 block 的總數</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize suspended thread list */</span>    <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize free block list */</span>    block_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mp<span class="token operator">-></span>start_address<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> mp<span class="token operator">-></span>block_total_count<span class="token punctuation">;</span> offset <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> offset <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span>            <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> <span class="token punctuation">(</span>offset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span>        RT_NULL<span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_list <span class="token operator">=</span> block_ptr<span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他的動作皆相同</li></ul><hr><h2 id="刪除-memory-pool"><a href="#刪除-memory-pool" class="headerlink" title="刪除 memory pool"></a>刪除 memory pool</h2><h3 id="動態-1"><a href="#動態-1" class="headerlink" title="動態"></a>動態</h3><p><i class="fa fa-code"></i> Code: <code>rt_mp_delete</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 mempool（使用 heap）</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mp</code></th></tr></thead><tbody><tr><td>欲刪除的 mempool</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will delete a memory pool and release the object memory. * * @param mp the memory pool object * * @return RT_EOK */</span>rt_err_t <span class="token function">rt_mp_delete</span><span class="token punctuation">(</span>rt_mp_t mp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mp <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* wake up all suspended threads */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* get next suspend thread */</span>        thread <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">struct</span> rt_thread<span class="token punctuation">,</span> tlist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* set error code to RT_ERROR */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>當要把 mempool 刪除前，先將正在等待分配記憶體的 thread 一個一個叫醒</li><li>叫醒前，先將錯誤碼改成 <code>ERROR</code></li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/*         * resume thread         * In rt_thread_resume function, it will remove current thread from         * suspend list         */</span>        <span class="token function">rt_thread_resume</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著透過 <code>rt_thread_resume</code> 叫醒 thread</li></ul><p>從等待鏈上移出的動作，在 <code>rt_thread_resume</code> 中會實現。<br>（<i class="fa fa-code"></i> code in <a href="/2018/11/19/rt-thread-thread#暫停、復原-thread">RT-Thread Thread</a>）</p><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* decrease suspended thread count */</span>        mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後更新 <code>suspend_thread_count</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* release allocated room */</span>    <span class="token function">rt_free</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>start_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* detach object */</span>    <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>叫醒完，free 掉建立 mempool 時所要的記憶體</li><li>再透過 <code>rt_object_delete</code> 刪除</li></ul><hr><h3 id="靜態-1"><a href="#靜態-1" class="headerlink" title="靜態"></a>靜態</h3><p><i class="fa fa-code"></i> Code: <code>rt_mp_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 mempool</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*mp</code></th></tr></thead><tbody><tr><td>欲刪除的 mempool</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will detach a memory pool from system object management. * * @param mp the memory pool object * * @return RT_EOK */</span>rt_err_t <span class="token function">rt_mp_detach</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span>mp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mp <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* wake up all suspended threads */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* get next suspend thread */</span>        thread <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">struct</span> rt_thread<span class="token punctuation">,</span> tlist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* set error code to RT_ERROR */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * resume thread         * In rt_thread_resume function, it will remove current thread from         * suspend list         */</span>        <span class="token function">rt_thread_resume</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* decrease suspended thread count */</span>        mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* detach object */</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果是靜態的，就不需要 free</li></ul><hr><h2 id="Code-allocate"><a href="#Code-allocate" class="headerlink" title="Code: allocate"></a>Code: allocate</h2><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>分配記憶體</td><td>一塊 free block</td></tr></tbody></table><table><thead><tr><th><code>mp</code></th><th><code>time</code></th></tr></thead><tbody><tr><td>mempool</td><td>等待時間</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will allocate a block from memory pool * * @param mp the memory pool object * @param time the waiting time * * @return the allocated memory block or RT_NULL on allocated failed */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_mp_alloc</span><span class="token punctuation">(</span>rt_mp_t mp<span class="token punctuation">,</span> rt_int32_t time<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_uint8_t <span class="token operator">*</span>block_ptr<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    rt_uint32_t before_sleep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mp<span class="token operator">-></span>block_free_count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* memory block is unavailable. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* enable interrupt */</span>            <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_set_errno</span><span class="token punctuation">(</span><span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果目前無法取得記憶體，且等待時間為 0，回傳 NULL，並設置錯誤碼為 TIMEOUT</li></ul><pre class="line-numbers language-c"><code class="language-c">        RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* need suspend thread */</span>        <span class="token function">rt_thread_suspend</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_list_insert_after</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>tlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mp<span class="token operator">-></span>suspend_thread_count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get the start tick of timer */</span>            before_sleep <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* init thread timer and start it */</span>            <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                             RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span>                             <span class="token operator">&amp;</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果需要等待，啟動一個 timer</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* do a schedule */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>並做一次調度</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            time <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> before_sleep<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後更新 time 值</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* memory block is available. decrease the free block counter */</span>    mp<span class="token operator">-></span>block_free_count<span class="token operator">--</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果可以要記憶體，更新 <code>block_free_count</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* get block from block list */</span>    block_ptr <span class="token operator">=</span> mp<span class="token operator">-></span>block_list<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>block_ptr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>取得第一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* Setup the next free node. */</span>    mp<span class="token operator">-></span>block_list <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>block_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>並將 free list 往後一顆</li><li><code>block_list</code> 是使用間接定址，前 8-bit 是下一顆的位置</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* point to memory pool */</span>    <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>block_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>接著將前 8-bit 指向原來的 mempool</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_mp_alloc_hook<span class="token punctuation">,</span>                        <span class="token punctuation">(</span>mp<span class="token punctuation">,</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_alloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>最後回傳取得的 free block</p></li><li><p>注意這裡回傳的是 <code>block_ptr + 8</code>，也就是真正可以使用的位址</p></li><li>如果要尋找這個 block 所屬的 mempool 則需要 -8。</li></ul><hr><h2 id="Code-free"><a href="#Code-free" class="headerlink" title="Code: free"></a>Code: free</h2><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*block</code></th></tr></thead><tbody><tr><td>所要釋放的記憶體塊</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will release a memory block * * @param block the address of memory block to be released */</span><span class="token keyword">void</span> <span class="token function">rt_mp_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>block<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span>block_ptr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span>mp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get the control block of pool which the block belongs to */</span>    block_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>block <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mp        <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>block_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先取得所屬的 mempool（-8）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_mp_free_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span>mp<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* increase the free block count */</span>    mp<span class="token operator">-></span>block_free_count <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* link the block into the block list */</span>    <span class="token operator">*</span>block_ptr <span class="token operator">=</span> mp<span class="token operator">-></span>block_list<span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_list <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>block_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新 <code>block_free_count</code></li><li>接著定址到 free list，重新指定 block list</li><li>也就是將此 block 插到第一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* get the suspended thread */</span>        thread <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">.</span>next<span class="token punctuation">,</span>                               <span class="token keyword">struct</span> rt_thread<span class="token punctuation">,</span>                               tlist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* set error */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* resume thread */</span>        <span class="token function">rt_thread_resume</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* decrease suspended thread count */</span>        mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* do a schedule */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_free<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有人在等資源，叫醒他，並做一次調度</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> 記憶體管理 </tag>
            
            <tag> Memory Pool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread IPC 通信</title>
      <link href="/rt-ipc-2/"/>
      <url>/rt-ipc-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: ipc.c</p></blockquote><h2 id="Mail-Box"><a href="#Mail-Box" class="headerlink" title="Mail Box"></a>Mail Box</h2><ul><li>類似於 pipe，主要用來傳輸資料</li><li>每一封郵件大小為 4 bytes（即 32 位元）</li></ul><h3 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MAILBOX</span><span class="token comment" spellcheck="true">/** * mailbox structure */</span><span class="token keyword">struct</span> rt_mailbox<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_ipc_object parent<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; inherit from ipc_object */</span>    rt_uint32_t         <span class="token operator">*</span>msg_pool<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; start address of message buffer */</span>    rt_uint16_t          size<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">/**&lt; size of message pool */</span>    rt_uint16_t          entry<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">/**&lt; index of messages in msg_pool */</span>    rt_uint16_t          in_offset<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">/**&lt; input offset of the message buffer */</span>    rt_uint16_t          out_offset<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/**&lt; output offset of the message buffer */</span>    rt_list_t            suspend_sender_thread<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/**&lt; sender thread suspended on this mailbox */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rt_mailbox <span class="token operator">*</span>rt_mailbox_t<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>msg_pool</code> 指向郵件堆的起點，<code>entry</code> 紀錄總郵件的數量</li></ul><hr><h3 id="建立-mail-box"><a href="#建立-mail-box" class="headerlink" title="建立 mail box"></a>建立 mail box</h3><h4 id="動態記憶體管理"><a href="#動態記憶體管理" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mb_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 mail box</td><td>mail box</td></tr></tbody></table><table><thead><tr><th><code>*name</code></th><th><code>size</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>名字</td><td>mail box 大小</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will create a mailbox object from system resource * * @param name the name of mailbox * @param size the size of mailbox * @param flag the flag of mailbox * * @return the created mailbox, RT_NULL on error happen */</span>rt_mailbox_t <span class="token function">rt_mb_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">,</span> rt_uint8_t flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_mailbox_t mb<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate object */</span>    mb <span class="token operator">=</span> <span class="token punctuation">(</span>rt_mailbox_t<span class="token punctuation">)</span><span class="token function">rt_object_allocate</span><span class="token punctuation">(</span>RT_Object_Class_MailBox<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> mb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先 allocate 一塊給 mailbox</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set parent */</span>    mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>填入 flag 及初始化</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init mailbox */</span>    mb<span class="token operator">-></span>size     <span class="token operator">=</span> size<span class="token punctuation">;</span>    mb<span class="token operator">-></span>msg_pool <span class="token operator">=</span> <span class="token function">RT_KERNEL_MALLOC</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>msg_pool <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* delete mailbox object */</span>        <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因使用動態記憶體的緣故，需 allocate 一塊給郵件堆</li><li>大小為一封一件的大小 * size</li></ul><pre class="line-numbers language-c"><code class="language-c">    mb<span class="token operator">-></span>entry      <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mb<span class="token operator">-></span>in_offset  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mb<span class="token operator">-></span>out_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init an additional list of sender suspend thread */</span>    <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後初始化值及等待鏈</li></ul><hr><h4 id="靜態記憶體管理"><a href="#靜態記憶體管理" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mb_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 mail box</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th><th><code>*name</code></th><th><code>*msgpool</code></th><th><code>size</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>mail box 本體</td><td>名字</td><td>存放郵件的地方</td><td>mail box 大小</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will initialize a mailbox and put it under control of resource * management. * * @param mb the mailbox object * @param name the name of mailbox * @param msgpool the begin address of buffer to save received mail * @param size the size of mailbox * @param flag the flag of mailbox * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_mb_init</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">,</span>                    <span class="token keyword">const</span> <span class="token keyword">char</span>  <span class="token operator">*</span>name<span class="token punctuation">,</span>                    <span class="token keyword">void</span>        <span class="token operator">*</span>msgpool<span class="token punctuation">,</span>                    rt_size_t    size<span class="token punctuation">,</span>                    rt_uint8_t   flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mb <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_Object_Class_MailBox<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent flag */</span>    mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡就不需要 allocate，可直接初始化來使用</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init mailbox */</span>    mb<span class="token operator">-></span>msg_pool   <span class="token operator">=</span> msgpool<span class="token punctuation">;</span>    mb<span class="token operator">-></span>size       <span class="token operator">=</span> size<span class="token punctuation">;</span>    mb<span class="token operator">-></span>entry      <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mb<span class="token operator">-></span>in_offset  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mb<span class="token operator">-></span>out_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init an additional list of sender suspend thread */</span>    <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一樣，郵件堆可直接拿來用，初始化值及等待鏈</li></ul><hr><h3 id="刪除-mail-box"><a href="#刪除-mail-box" class="headerlink" title="刪除 mail box"></a>刪除 mail box</h3><h4 id="動態記憶體管理-1"><a href="#動態記憶體管理-1" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mb_delete</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 mail box</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th></tr></thead><tbody><tr><td>欲刪除的 mail box</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will delete a mailbox object and release the memory * * @param mb the mailbox object * * @return the error code */</span>rt_err_t <span class="token function">rt_mb_delete</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">)</span><span class="token punctuation">{</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mb <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MailBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume all suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* also resume all mailbox private suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先將正在等待郵件的，與正在等待傳送的 thread 叫醒</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* free mailbox pool */</span>    <span class="token function">RT_KERNEL_FREE</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>msg_pool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* delete mailbox object */</span>    <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>歸還郵件堆，最後刪除 mail box</li></ul><hr><h4 id="靜態記憶體管理-1"><a href="#靜態記憶體管理-1" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mb_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 mail box</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th></tr></thead><tbody><tr><td>欲刪除的 mail box</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will detach a mailbox from resource management * * @param mb the mailbox object * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_mb_detach</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mb <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MailBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume all suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* also resume all mailbox private suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先將正在等待郵件的，與正在等待傳送的 thread 叫醒</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* detach mailbox object */</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後刪除 mail box（使用 <code>detach</code>）</li></ul><hr><h3 id="傳送郵件"><a href="#傳送郵件" class="headerlink" title="傳送郵件"></a>傳送郵件</h3><p><i class="fa fa-code"></i> Code: <code>rt_mb_send_wait</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>傳送郵件</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th><th><code>value</code></th><th><code>timeout</code></th></tr></thead><tbody><tr><td>欲傳送的 mailbox</td><td>郵件內容</td><td>等待時間（如果需要）</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will send a mail to mailbox object. If the mailbox is full, * current thread will be suspended until timeout. * * @param mb the mailbox object * @param value the mail * @param timeout the waiting time * * @return the error code */</span>rt_err_t <span class="token function">rt_mb_send_wait</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">,</span>                         rt_uint32_t  value<span class="token punctuation">,</span>                         rt_int32_t   timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    rt_uint32_t tick_delta<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mb <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MailBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize delta tick */</span>    tick_delta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_put_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* for non-blocking call */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>entry <span class="token operator">==</span> mb<span class="token operator">-></span>size <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_EFULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* mailbox is full */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>entry <span class="token operator">==</span> mb<span class="token operator">-></span>size<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* reset error number in thread */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* no waiting, return timeout */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* enable interrupt */</span>            <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span>RT_EFULL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 mail box 滿了，且不等待 (<code>timeout==0</code>)，回傳 <code>FULL</code></li></ul><pre class="line-numbers language-c"><code class="language-c">        RT_DEBUG_IN_THREAD_CONTEXT<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* suspend current thread */</span>        <span class="token function">rt_ipc_list_suspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">,</span>                            thread<span class="token punctuation">,</span>                            mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* has waiting time, start thread timer */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get the start tick of timer */</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"mb_send_wait: start timer of thread:%s\n"</span><span class="token punctuation">,</span>                                        thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* reset the timeout of thread timer and start it */</span>            <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                             RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span>                             <span class="token operator">&amp;</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若要等待，將 thread 掛上等待鏈，啟動一個 timer</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* re-schedule */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>再做一次調度</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* resume from suspend state */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* return error */</span>            <span class="token keyword">return</span> thread<span class="token operator">-></span>error<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* if it's not waiting forever and then re-calculate timeout tick */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tick_delta<span class="token punctuation">;</span>            timeout <span class="token operator">-</span><span class="token operator">=</span> tick_delta<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如跳回來，重新計算 <code>timeout</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set ptr */</span>    mb<span class="token operator">-></span>msg_pool<span class="token punctuation">[</span>mb<span class="token operator">-></span>in_offset<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* increase input offset */</span>    <span class="token operator">++</span> mb<span class="token operator">-></span>in_offset<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>in_offset <span class="token operator">>=</span> mb<span class="token operator">-></span>size<span class="token punctuation">)</span>        mb<span class="token operator">-></span>in_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* increase message entry */</span>    mb<span class="token operator">-></span>entry <span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若可以寫入，將資料寫入，同時更新 <code>offset</code> 及 <code>entry</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* resume suspended thread */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_ipc_list_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_send_wait<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有人在等待寄信，叫醒他，做一次調度</li></ul><hr><ul><li>若是不想等待，可以使用 <code>rt_mb_send</code></li></ul><p><i class="fa fa-code"></i> Code: <code>rt_mb_send</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>傳送郵件（不等待）</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th><th><code>value</code></th></tr></thead><tbody><tr><td>欲傳送的 mailbox</td><td>郵件內容</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will send a mail to mailbox object, if there are threads * suspended on mailbox object, it will be waked up. This function will return * immediately, if you want blocking send, use rt_mb_send_wait instead. * * @param mb the mailbox object * @param value the mail * * @return the error code */</span>rt_err_t <span class="token function">rt_mb_send</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">,</span> rt_uint32_t value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">rt_mb_send_wait</span><span class="token punctuation">(</span>mb<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_send<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>即 <code>timeout == 0</code></li></ul><hr><h3 id="接受郵件"><a href="#接受郵件" class="headerlink" title="接受郵件"></a>接受郵件</h3><p><i class="fa fa-code"></i> Code: <code>rt_mb_recv</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>接受郵件</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th><th><code>*value</code></th><th><code>timeout</code></th></tr></thead><tbody><tr><td>欲收信的 mailbox</td><td>郵件內容</td><td>等待時間（如果需要）</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will receive a mail from mailbox object, if there is no mail * in mailbox object, the thread shall wait for a specified time. * * @param mb the mailbox object * @param value the received mail will be saved in * @param timeout the waiting time * * @return the error code */</span>rt_err_t <span class="token function">rt_mb_recv</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">,</span> rt_uint32_t <span class="token operator">*</span>value<span class="token punctuation">,</span> rt_int32_t timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    rt_uint32_t tick_delta<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mb <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MailBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize delta tick */</span>    tick_delta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_trytake_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* for non-blocking call */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>entry <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* mailbox is empty */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>entry <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* reset error number in thread */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* no waiting, return timeout */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* enable interrupt */</span>            <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token operator">-></span>error <span class="token operator">=</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 mail box 沒東西，且不等待，回傳 <code>TIMEOUT</code></li></ul><pre class="line-numbers language-c"><code class="language-c">        RT_DEBUG_IN_THREAD_CONTEXT<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* suspend current thread */</span>        <span class="token function">rt_ipc_list_suspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">,</span>                            thread<span class="token punctuation">,</span>                            mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* has waiting time, start thread timer */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get the start tick of timer */</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"mb_recv: start timer of thread:%s\n"</span><span class="token punctuation">,</span>                                        thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* reset the timeout of thread timer and start it */</span>            <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                             RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span>                             <span class="token operator">&amp;</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若要等待，將 thread 掛上等待鏈，啟動一個 timer</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* re-schedule */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>再做一次調度</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* resume from suspend state */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* return error */</span>            <span class="token keyword">return</span> thread<span class="token operator">-></span>error<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* if it's not waiting forever and then re-calculate timeout tick */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tick_delta<span class="token punctuation">;</span>            timeout <span class="token operator">-</span><span class="token operator">=</span> tick_delta<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如跳回來，重新計算 <code>timeout</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* fill ptr */</span>    <span class="token operator">*</span>value <span class="token operator">=</span> mb<span class="token operator">-></span>msg_pool<span class="token punctuation">[</span>mb<span class="token operator">-></span>out_offset<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* increase output offset */</span>    <span class="token operator">++</span> mb<span class="token operator">-></span>out_offset<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>out_offset <span class="token operator">>=</span> mb<span class="token operator">-></span>size<span class="token punctuation">)</span>        mb<span class="token operator">-></span>out_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* decrease message entry */</span>    mb<span class="token operator">-></span>entry <span class="token operator">--</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若可以讀取，將資料寫入，同時更新 <code>offset</code> 及 <code>entry</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* resume suspended thread */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_ipc_list_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_take_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_take_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_recv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有人在等待收信，叫醒他，做一次調度</li></ul><hr><h2 id="Message-Queue"><a href="#Message-Queue" class="headerlink" title="Message Queue"></a>Message Queue</h2><ul><li>特性：可接受不固定長度的訊息</li></ul><h3 id="結構-1"><a href="#結構-1" class="headerlink" title="結構"></a>結構</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MESSAGEQUEUE</span><span class="token comment" spellcheck="true">/** * message queue structure */</span><span class="token keyword">struct</span> rt_messagequeue<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_ipc_object parent<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; inherit from ipc_object */</span>    <span class="token keyword">void</span>                <span class="token operator">*</span>msg_pool<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; start address of message queue */</span>    rt_uint16_t          msg_size<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; message size of each message */</span>    rt_uint16_t          max_msgs<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; max number of messages */</span>    rt_uint16_t          entry<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">/**&lt; index of messages in the queue */</span>    <span class="token keyword">void</span>                <span class="token operator">*</span>msg_queue_head<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**&lt; list head */</span>    <span class="token keyword">void</span>                <span class="token operator">*</span>msg_queue_tail<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**&lt; list tail */</span>    <span class="token keyword">void</span>                <span class="token operator">*</span>msg_queue_free<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**&lt; pointer indicated the free node of queue */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rt_messagequeue <span class="token operator">*</span>rt_mq_t<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="建立-message-queue"><a href="#建立-message-queue" class="headerlink" title="建立 message queue"></a>建立 message queue</h3><h4 id="動態記憶體管理-2"><a href="#動態記憶體管理-2" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mq_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 message queue</td><td>message queue</td></tr></tbody></table><table><thead><tr><th><code>*name</code></th><th><code>msg_size</code></th><th><code>max_msgs</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>名字</td><td>一封訊息的大小</td><td>訊息數上限</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will create a message queue object from system resource * * @param name the name of message queue * @param msg_size the size of message * @param max_msgs the maximum number of message in queue * @param flag the flag of message queue * * @return the created message queue, RT_NULL on error happen */</span>rt_mq_t <span class="token function">rt_mq_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>                     rt_size_t   msg_size<span class="token punctuation">,</span>                     rt_size_t   max_msgs<span class="token punctuation">,</span>                     rt_uint8_t  flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_messagequeue <span class="token operator">*</span>mq<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate object */</span>    mq <span class="token operator">=</span> <span class="token punctuation">(</span>rt_mq_t<span class="token punctuation">)</span><span class="token function">rt_object_allocate</span><span class="token punctuation">(</span>RT_Object_Class_MessageQueue<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> mq<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent */</span>    mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先要一塊物件給 message queue，並同時填入 flag 及初始化</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init message queue */</span>    <span class="token comment" spellcheck="true">/* get correct message size */</span>    mq<span class="token operator">-></span>msg_size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>msg_size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    mq<span class="token operator">-></span>max_msgs <span class="token operator">=</span> max_msgs<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定訊息的大小，與訊息數量的上限</li></ul><p><code>RT_ALGIN</code> 目的在對齊訊息的大小，根據不同板子所定義不同的 <code>RT_ALIGN_SIZE</code> 會有所差別<br><br><code>#define RT_ALIGN(size, align)           (((size) + (align) - 1) &amp; ~((align) - 1))</code></p><ul><li>如傳進來的是 <code>RT_ALGIN(7,8)</code> 則結果是 8</li><li>如傳進來的是 <code>RT_ALGIN(13,4)</code> 則結果是 16</li><li>即結果為大於後值的<strong>最小倍數</strong></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* allocate message pool */</span>    mq<span class="token operator">-></span>msg_pool <span class="token operator">=</span> <span class="token function">RT_KERNEL_MALLOC</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> mq<span class="token operator">-></span>max_msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_pool <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_mq_delete</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著需 allocate 適當的記憶體存放訊息</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init message list */</span>    mq<span class="token operator">-></span>msg_queue_head <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init message empty list */</span>    mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> temp <span class="token operator">&lt;</span> mq<span class="token operator">-></span>max_msgs<span class="token punctuation">;</span> temp <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_pool <span class="token operator">+</span>                                        temp <span class="token operator">*</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> mq<span class="token operator">-></span>msg_queue_free<span class="token punctuation">;</span>        mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先將頭尾設為空，再一塊一塊的將 <code>msg_pool</code> 插在 free list 的第一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* the initial entry is zero */</span>    mq<span class="token operator">-></span>entry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mq<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後設定 <code>entry</code> 為 0</li></ul><hr><h4 id="靜態記憶體管理-2"><a href="#靜態記憶體管理-2" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mq_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 message queue</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th><th><code>*name</code></th><th><code>*msgpool</code></th><th><code>msg_size</code></th><th><code>pool_size</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>message queue 本體</td><td>名字</td><td>存放訊息的位址</td><td>一封訊息的大小</td><td>存放訊息的大小</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will initialize a message queue and put it under control of * resource management. * * @param mq the message object * @param name the name of message queue * @param msgpool the beginning address of buffer to save messages * @param msg_size the maximum size of message * @param pool_size the size of buffer to save messages * @param flag the flag of message queue * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_mq_init</span><span class="token punctuation">(</span>rt_mq_t     mq<span class="token punctuation">,</span>                    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>                    <span class="token keyword">void</span>       <span class="token operator">*</span>msgpool<span class="token punctuation">,</span>                    rt_size_t   msg_size<span class="token punctuation">,</span>                    rt_size_t   pool_size<span class="token punctuation">,</span>                    rt_uint8_t  flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_Object_Class_MessageQueue<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent flag */</span>    mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡就不需要去要一塊物件，直接拿來用即可</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set messasge pool */</span>    mq<span class="token operator">-></span>msg_pool <span class="token operator">=</span> msgpool<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get correct message size */</span>    mq<span class="token operator">-></span>msg_size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>msg_size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    mq<span class="token operator">-></span>max_msgs <span class="token operator">=</span> pool_size <span class="token operator">/</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init message list */</span>    mq<span class="token operator">-></span>msg_queue_head <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init message empty list */</span>    mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> temp <span class="token operator">&lt;</span> mq<span class="token operator">-></span>max_msgs<span class="token punctuation">;</span> temp <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_pool <span class="token operator">+</span>                                        temp <span class="token operator">*</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> mq<span class="token operator">-></span>msg_queue_free<span class="token punctuation">;</span>        mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* the initial entry is zero */</span>    mq<span class="token operator">-></span>entry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其餘的動作皆與上面相同</li></ul><hr><h3 id="刪除-message-queue"><a href="#刪除-message-queue" class="headerlink" title="刪除 message queue"></a>刪除 message queue</h3><h4 id="動態記憶體管理-3"><a href="#動態記憶體管理-3" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mq_delete</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 message queue</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th></tr></thead><tbody><tr><td>欲刪除的 message queue</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will delete a message queue object and release the memory * * @param mq the message queue object * * @return the error code */</span>rt_err_t <span class="token function">rt_mq_delete</span><span class="token punctuation">(</span>rt_mq_t mq<span class="token punctuation">)</span><span class="token punctuation">{</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume all suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先把正在等待收訊息的 thread 叫醒</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* free message queue pool */</span>    <span class="token function">RT_KERNEL_FREE</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_pool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* delete message queue object */</span>    <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著 free <code>msg_pool</code>，並刪除物件</li></ul><hr><h4 id="靜態記憶體管理-3"><a href="#靜態記憶體管理-3" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mq_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 message queue</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th></tr></thead><tbody><tr><td>欲刪除的 message queue</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will detach a message queue object from resource management * * @param mq the message queue object * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_mq_detach</span><span class="token punctuation">(</span>rt_mq_t mq<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume all suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* detach message queue object */</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡的 <code>msg_pool</code> 就不需要 free</li></ul><hr><h3 id="傳送訊息"><a href="#傳送訊息" class="headerlink" title="傳送訊息"></a>傳送訊息</h3><p><i class="fa fa-code"></i> Code: <code>rt_mq_send</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>傳送訊息</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th><th><code>*buffer</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>欲傳送的 message queue</td><td>訊息資料</td><td>訊息大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will send a message to message queue object, if there are * threads suspended on message queue object, it will be waked up. * * @param mq the message queue object * @param buffer the message * @param size the size of buffer * * @return the error code */</span>rt_err_t <span class="token function">rt_mq_send</span><span class="token punctuation">(</span>rt_mq_t mq<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span>msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>buffer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* greater than one message size */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> mq<span class="token operator">-></span>msg_size<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_put_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get a free list, there must be an empty item */</span>    msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_queue_free<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* message queue is full */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_EFULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先確定 message queue 沒滿（即 free list 不為空）</li><li>如果滿了，回傳 <code>FULL</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* move free list pointer */</span>    mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> msg<span class="token operator">-></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>接著 free list 往下一顆走</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the msg is the new tailer of list, the next shall be NULL */</span>    msg<span class="token operator">-></span>next <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* copy buffer */</span>    <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將訊息填入從 free list 拿的一顆（<code>msg</code>），這顆待會是新的尾巴（設定 <code>next = NULL</code>）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* link msg to message queue */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* if the tail exists, */</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_queue_tail<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果尾巴不為空（也就是 message queue 有東西），將原本的尾巴指向 <code>msg</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set new tail */</span>    mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* if the head is empty, set head */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_queue_head <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        mq<span class="token operator">-></span>msg_queue_head <span class="token operator">=</span> msg<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定新的尾巴</li><li>如果頭為空（也就是 message queue 為空），設定新的頭</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* increase message entry */</span>    mq<span class="token operator">-></span>entry <span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最後更新 <code>entry</code> </li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* resume suspended thread */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_ipc_list_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_send<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有人在等待接收訊息，叫醒他</li></ul><hr><h4 id="傳送緊急訊息"><a href="#傳送緊急訊息" class="headerlink" title="傳送緊急訊息"></a>傳送緊急訊息</h4><ul><li>與上面不同的是：這裡將新訊息插入<strong>第一顆</strong></li></ul><p><i class="fa fa-code"></i> Code: <code>rt_mq_urgent</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>傳送緊急訊息</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th><th><code>*buffer</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>欲傳送的 message queue</td><td>訊息資料</td><td>訊息大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will send an urgent message to message queue object, which * means the message will be inserted to the head of message queue. If there * are threads suspended on message queue object, it will be waked up. * * @param mq the message queue object * @param buffer the message * @param size the size of buffer * * @return the error code */</span>rt_err_t <span class="token function">rt_mq_urgent</span><span class="token punctuation">(</span>rt_mq_t mq<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span>msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>buffer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* greater than one message size */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> mq<span class="token operator">-></span>msg_size<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_put_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get a free list, there must be an empty item */</span>    msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_queue_free<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* message queue is full */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_EFULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* move free list pointer */</span>    mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> msg<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* copy buffer */</span>    <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因為要插在第一顆，<code>next</code> 就不用設定為空了</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* link msg to the beginning of message queue */</span>    msg<span class="token operator">-></span>next <span class="token operator">=</span> mq<span class="token operator">-></span>msg_queue_head<span class="token punctuation">;</span>    mq<span class="token operator">-></span>msg_queue_head <span class="token operator">=</span> msg<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡就將新訊息插在第一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* if there is no tail */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">=</span> msg<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果原本的 message queue 為空，設定新的尾巴</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* increase message entry */</span>    mq<span class="token operator">-></span>entry <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume suspended thread */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_ipc_list_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_urgent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他的動作皆相同</li></ul><hr><h3 id="接收訊息"><a href="#接收訊息" class="headerlink" title="接收訊息"></a>接收訊息</h3><p><i class="fa fa-code"></i> Code: <code>rt_mq_recv</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>接收訊息</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th><th><code>*buffer</code></th><th><code>size</code></th><th><code>timeout</code></th></tr></thead><tbody><tr><td>欲訊息 message queue</td><td>訊息存放處</td><td>訊息存放處大小</td><td>等待時間（如果需要）</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will receive a message from message queue object, if there is * no message in message queue object, the thread shall wait for a specified * time. * * @param mq the message queue object * @param buffer the received message will be saved in * @param size the size of buffer * @param timeout the waiting time * * @return the error code */</span>rt_err_t <span class="token function">rt_mq_recv</span><span class="token punctuation">(</span>rt_mq_t    mq<span class="token punctuation">,</span>                    <span class="token keyword">void</span>      <span class="token operator">*</span>buffer<span class="token punctuation">,</span>                    rt_size_t  size<span class="token punctuation">,</span>                    rt_int32_t timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span>msg<span class="token punctuation">;</span>    rt_uint32_t tick_delta<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>buffer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize delta tick */</span>    tick_delta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_trytake_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* for non-blocking call */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>entry <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* message queue is empty */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>entry <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        RT_DEBUG_IN_THREAD_CONTEXT<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* reset error number in thread */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* no waiting, return timeout */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* enable interrupt */</span>            <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token operator">-></span>error <span class="token operator">=</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 message queue 為空，且不等待，回傳 <code>TIMEOUT</code></li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* suspend current thread */</span>        <span class="token function">rt_ipc_list_suspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">,</span>                            thread<span class="token punctuation">,</span>                            mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如要等待，將 thread 掛在等待鏈上</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* has waiting time, start thread timer */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get the start tick of timer */</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"set thread:%s to timer list\n"</span><span class="token punctuation">,</span>                                        thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* reset the timeout of thread timer and start it */</span>            <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                             RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span>                             <span class="token operator">&amp;</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>並啟動一個 timer</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* re-schedule */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>開始等待，做一次調度</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* recv message */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* return error */</span>            <span class="token keyword">return</span> thread<span class="token operator">-></span>error<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* if it's not waiting forever and then re-calculate timeout tick */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tick_delta<span class="token punctuation">;</span>            timeout <span class="token operator">-</span><span class="token operator">=</span> tick_delta<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如跳回來，重新計算 <code>timeout</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* get message from queue */</span>    msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_queue_head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* move message queue head */</span>    mq<span class="token operator">-></span>msg_queue_head <span class="token operator">=</span> msg<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reach queue tail, set to NULL */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">==</span> msg<span class="token punctuation">)</span>        mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 message queue 有資料，拿第一顆，同時更新 head（tail，如果需要）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* decrease message entry */</span>    mq<span class="token operator">-></span>entry <span class="token operator">--</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>更新 entry</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* copy message */</span>    <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> msg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> size <span class="token operator">></span> mq<span class="token operator">-></span>msg_size <span class="token operator">?</span> mq<span class="token operator">-></span>msg_size <span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著複製找到的訊息</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* put message to free list */</span>    msg<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_queue_free<span class="token punctuation">;</span>    mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_take_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_recv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後將 <code>msg</code> 插入 free list 的頭</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> event </tag>
            
            <tag> message </tag>
            
            <tag> mailbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread IPC 同步</title>
      <link href="/rt-ipc/"/>
      <url>/rt-ipc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li>兩個 thread 要溝通的方式，是透過共享的記憶體來完成；而如果此記憶體沒有排他性，這個記憶體有可能會不同步。</li><li>因此進入一塊共享的記憶體一次只允許一個 thread 來使用，這樣即可保證其資料的一致性</li><li>進入此共享記憶體則叫做 <strong>critical region</strong></li><li>RT-Thread 利用 7 種方式來完成同步：關閉中斷、scheduler lock、semaphore、互斥鎖、事件、mail box 及 message</li></ul><hr><h2 id="關閉中斷"><a href="#關閉中斷" class="headerlink" title="關閉中斷"></a>關閉中斷</h2><pre class="line-numbers language-c"><code class="language-c">level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  critical region      */</span><span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>此方式是最強大的一種，但此 critical region 不可以佔用太多時間</li></ul><hr><h2 id="Scheduler-lock"><a href="#Scheduler-lock" class="headerlink" title="Scheduler lock"></a>Scheduler lock</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token function">rt_enter_critical</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**    *  critical region     */</span><span class="token function">rt_exit_critical</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用此方式可確保當前 thread 不會被 scheduler 踢出，但還是有可能會被中斷影響。</li></ul><hr><h3 id="進入-scheuler-鎖"><a href="#進入-scheuler-鎖" class="headerlink" title="進入 scheuler 鎖"></a>進入 scheuler 鎖</h3><p><i class="fa fa-code"></i> Code: <code>rt_enter_critical</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>進入 scheuler 鎖</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will lock the thread scheduler. */</span><span class="token keyword">void</span> <span class="token function">rt_enter_critical</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * the maximal number of nest is RT_UINT16_MAX, which is big     * enough and does not check here     */</span>    rt_scheduler_lock_nest <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_enter_critical<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>即，將 <code>rt_scheduler_lock_nest</code> 加一</li></ul><hr><h3 id="離開-scheduler-鎖"><a href="#離開-scheduler-鎖" class="headerlink" title="離開 scheduler 鎖"></a>離開 scheduler 鎖</h3><p><i class="fa fa-code"></i> Code: <code>rt_exit_critical</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>離開 scheuler 鎖</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will unlock the thread scheduler. */</span><span class="token keyword">void</span> <span class="token function">rt_exit_critical</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rt_scheduler_lock_nest <span class="token operator">--</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>即，將 <code>rt_scheduler_lock_nest</code> 減一</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>rt_scheduler_lock_nest <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rt_scheduler_lock_nest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 <code>rt_scheduler_lock_nest</code> 被減至 0 或以下，進行一次調度</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>rt_critical_level</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>回傳 scheuler 鎖的值</td><td>scheuler 鎖的值</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Get the scheduler lock level * * @return the level of the scheduler lock. 0 means unlocked. */</span>rt_uint16_t <span class="token function">rt_critical_level</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> rt_scheduler_lock_nest<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_critical_level<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>即，回傳 <code>rt_scheduler_lock_nest</code> 值</li></ul><hr><h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><blockquote><p>File: ipc.c</p></blockquote><ul><li>為一個值，代表同時可用的個數</li><li>不等於 0 時可用，取用時將值減 1</li><li>當不可用時，將 thread 掛在等待的鏈上</li></ul><h3 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_SEMAPHORE</span><span class="token comment" spellcheck="true">/** * Semaphore structure */</span><span class="token keyword">struct</span> rt_semaphore<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_ipc_object parent<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; inherit from ipc_object */</span>    rt_uint16_t          value<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">/**&lt; value of semaphore. */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rt_semaphore <span class="token operator">*</span>rt_sem_t<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="建立-semaphore"><a href="#建立-semaphore" class="headerlink" title="建立 semaphore"></a>建立 semaphore</h3><h4 id="動態記憶體管理"><a href="#動態記憶體管理" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_sem_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 semaphore</td><td>semaphore</td></tr></tbody></table><table><thead><tr><th><code>*name</code></th><th><code>value</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>名字</td><td>semaphore 值，即最大可同時使用人數</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will create a semaphore from system resource * * @param name the name of semaphore * @param value the init value of semaphore * @param flag the flag of semaphore * * @return the created semaphore, RT_NULL on error happen * * @see rt_sem_init */</span>rt_sem_t <span class="token function">rt_sem_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> rt_uint32_t value<span class="token punctuation">,</span> rt_uint8_t flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_sem_t sem<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate object */</span>    sem <span class="token operator">=</span> <span class="token punctuation">(</span>rt_sem_t<span class="token punctuation">)</span><span class="token function">rt_object_allocate</span><span class="token punctuation">(</span>RT_Object_Class_Semaphore<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sem <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> sem<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set init value */</span>    sem<span class="token operator">-></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent */</span>    sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token keyword">return</span> sem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_sem_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先需要一塊 semaphore 的大小，初始化 ipc 物件，再依序寫入初始值及 flag</li></ul><hr><h4 id="靜態記憶體管理"><a href="#靜態記憶體管理" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_sem_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 semaphore</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>sem</code></th><th><code>*name</code></th><th><code>value</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>semaphore 本體</td><td>名字</td><td>semaphore 值，即最大可同時使用人數</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will initialize a semaphore and put it under control of * resource management. * * @param sem the semaphore object * @param name the name of semaphore * @param value the init value of semaphore * @param flag the flag of semaphore * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_sem_init</span><span class="token punctuation">(</span>rt_sem_t    sem<span class="token punctuation">,</span>                     <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>                     rt_uint32_t value<span class="token punctuation">,</span>                     rt_uint8_t  flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>sem <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_Object_Class_Semaphore<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set init value */</span>    sem<span class="token operator">-></span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent */</span>    sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_sem_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>由於使用靜態記憶體，這裡就不需要再 allocate。</li></ul><hr><h3 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * IPC flags and control command definitions */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_IPC_FLAG_FIFO                0x00            </span><span class="token comment" spellcheck="true">/**&lt; FIFOed IPC. @ref IPC. */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_IPC_FLAG_PRIO                0x01            </span><span class="token comment" spellcheck="true">/**&lt; PRIOed IPC. @ref IPC. */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_IPC_CMD_UNKNOWN              0x00            </span><span class="token comment" spellcheck="true">/**&lt; unknown IPC command */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_IPC_CMD_RESET                0x01            </span><span class="token comment" spellcheck="true">/**&lt; reset IPC object */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_WAITING_FOREVER              -1              </span><span class="token comment" spellcheck="true">/**&lt; Block forever until get resource. */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_WAITING_NO                   0               </span><span class="token comment" spellcheck="true">/**&lt; Non-block. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="刪除-semaphore"><a href="#刪除-semaphore" class="headerlink" title="刪除 semaphore"></a>刪除 semaphore</h3><h4 id="動態記憶體管理-1"><a href="#動態記憶體管理-1" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_sem_delete</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 semaphore</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>sem</code></th></tr></thead><tbody><tr><td>欲刪除的 semaphore</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will delete a semaphore object and release the memory * * @param sem the semaphore object * * @return the error code * * @see rt_sem_detach */</span>rt_err_t <span class="token function">rt_sem_delete</span><span class="token punctuation">(</span>rt_sem_t sem<span class="token punctuation">)</span><span class="token punctuation">{</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>sem <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Semaphore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* wakeup all suspend threads */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* delete semaphore object */</span>    <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_sem_delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先需把所有正在等待此 semaphore 的 thread 叫醒</li><li>接著呼叫 <code>rt_object_delete</code> 清除此物件（semaphore）</li></ul><hr><h4 id="靜態記憶體管理-1"><a href="#靜態記憶體管理-1" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_sem_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 semaphore</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>sem</code></th></tr></thead><tbody><tr><td>欲刪除的 semaphore</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will detach a semaphore from resource management * * @param sem the semaphore object * * @return the operation status, RT_EOK on successful * * @see rt_sem_delete */</span>rt_err_t <span class="token function">rt_sem_detach</span><span class="token punctuation">(</span>rt_sem_t sem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>sem <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Semaphore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* wakeup all suspend threads */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* detach semaphore object */</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_sem_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡則透過 <code>rt_object_detach</code> 清除</li></ul><hr><h3 id="使用-semaphore"><a href="#使用-semaphore" class="headerlink" title="使用 semaphore"></a>使用 semaphore</h3><ul><li>呼叫 <code>rt_sem_take</code> 來取得 semaphore，傳入的 time 是等待時間</li></ul><p><i class="fa fa-code"></i> Code: <code>rt_sem_take</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求 semaphore</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>sem</code></th><th><code>time</code></th></tr></thead><tbody><tr><td>欲要求的 semaphore</td><td>等待時間（如果需要）</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will take a semaphore, if the semaphore is unavailable, the * thread shall wait for a specified time. * * @param sem the semaphore object * @param time the waiting time * * @return the error code */</span>rt_err_t <span class="token function">rt_sem_take</span><span class="token punctuation">(</span>rt_sem_t sem<span class="token punctuation">,</span> rt_int32_t time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>sem <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Semaphore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_trytake_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>由於待會會修改 semaphore 的值，這裡先將中斷關閉</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"thread %s take sem:%s, which value is: %d\n"</span><span class="token punctuation">,</span>                                <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_object <span class="token operator">*</span><span class="token punctuation">)</span>sem<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span>                                sem<span class="token operator">-></span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sem<span class="token operator">-></span>value <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* semaphore is available */</span>        sem<span class="token operator">-></span>value <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如過 <code>sem-&gt;value</code> 值大於 0 代表可用，接著減一，並開啟中斷</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* no waiting, return with timeout */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 semaphore 不可用時：</li><li>且 time 為 0，表示不等待，直接開啟中斷並 return</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* current context checking */</span>            RT_DEBUG_IN_THREAD_CONTEXT<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* semaphore is unavailable, push to suspend list */</span>            <span class="token comment" spellcheck="true">/* get current thread */</span>            thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* reset thread error number */</span>            thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"sem take: suspend thread - %s\n"</span><span class="token punctuation">,</span>                                        thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* suspend thread */</span>            <span class="token function">rt_ipc_list_suspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">,</span>                                thread<span class="token punctuation">,</span>                                sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果要等待，則將 thread 插入 suspend list</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* has waiting time, start thread timer */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"set thread:%s to timer list\n"</span><span class="token punctuation">,</span>                                            thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* reset the timeout of thread timer and start it */</span>                <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                                 RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span>                                 <span class="token operator">&amp;</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>且如果等待時間大於 0，則啟動一個 timeout 為 time 的 timer</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* enable interrupt */</span>            <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* do schedule */</span>            <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> thread<span class="token operator">-></span>error<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_take_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_sem_take<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後開啟中斷，做一次調度</li></ul><hr><ul><li>若是不想等待，可以呼叫 <code>rt_sem_trytake</code></li><li>即呼叫 <code>rt_sem_take</code> 及傳入 <code>time</code> 為 0</li></ul><p><i class="fa fa-code"></i> Code: <code>rt_sem_trytake</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求 semaphore（不等待）</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>sem</code></th></tr></thead><tbody><tr><td>欲要求的 semaphore</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will try to take a semaphore and immediately return * * @param sem the semaphore object * * @return the error code */</span>rt_err_t <span class="token function">rt_sem_trytake</span><span class="token punctuation">(</span>rt_sem_t sem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">rt_sem_take</span><span class="token punctuation">(</span>sem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_sem_trytake<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>還 semaphore 則使用 <code>rt_sem_release</code></li></ul><p><i class="fa fa-code"></i> Code: <code>rt_sem_release</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放 semaphore</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>sem</code></th></tr></thead><tbody><tr><td>欲要求的 semaphore</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will release a semaphore, if there are threads suspended on * semaphore, it will be waked up. * * @param sem the semaphore object * * @return the error code */</span>rt_err_t <span class="token function">rt_sem_release</span><span class="token punctuation">(</span>rt_sem_t sem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_bool_t need_schedule<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>sem <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Semaphore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_put_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    need_schedule <span class="token operator">=</span> RT_FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先將待會會遇到的 flag（<code>need_schedule</code>）設為 false</li><li>因為待會也會修改 semaphore 的值，這裡需要關閉中斷</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"thread %s releases sem:%s, which value is: %d\n"</span><span class="token punctuation">,</span>                                <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_object <span class="token operator">*</span><span class="token punctuation">)</span>sem<span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span>                                sem<span class="token operator">-></span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* resume the suspended thread */</span>        <span class="token function">rt_ipc_list_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>sem<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        need_schedule <span class="token operator">=</span> RT_TRUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有人在等此 semaphore，先恢復他，並修改 <code>need_schedule</code> 為 true</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">else</span>        sem<span class="token operator">-></span>value <span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* increase value */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果沒有人在等待，則加一</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume a thread, re-schedule */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>need_schedule <span class="token operator">==</span> RT_TRUE<span class="token punctuation">)</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_sem_release<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後開啟中斷，並根據 <code>need_schedule</code> 來決定需不需要執行一次調度</li></ul><hr><h2 id="互斥鎖（mutex）"><a href="#互斥鎖（mutex）" class="headerlink" title="互斥鎖（mutex）"></a>互斥鎖（mutex）</h2><ul><li>即一種值為 1 的特殊 semaphore，特別的是具有防止優先級翻轉的特性</li></ul><h3 id="結構-1"><a href="#結構-1" class="headerlink" title="結構"></a>結構</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MUTEX</span><span class="token comment" spellcheck="true">/** * Mutual exclusion (mutex) structure */</span><span class="token keyword">struct</span> rt_mutex<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_ipc_object parent<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; inherit from ipc_object */</span>    rt_uint16_t          value<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">/**&lt; value of mutex */</span>    rt_uint8_t           original_priority<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/**&lt; priority of last thread hold the mutex */</span>    rt_uint8_t           hold<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">/**&lt; numbers of thread hold the mutex */</span>    <span class="token keyword">struct</span> rt_thread    <span class="token operator">*</span>owner<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">/**&lt; current owner of mutex */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rt_mutex <span class="token operator">*</span>rt_mutex_t<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>為了防止優先權翻轉，在持有鎖的過程中可能會被提升優先權，在結構中就需要紀錄原本的優先級。</li></ul><hr><h3 id="建立-mutex"><a href="#建立-mutex" class="headerlink" title="建立 mutex"></a>建立 mutex</h3><h4 id="動態記憶體管理-2"><a href="#動態記憶體管理-2" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mutex_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 mutex</td><td>mutex</td></tr></tbody></table><table><thead><tr><th><code>*name</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>名字</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will create a mutex from system resource * * @param name the name of mutex * @param flag the flag of mutex * * @return the created mutex, RT_NULL on error happen * * @see rt_mutex_init */</span>rt_mutex_t <span class="token function">rt_mutex_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> rt_uint8_t flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_mutex <span class="token operator">*</span>mutex<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate object */</span>    mutex <span class="token operator">=</span> <span class="token punctuation">(</span>rt_mutex_t<span class="token punctuation">)</span><span class="token function">rt_object_allocate</span><span class="token punctuation">(</span>RT_Object_Class_Mutex<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mutex <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> mutex<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先 allocate 一個物件，初始化</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mutex<span class="token operator">-></span>value              <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    mutex<span class="token operator">-></span>owner              <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    mutex<span class="token operator">-></span>original_priority  <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>    mutex<span class="token operator">-></span>hold               <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>value 設為 1，擁有者為 NULL，原始權限最低（255），持有次數為 0</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set flag */</span>    mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token keyword">return</span> mutex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mutex_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同時填入 flag</li></ul><hr><h4 id="靜態記憶體管理-2"><a href="#靜態記憶體管理-2" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mutex_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 mutex</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mutex</code></th><th><code>*name</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>mutex 本體</td><td>名字</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will initialize a mutex and put it under control of resource * management. * * @param mutex the mutex object * @param name the name of mutex * @param flag the flag of mutex * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_mutex_init</span><span class="token punctuation">(</span>rt_mutex_t mutex<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> rt_uint8_t flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mutex <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_Object_Class_Mutex<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mutex<span class="token operator">-></span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    mutex<span class="token operator">-></span>owner <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    mutex<span class="token operator">-></span>original_priority <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>    mutex<span class="token operator">-></span>hold  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set flag */</span>    mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mutex_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡不需要 allocate，只需要初始化物件</li></ul><hr><h3 id="刪除-mutex"><a href="#刪除-mutex" class="headerlink" title="刪除 mutex"></a>刪除 mutex</h3><h4 id="動態記憶體管理-3"><a href="#動態記憶體管理-3" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mutex_delete</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 mutex</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mutex</code></th></tr></thead><tbody><tr><td>欲刪除的 mutex</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will delete a mutex object and release the memory * * @param mutex the mutex object * * @return the error code * * @see rt_mutex_detach */</span>rt_err_t <span class="token function">rt_mutex_delete</span><span class="token punctuation">(</span>rt_mutex_t mutex<span class="token punctuation">)</span><span class="token punctuation">{</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mutex <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* wakeup all suspend threads */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* delete semaphore object */</span>    <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mutex_delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>與 semaphore 類似，先將正在等待此鎖的所有 thread 叫醒，接著透過 <code>rt_object_delete</code> 刪除 mutex</li></ul><hr><h4 id="靜態記憶體管理-3"><a href="#靜態記憶體管理-3" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mutex_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 mutex</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mutex</code></th></tr></thead><tbody><tr><td>欲刪除的 mutex</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will detach a mutex from resource management * * @param mutex the mutex object * * @return the operation status, RT_EOK on successful * * @see rt_mutex_delete */</span>rt_err_t <span class="token function">rt_mutex_detach</span><span class="token punctuation">(</span>rt_mutex_t mutex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mutex <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* wakeup all suspend threads */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* detach semaphore object */</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mutex_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡則運用 <code>rt_object_detach</code> 刪除</li></ul><hr><h3 id="使用-mutex"><a href="#使用-mutex" class="headerlink" title="使用 mutex"></a>使用 mutex</h3><ul><li>呼叫 <code>rt_mutex_take</code> 來取得鎖</li></ul><p><i class="fa fa-code"></i> Code: <code>rt_mutex_take</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求 mutex</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mutex</code></th><th><code>time</code></th></tr></thead><tbody><tr><td>欲要求的 mutex</td><td>等待時間（如果需要）</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will take a mutex, if the mutex is unavailable, the * thread shall wait for a specified time. * * @param mutex the mutex object * @param time the waiting time * * @return the error code */</span>rt_err_t <span class="token function">rt_mutex_take</span><span class="token punctuation">(</span>rt_mutex_t mutex<span class="token punctuation">,</span> rt_int32_t time<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* this function must not be used in interrupt even if time = 0 */</span>    RT_DEBUG_IN_THREAD_CONTEXT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mutex <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下面將會修改 mutex 的一些資料，這裡先將中斷關閉</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_trytake_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token string">"mutex_take: current thread %s, mutex value: %d, hold: %d\n"</span><span class="token punctuation">,</span>                  thread<span class="token operator">-></span>name<span class="token punctuation">,</span> mutex<span class="token operator">-></span>value<span class="token punctuation">,</span> mutex<span class="token operator">-></span>hold<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reset thread error */</span>    thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mutex<span class="token operator">-></span>owner <span class="token operator">==</span> thread<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* it's the same thread */</span>        mutex<span class="token operator">-></span>hold <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若此 mutex 的擁有者與要求著相同，持有數加 1</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">else</span>    <span class="token punctuation">{</span>__again<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">/* The value of mutex is 1 in initial status. Therefore, if the         * value is great than 0, it indicates the mutex is avaible.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mutex<span class="token operator">-></span>value <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* mutex is available */</span>            mutex<span class="token operator">-></span>value <span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* set mutex owner and original priority */</span>            mutex<span class="token operator">-></span>owner             <span class="token operator">=</span> thread<span class="token punctuation">;</span>            mutex<span class="token operator">-></span>original_priority <span class="token operator">=</span> thread<span class="token operator">-></span>current_priority<span class="token punctuation">;</span>            mutex<span class="token operator">-></span>hold <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不同，且 mutex 可用，先將 value –</li><li>設定所有者，紀錄當前權限，持有數加 1</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* no waiting, return with timeout */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* set error as timeout */</span>                thread<span class="token operator">-></span>error <span class="token operator">=</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* enable interrupt */</span>                <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不可用，且不等待，則啟用中斷，<code>return -RT_ETIMEOUT</code></li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* mutex is unavailable, push to suspend list */</span>                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"mutex_take: suspend thread: %s\n"</span><span class="token punctuation">,</span>                                            thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* change the owner thread priority of mutex */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>current_priority <span class="token operator">&lt;</span> mutex<span class="token operator">-></span>owner<span class="token operator">-></span>current_priority<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* change the owner thread priority */</span>                    <span class="token function">rt_thread_control</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>owner<span class="token punctuation">,</span>                                      RT_THREAD_CTRL_CHANGE_PRIORITY<span class="token punctuation">,</span>                                      <span class="token operator">&amp;</span>thread<span class="token operator">-></span>current_priority<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若需要等待：</li><li>為了避免優先權翻轉的情形發生，如需等待的 thread 的優先級大於持有 mutex 的優先級，提升持有者的</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* suspend current thread */</span>                <span class="token function">rt_ipc_list_suspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">,</span>                                    thread<span class="token punctuation">,</span>                                    mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* has waiting time, start thread timer */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span>                                 <span class="token punctuation">(</span><span class="token string">"mutex_take: start the timer of thread:%s\n"</span><span class="token punctuation">,</span>                                  thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* reset the timeout of thread timer and start it */</span>                    <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                                     RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span>                                     <span class="token operator">&amp;</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>插入 suspend list，並啟動一個 timeout 為 time 的 timer</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* enable interrupt */</span>                <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* do schedule */</span>                <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>開啟中斷，並做一次調度</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* interrupt by signal, try it again */</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">==</span> <span class="token operator">-</span>RT_EINTR<span class="token punctuation">)</span> <span class="token keyword">goto</span> __again<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* return error */</span>                    <span class="token keyword">return</span> thread<span class="token operator">-></span>error<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果因為中斷再次回到此 thread，重新要一次 mutex</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* the mutex is taken successfully. */</span>                    <span class="token comment" spellcheck="true">/* disable interrupt */</span>                    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_take_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mutex_take<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>還鎖則使用 <code>rt_mutex_release</code></li></ul><p><i class="fa fa-code"></i> Code: <code>rt_mutex_release</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放 mutex</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mutex</code></th></tr></thead><tbody><tr><td>欲釋放的 mutex</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will release a mutex, if there are threads suspended on mutex, * it will be waked up. * * @param mutex the mutex object * * @return the error code */</span>rt_err_t <span class="token function">rt_mutex_release</span><span class="token punctuation">(</span>rt_mutex_t mutex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    rt_bool_t need_schedule<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mutex <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    need_schedule <span class="token operator">=</span> RT_FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* only thread could release mutex because we need test the ownership */</span>    RT_DEBUG_IN_THREAD_CONTEXT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下面將會修改 mutex 的一些資料，這裡先將中斷關閉</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token string">"mutex_release:current thread %s, mutex value: %d, hold: %d\n"</span><span class="token punctuation">,</span>                  thread<span class="token operator">-></span>name<span class="token punctuation">,</span> mutex<span class="token operator">-></span>value<span class="token punctuation">,</span> mutex<span class="token operator">-></span>hold<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_put_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* mutex only can be released by owner */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">!=</span> mutex<span class="token operator">-></span>owner<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>檢查歸還者是否為擁有者</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* decrease hold */</span>    mutex<span class="token operator">-></span>hold <span class="token operator">--</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>持有數減 1</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* if no hold */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mutex<span class="token operator">-></span>hold <span class="token operator">==</span> 才會    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* change the owner thread to original priority */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mutex<span class="token operator">-></span>original_priority <span class="token operator">!=</span> mutex<span class="token operator">-></span>owner<span class="token operator">-></span>current_priority<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_thread_control</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>owner<span class="token punctuation">,</span>                              RT_THREAD_CTRL_CHANGE_PRIORITY<span class="token punctuation">,</span>                              <span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>original_priority<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若已不再擁有此 mutex，且優先權有被更改過，調整回來</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* wakeup suspended thread */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get suspended thread */</span>            thread <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">.</span>next<span class="token punctuation">,</span>                                   <span class="token keyword">struct</span> rt_thread<span class="token punctuation">,</span>                                   tlist<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"mutex_release: resume thread: %s\n"</span><span class="token punctuation">,</span>                                        thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* set new owner and priority */</span>            mutex<span class="token operator">-></span>owner             <span class="token operator">=</span> thread<span class="token punctuation">;</span>            mutex<span class="token operator">-></span>original_priority <span class="token operator">=</span> thread<span class="token operator">-></span>current_priority<span class="token punctuation">;</span>            mutex<span class="token operator">-></span>hold <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* resume thread */</span>            <span class="token function">rt_ipc_list_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mutex<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            need_schedule <span class="token operator">=</span> RT_TRUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若有人在等待此 mutex，將 mutex 傳遞給第一個正在等待的 thread</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* increase value */</span>            mutex<span class="token operator">-></span>value <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* clear owner */</span>            mutex<span class="token operator">-></span>owner             <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>            mutex<span class="token operator">-></span>original_priority <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果沒有人在等，value 加 1，將資料初始化</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* perform a schedule */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>need_schedule <span class="token operator">==</span> RT_TRUE<span class="token punctuation">)</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mutex_release<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>開啟中斷，並視情況做一次調度</li></ul><hr><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>可實現一對多，多對多</li><li>僅用來同步，無傳輸的功能</li></ul><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><ul><li>thread 的結構中有一個 32 位的事件標記，一個事件的資訊</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">if</span> defined(RT_USING_EVENT)</span>    <span class="token comment" spellcheck="true">/* thread event */</span>    rt_uint32_t event_set<span class="token punctuation">;</span>    rt_uint8_t  event_info<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>標記的每一位代表一個事件，資訊包含 AND、OR 及 CLEAR</li><li>當事件標記的第 2、4 位為 1，其餘為 0，代表此 thread 設置第 2、4 個事件<ul><li>AND：即需同時接收到 2 號與 4 號事件才會被喚醒</li><li>OR：只需接收到一個</li><li>CLEAR：表示接收完事件喚醒後，是否須將標記清除</li></ul></li></ul><h3 id="結構-2"><a href="#結構-2" class="headerlink" title="結構"></a>結構</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_EVENT</span><span class="token comment" spellcheck="true">/** * flag defintions in event */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_EVENT_FLAG_AND               0x01            </span><span class="token comment" spellcheck="true">/**&lt; logic and */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_EVENT_FLAG_OR                0x02            </span><span class="token comment" spellcheck="true">/**&lt; logic or */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_EVENT_FLAG_CLEAR             0x04            </span><span class="token comment" spellcheck="true">/**&lt; clear flag */</span><span class="token comment" spellcheck="true">/* * event structure */</span><span class="token keyword">struct</span> rt_event<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_ipc_object parent<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; inherit from ipc_object */</span>    rt_uint32_t          set<span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">/**&lt; event set */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rt_event <span class="token operator">*</span>rt_event_t<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="建立事件"><a href="#建立事件" class="headerlink" title="建立事件"></a>建立事件</h3><h4 id="動態記憶體管理-4"><a href="#動態記憶體管理-4" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_event_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立事件</td><td>事件</td></tr></tbody></table><table><thead><tr><th><code>*name</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>名字</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will create an event object from system resource * * @param name the name of event * @param flag the flag of event * * @return the created event, RT_NULL on error happen */</span>rt_event_t <span class="token function">rt_event_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> rt_uint8_t flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_event_t event<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate object */</span>    event <span class="token operator">=</span> <span class="token punctuation">(</span>rt_event_t<span class="token punctuation">)</span><span class="token function">rt_object_allocate</span><span class="token punctuation">(</span>RT_Object_Class_Event<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> event<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent */</span>    event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init event */</span>    event<span class="token operator">-></span>set <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> event<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_event_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一樣 allocate 記憶體，填入 flag，初始化，最後設定值為 0</li></ul><hr><h4 id="靜態記憶體管理-4"><a href="#靜態記憶體管理-4" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_event_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化事件</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>event</code></th><th><code>*name</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>事件本體</td><td>名字</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will initialize an event and put it under control of resource * management. * * @param event the event object * @param name the name of event * @param flag the flag of event * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_event_init</span><span class="token punctuation">(</span>rt_event_t event<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> rt_uint8_t flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>event <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_Object_Class_Event<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent flag */</span>    event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init event */</span>    event<span class="token operator">-></span>set <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_event_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡則不需要 allocate</li></ul><hr><h3 id="刪除事件"><a href="#刪除事件" class="headerlink" title="刪除事件"></a>刪除事件</h3><h4 id="靜態記憶體管理-5"><a href="#靜態記憶體管理-5" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_event_delete</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除事件</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>event</code></th></tr></thead><tbody><tr><td>欲刪除的事件</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will delete an event object and release the memory * * @param event the event object * * @return the error code */</span>rt_err_t <span class="token function">rt_event_delete</span><span class="token punctuation">(</span>rt_event_t event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>event <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume all suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* delete event object */</span>    <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_event_delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>相同的，需要先將正在等待此事件的 thread 叫醒，再刪除</li></ul><hr><h4 id="靜態記憶體管理-6"><a href="#靜態記憶體管理-6" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_event_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除事件</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>event</code></th></tr></thead><tbody><tr><td>欲刪除的事件</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will detach an event object from resource management * * @param event the event object * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_event_detach</span><span class="token punctuation">(</span>rt_event_t event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>event <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume all suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* detach event object */</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_event_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡則用 <code>rt_object_detach</code></li></ul><hr><h3 id="傳遞事件"><a href="#傳遞事件" class="headerlink" title="傳遞事件"></a>傳遞事件</h3><p><i class="fa fa-code"></i> Code: <code>rt_event_send</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>傳遞事件</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>event</code></th><th><code>set</code></th></tr></thead><tbody><tr><td>欲傳遞的事件</td><td>事件編號</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will send an event to the event object, if there are threads * suspended on event object, it will be waked up. * * @param event the event object * @param set the event set * * @return the error code */</span>rt_err_t <span class="token function">rt_event_send</span><span class="token punctuation">(</span>rt_event_t event<span class="token punctuation">,</span> rt_uint32_t set<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_list_node <span class="token operator">*</span>n<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t level<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t status<span class="token punctuation">;</span>    rt_bool_t need_schedule<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>event <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>set <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>    need_schedule <span class="token operator">=</span> RT_FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下面會修改事件的資料，這裡先將中斷關閉</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set event */</span>    event<span class="token operator">-></span>set <span class="token operator">|</span><span class="token operator">=</span> set<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>設定事件編號</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_put_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* search thread list to resume thread */</span>        n <span class="token operator">=</span> event<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get thread */</span>            thread <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token keyword">struct</span> rt_thread<span class="token punctuation">,</span> tlist<span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>event_info <span class="token operator">&amp;</span> RT_EVENT_FLAG_AND<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>event_set <span class="token operator">&amp;</span> event<span class="token operator">-></span>set<span class="token punctuation">)</span> <span class="token operator">==</span> thread<span class="token operator">-></span>event_set<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* received an AND event */</span>                    status <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有人在等待此事件，且滿足條件時，設定為 OK</li><li>這裡為 AND，即事件編號應與 thread 所設定的一致</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>event_info <span class="token operator">&amp;</span> RT_EVENT_FLAG_OR<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>event_set <span class="token operator">&amp;</span> event<span class="token operator">-></span>set<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/* save recieved event set */</span>                    thread<span class="token operator">-></span>event_set <span class="token operator">=</span> thread<span class="token operator">-></span>event_set <span class="token operator">&amp;</span> event<span class="token operator">-></span>set<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* received an OR event */</span>                    status <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若為 OR，則只需有一位相同即可</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* move node to the next */</span>            n <span class="token operator">=</span> n<span class="token operator">-></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>接著走向下一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* condition is satisfied, resume thread */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> RT_EOK<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* clear event */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>event_info <span class="token operator">&amp;</span> RT_EVENT_FLAG_CLEAR<span class="token punctuation">)</span>                    event<span class="token operator">-></span>set <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>thread<span class="token operator">-></span>event_set<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如有人滿足條件，且被設定 CLEAR，清除其標記位</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* resume thread, and thread list breaks out */</span>                <span class="token function">rt_thread_resume</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* need do a scheduling */</span>                need_schedule <span class="token operator">=</span> RT_TRUE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>並恢復此 thread，設定待會需要調度</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* do a schedule */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>need_schedule <span class="token operator">==</span> RT_TRUE<span class="token punctuation">)</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_event_send<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後開啟中斷，視情況做一次調度</li></ul><hr><h3 id="接收事件"><a href="#接收事件" class="headerlink" title="接收事件"></a>接收事件</h3><p><i class="fa fa-code"></i> Code: <code>rt_event_recv</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>接收事件</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>event</code></th><th><code>set</code></th><th><code>option</code></th><th><code>timeout</code></th><th><code>*recved</code></th></tr></thead><tbody><tr><td>欲接收的事件</td><td>事件編號</td><td>AND /OR</td><td>等待時間（如果需要）</td><td>傳遞成功的事件號碼</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will receive an event from event object, if the event is * unavailable, the thread shall wait for a specified time. * * @param event the fast event object * @param set the interested event set * @param option the receive option, either RT_EVENT_FLAG_AND or *        RT_EVENT_FLAG_OR should be set. * @param timeout the waiting time * @param recved the received event, if you don't care, RT_NULL can be set. * * @return the error code */</span>rt_err_t <span class="token function">rt_event_recv</span><span class="token punctuation">(</span>rt_event_t   event<span class="token punctuation">,</span>                       rt_uint32_t  set<span class="token punctuation">,</span>                       rt_uint8_t   option<span class="token punctuation">,</span>                       rt_int32_t   timeout<span class="token punctuation">,</span>                       rt_uint32_t <span class="token operator">*</span>recved<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t level<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t status<span class="token punctuation">;</span>    RT_DEBUG_IN_THREAD_CONTEXT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>event <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>set <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init status */</span>    status <span class="token operator">=</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reset thread error */</span>    thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_trytake_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下面會修改事件的資料，這裡先將中斷關閉</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* check event set */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>option <span class="token operator">&amp;</span> RT_EVENT_FLAG_AND<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token operator">-></span>set <span class="token operator">&amp;</span> set<span class="token punctuation">)</span> <span class="token operator">==</span> set<span class="token punctuation">)</span>            status <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>option <span class="token operator">&amp;</span> RT_EVENT_FLAG_OR<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token operator">-></span>set <span class="token operator">&amp;</span> set<span class="token punctuation">)</span>            status <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* either RT_EVENT_FLAG_AND or RT_EVENT_FLAG_OR should be set */</span>        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果滿足條件，表示已接收到事件，設定為 OK</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> RT_EOK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* set received event */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>recved<span class="token punctuation">)</span>            <span class="token operator">*</span>recved <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">-></span>set <span class="token operator">&amp;</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* received event */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>option <span class="token operator">&amp;</span> RT_EVENT_FLAG_CLEAR<span class="token punctuation">)</span>            event<span class="token operator">-></span>set <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>set<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果已接收到事件，設定 recved 參數</li><li>視情況看需不需要清除標記</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* no waiting */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若需等待事件，但 timeout 為 0</li><li>即不等待，將錯誤碼設為 TIMEOUT</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* fill thread event info */</span>        thread<span class="token operator">-></span>event_set  <span class="token operator">=</span> set<span class="token punctuation">;</span>        thread<span class="token operator">-></span>event_info <span class="token operator">=</span> option<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如欲等待，將資訊掛在 thread 的結構上</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* put thread to suspended thread list */</span>        <span class="token function">rt_ipc_list_suspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">,</span>                            thread<span class="token punctuation">,</span>                            event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>並插入等待的鏈上</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* if there is a waiting timeout, active thread timer */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* reset the timeout of thread timer and start it */</span>            <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                             RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span>                             <span class="token operator">&amp;</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>啟動一個 timer</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* do a schedule */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後開啟中斷，並做一次調度</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* return error */</span>            <span class="token keyword">return</span> thread<span class="token operator">-></span>error<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* received an event, disable interrupt to protect */</span>        level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* set received event */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>recved<span class="token punctuation">)</span>            <span class="token operator">*</span>recved <span class="token operator">=</span> thread<span class="token operator">-></span>event_set<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_take_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> thread<span class="token operator">-></span>error<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_event_recv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最終接收到事件，一樣設定 recved 參數，回傳錯誤碼</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> semaphore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread Clock</title>
      <link href="/rt-clock/"/>
      <url>/rt-clock/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: clock.c</p></blockquote><h2 id="取得當前-tick"><a href="#取得當前-tick" class="headerlink" title="取得當前 tick"></a>取得當前 tick</h2><blockquote><p>即回傳全域變數 <code>rt_tick</code> 值</p></blockquote><p><i class="fa fa-code"></i> Code: <code>rt_tick_get</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>取得當前的 system tick</td><td>tick 值</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will return current tick from operating system startup * * @return current tick */</span>rt_tick_t <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* return the global tick */</span>    <span class="token keyword">return</span> rt_tick<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_tick_get<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="設定當前-tick"><a href="#設定當前-tick" class="headerlink" title="設定當前 tick"></a>設定當前 tick</h2><p><i class="fa fa-code"></i> Code: <code>rt_tick_set</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>修改 system tick</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>tick</code></th></tr></thead><tbody><tr><td>欲修改的結果</td></tr></tbody></table><ul><li>由於需要修改全域變數，因此這裡需要將中斷關閉進入 critical region</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will set current tick */</span><span class="token keyword">void</span> <span class="token function">rt_tick_set</span><span class="token punctuation">(</span>rt_tick_t tick<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_base_t level<span class="token punctuation">;</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rt_tick <span class="token operator">=</span> tick<span class="token punctuation">;</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="增加-tick"><a href="#增加-tick" class="headerlink" title="增加 tick"></a>增加 tick</h2><ul><li>增加 tick 是由 ISR 所執行的動作，因此修改 <code>rt_tick</code> 值不需進入 critical region</li><li>由於增加 tick 需要發出中斷，所以所有的 ISR 都不可以佔用太多時間（如果執行超過一個 tick 的時間，clock ISR 就無法在正確的時間發生中斷，時間就會不準）</li></ul><p><i class="fa fa-code"></i> Code: <code>rt_tick_increase</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>增加 tick（clock ISR）</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will notify kernel there is one tick passed. Normally, * this function is invoked by clock ISR. */</span><span class="token keyword">void</span> <span class="token function">rt_tick_increase</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* increase the global tick */</span>    <span class="token operator">++</span> rt_tick<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* check time slice */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">--</span> thread<span class="token operator">-></span>remaining_tick<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>remaining_tick <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* change to initialized tick */</span>        thread<span class="token operator">-></span>remaining_tick <span class="token operator">=</span> thread<span class="token operator">-></span>init_tick<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* yield */</span>        <span class="token function">rt_thread_yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* check timer */</span>    <span class="token function">rt_timer_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在增加 <code>rt_tick</code> 值的同時，也減少當前 thread 的剩餘 tick 值；當減至 0 時，重設剩餘 tick 並讓出處理器。</li><li>（rt_timer_check()）</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> clock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread Timer</title>
      <link href="/rt-thread-timer/"/>
      <url>/rt-thread-timer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: timer.c</p></blockquote><ul><li>timer 的作用：當時間到時，觸發一個事件；如文本的圖：<br><img src="https://i.imgur.com/6ois2av.png" alt=""></li><li>timer 的實作是一條鏈，即當前 tick 到達指定的 timer 時，會觸發該 timer 的 <code>timeout_func</code>，同時將該 timer 從鏈結移除</li><li>以上圖為例，當 <code>rt_tick</code> = 70 時，將會觸發 timer #1 的 <code>timeout_func</code>，並將 timer #1 移除</li></ul><hr><ul><li>而在新增一個 timer 時，會按照 timeout 的大小排列插入，如圖：<br><img src="https://i.imgur.com/yCkzoq0.png" alt=""></li><li>我們想要新增一個 timer #4，並希望在 300 個 tick 過後觸發事件，所以 timeout 設為 330（rt_tick + 300）</li><li>由於 timer 鏈需要由小到大排，所以將 timer #4 插在 #2 與 #3 之間</li></ul><hr><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * timer structure */</span><span class="token keyword">struct</span> rt_timer<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_object parent<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">/**&lt; inherit from rt_object */</span>    rt_list_t        row<span class="token punctuation">[</span>RT_TIMER_SKIP_LIST_LEVEL<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>timeout_func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/**&lt; timeout function */</span>    <span class="token keyword">void</span>            <span class="token operator">*</span>parameter<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">/**&lt; timeout function's parameter */</span>    rt_tick_t        init_tick<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">/**&lt; timer timeout tick */</span>    rt_tick_t        timeout_tick<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; timeout tick */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rt_timer <span class="token operator">*</span>rt_timer_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>timeout_func</code> 即為 timeout 時會觸發的函式</li><li><code>timeout_tick</code> = <code>init_tick</code> + 當前的 system tick</li></ul><hr><h2 id="初始化、建立-timer"><a href="#初始化、建立-timer" class="headerlink" title="初始化、建立 timer"></a>初始化、建立 timer</h2><ul><li>在建立一個 thread 時，<code>_rt_thread_init</code> 會呼叫 <code>rt_timer_init</code> 來初始化 timer</li></ul><h3 id="靜態記憶體管理"><a href="#靜態記憶體管理" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h3><p><i class="fa fa-code"></i> Code: <code>rt_timer_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 timer</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>timer</code></th><th><code>*name</code></th><th><code>*timeout</code></th><th><code>*parameter</code></th><th><code>time</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>timer 結構</td><td>名字</td><td>timeout function</td><td>func 的參數</td><td>timeout 初始 tick</td><td>狀態</td></tr></tbody></table><table><thead><tr><th><code>*parameter</code></th><th><code>time</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>func 的參數</td><td>timeout 初始 tick</td><td>狀態</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will initialize a timer, normally this function is used to * initialize a static timer object. * * @param timer the static timer object * @param name the name of timer * @param timeout the timeout function * @param parameter the parameter of timeout function * @param time the tick of timer * @param flag the flag of timer */</span><span class="token keyword">void</span> <span class="token function">rt_timer_init</span><span class="token punctuation">(</span>rt_timer_t  timer<span class="token punctuation">,</span>                   <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>                   <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token keyword">void</span>       <span class="token operator">*</span>parameter<span class="token punctuation">,</span>                   rt_tick_t   time<span class="token punctuation">,</span>                   rt_uint8_t  flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* timer check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>timer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* timer object initialization */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>timer<span class="token punctuation">,</span> RT_Object_Class_Timer<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_rt_timer_init</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> time<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_timer_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>與 thread 類似，使用 <code>_rt_timer_init</code> 完成初始化</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_rt_timer_init</span><span class="token punctuation">(</span>rt_timer_t timer<span class="token punctuation">,</span>                           <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token keyword">void</span>      <span class="token operator">*</span>parameter<span class="token punctuation">,</span>                           rt_tick_t  time<span class="token punctuation">,</span>                           rt_uint8_t flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set flag */</span>    timer<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag  <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set deactivated */</span>    timer<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RT_TIMER_FLAG_ACTIVATED<span class="token punctuation">;</span>    timer<span class="token operator">-></span>timeout_func <span class="token operator">=</span> timeout<span class="token punctuation">;</span>    timer<span class="token operator">-></span>parameter    <span class="token operator">=</span> parameter<span class="token punctuation">;</span>    timer<span class="token operator">-></span>timeout_tick <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>init_tick    <span class="token operator">=</span> time<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize timer list */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> RT_TIMER_SKIP_LIST_LEVEL<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>timer<span class="token operator">-></span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 flag 為 decativated，設定 timeout_func、tick、timerlist</li></ul><hr><h3 id="動態記憶體管理"><a href="#動態記憶體管理" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h3><p><i class="fa fa-code"></i> Code: <code>rt_timer_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 timer</td><td>timer</td></tr></tbody></table><table><thead><tr><th><code>*name</code></th><th><code>*timeout</code></th><th><code>*parameter</code></th><th><code>time</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>名字</td><td>timeout function</td><td>func 的參數</td><td>timeout 初始 tick</td><td>狀態</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will create a timer * * @param name the name of timer * @param timeout the timeout function * @param parameter the parameter of timeout function * @param time the tick of timer * @param flag the flag of timer * * @return the created timer object */</span>rt_timer_t <span class="token function">rt_timer_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>                           <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>timeout<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span>                           <span class="token keyword">void</span>       <span class="token operator">*</span>parameter<span class="token punctuation">,</span>                           rt_tick_t   time<span class="token punctuation">,</span>                           rt_uint8_t  flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_timer <span class="token operator">*</span>timer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate a object */</span>    timer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_timer <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">rt_object_allocate</span><span class="token punctuation">(</span>RT_Object_Class_Timer<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">_rt_timer_init</span><span class="token punctuation">(</span>timer<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> time<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> timer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_timer_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>同樣也是透過 <code>_rt_timer_init</code> 完成動作</li></ul><hr><h2 id="刪除-timer"><a href="#刪除-timer" class="headerlink" title="刪除 timer"></a>刪除 timer</h2><h3 id="動態記憶體管理-1"><a href="#動態記憶體管理-1" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h3><p><i class="fa fa-code"></i> Code: <code>rt_timer_delete</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 timer</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>timer</code></th></tr></thead><tbody><tr><td>欲刪除的 timer</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will delete a timer and release timer memory * * @param timer the timer to be deleted * * @return the operation status, RT_EOK on OK; RT_ERROR on error */</span>rt_err_t <span class="token function">rt_timer_delete</span><span class="token punctuation">(</span>rt_timer_t timer<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* timer check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>timer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_rt_timer_remove</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_timer_delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>透過 <code>_rt_timer_remove</code> 移除鏈結</li><li>透過 <code>rt_object_delete</code> 移除 timer</li></ul><hr><h3 id="靜態記憶體管理-1"><a href="#靜態記憶體管理-1" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h3><p><i class="fa fa-code"></i> Code: <code>rt_timer_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 timer</td><td>tick 值</td></tr></tbody></table><table><thead><tr><th><code>timer</code></th></tr></thead><tbody><tr><td>欲刪除的 timer</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will detach a timer from timer management. * * @param timer the static timer object * * @return the operation status, RT_EOK on OK; RT_ERROR on error */</span>rt_err_t <span class="token function">rt_timer_detach</span><span class="token punctuation">(</span>rt_timer_t timer<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* timer check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>timer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_rt_timer_remove</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>  <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_timer_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>透過 <code>_rt_timer_remove</code> 移除鏈結</li><li>透過 <code>rt_object_detach</code> 移除 timer</li></ul><hr><h2 id="啟動、停止-timer"><a href="#啟動、停止-timer" class="headerlink" title="啟動、停止 timer"></a>啟動、停止 timer</h2><h3 id="Code-rt-timer-start"><a href="#Code-rt-timer-start" class="headerlink" title="Code: rt_timer_start"></a>Code: rt_timer_start</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>啟動 timer</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>timer</code></th></tr></thead><tbody><tr><td>欲啟動的 timer</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will start the timer * * @param timer the timer to be started * * @return the operation status, RT_EOK on OK, -RT_ERROR on error */</span>rt_err_t <span class="token function">rt_timer_start</span><span class="token punctuation">(</span>rt_timer_t timer<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> row_lvl<span class="token punctuation">;</span>    rt_list_t <span class="token operator">*</span>timer_list<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    rt_list_t <span class="token operator">*</span>row_head<span class="token punctuation">[</span>RT_TIMER_SKIP_LIST_LEVEL<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tst_nr<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> random_nr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* timer check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>timer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* stop timer firstly */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* remove timer from list */</span>    <span class="token function">_rt_timer_remove</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* change status of timer */</span>    timer<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RT_TIMER_FLAG_ACTIVATED<span class="token punctuation">;</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果需要，先停止 timer </li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_take_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>timer<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * get timeout tick,     * the max timeout tick shall not great than RT_TICK_MAX/2     */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>timer<span class="token operator">-></span>init_tick <span class="token operator">&lt;</span> RT_TICK_MAX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    timer<span class="token operator">-></span>timeout_tick <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timer<span class="token operator">-></span>init_tick<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 timer 的 <code>timeout_tick</code></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_TIMER_SOFT</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">&amp;</span> RT_TIMER_FLAG_SOFT_TIMER<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* insert timer to soft timer list */</span>        timer_list <span class="token operator">=</span> rt_soft_timer_list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* insert timer to system timer list */</span>        timer_list <span class="token operator">=</span> rt_timer_list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    row_head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token operator">&amp;</span>timer_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>row_lvl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row_lvl <span class="token operator">&lt;</span> RT_TIMER_SKIP_LIST_LEVEL<span class="token punctuation">;</span> row_lvl<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> row_head<span class="token punctuation">[</span>row_lvl<span class="token punctuation">]</span> <span class="token operator">!=</span> timer_list<span class="token punctuation">[</span>row_lvl<span class="token punctuation">]</span><span class="token punctuation">.</span>prev<span class="token punctuation">;</span>             row_head<span class="token punctuation">[</span>row_lvl<span class="token punctuation">]</span>  <span class="token operator">=</span> row_head<span class="token punctuation">[</span>row_lvl<span class="token punctuation">]</span><span class="token operator">-></span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">struct</span> rt_timer <span class="token operator">*</span>t<span class="token punctuation">;</span>            rt_list_t <span class="token operator">*</span>p <span class="token operator">=</span> row_head<span class="token punctuation">[</span>row_lvl<span class="token punctuation">]</span><span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* fix up the entry pointer */</span>            t <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token keyword">struct</span> rt_timer<span class="token punctuation">,</span> row<span class="token punctuation">[</span>row_lvl<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* If we have two timers that timeout at the same time, it's             * preferred that the timer inserted early get called early.             * So insert the new timer to the end the the some-timeout timer             * list.             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token operator">-></span>timeout_tick <span class="token operator">-</span> timer<span class="token operator">-></span>timeout_tick<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token operator">-></span>timeout_tick <span class="token operator">-</span> timer<span class="token operator">-></span>timeout_tick<span class="token punctuation">)</span> <span class="token operator">&lt;</span> RT_TICK_MAX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row_lvl <span class="token operator">!=</span> RT_TIMER_SKIP_LIST_LEVEL <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            row_head<span class="token punctuation">[</span>row_lvl <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> row_head<span class="token punctuation">[</span>row_lvl<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>尋找 timer 正確的位置</li></ul><blockquote><p>如果有一樣的 timeout，將此 timer 插到最後</p></blockquote><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* Interestingly, this super simple timer insert counter works very very     * well on distributing the list height uniformly. By means of "very very     * well", I mean it beats the randomness of timer->timeout_tick very easily     * (actually, the timeout_tick is not random and easy to be attacked). */</span>    random_nr<span class="token operator">++</span><span class="token punctuation">;</span>    tst_nr <span class="token operator">=</span> random_nr<span class="token punctuation">;</span>    <span class="token function">rt_list_insert_after</span><span class="token punctuation">(</span>row_head<span class="token punctuation">[</span>RT_TIMER_SKIP_LIST_LEVEL <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                         <span class="token operator">&amp;</span><span class="token punctuation">(</span>timer<span class="token operator">-></span>row<span class="token punctuation">[</span>RT_TIMER_SKIP_LIST_LEVEL <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>row_lvl <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> row_lvl <span class="token operator">&lt;=</span> RT_TIMER_SKIP_LIST_LEVEL<span class="token punctuation">;</span> row_lvl<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>tst_nr <span class="token operator">&amp;</span> RT_TIMER_SKIP_LIST_MASK<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">rt_list_insert_after</span><span class="token punctuation">(</span>row_head<span class="token punctuation">[</span>RT_TIMER_SKIP_LIST_LEVEL <span class="token operator">-</span> row_lvl<span class="token punctuation">]</span><span class="token punctuation">,</span>                                 <span class="token operator">&amp;</span><span class="token punctuation">(</span>timer<span class="token operator">-></span>row<span class="token punctuation">[</span>RT_TIMER_SKIP_LIST_LEVEL <span class="token operator">-</span> row_lvl<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Shift over the bits we have tested. Works well with 1 bit and 2         * bits. */</span>        tst_nr <span class="token operator">>>=</span> <span class="token punctuation">(</span>RT_TIMER_SKIP_LIST_MASK <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    timer<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">|</span><span class="token operator">=</span> RT_TIMER_FLAG_ACTIVATED<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_TIMER_SOFT</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">&amp;</span> RT_TIMER_FLAG_SOFT_TIMER<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* check whether timer thread is ready */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timer_thread<span class="token punctuation">.</span>stat <span class="token operator">&amp;</span> RT_THREAD_STAT_MASK<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_THREAD_READY<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* resume timer thread to check soft timer */</span>            <span class="token function">rt_thread_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_timer_start<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著插入 timer 並啟動</li></ul><hr><h3 id="Code-rt-timer-stop"><a href="#Code-rt-timer-stop" class="headerlink" title="Code: rt_timer_stop"></a>Code: rt_timer_stop</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>停止 timer</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>timer</code></th></tr></thead><tbody><tr><td>欲刪除的 timer</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will stop the timer * * @param timer the timer to be stopped * * @return the operation status, RT_EOK on OK, -RT_ERROR on error */</span>rt_err_t <span class="token function">rt_timer_stop</span><span class="token punctuation">(</span>rt_timer_t timer<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* timer check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>timer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>timer<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">&amp;</span> RT_TIMER_FLAG_ACTIVATED<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_put_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>timer<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_rt_timer_remove</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* change stat */</span>    timer<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RT_TIMER_FLAG_ACTIVATED<span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_timer_stop<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先將 timer 從鏈結移出，再將 flag 設為 <code>RT_TIMER_FLAG_DEACTIVATED</code></li></ul><hr><h2 id="控制-timer"><a href="#控制-timer" class="headerlink" title="控制 timer"></a>控制 timer</h2><p><i class="fa fa-code"></i> Code: <code>rt_timer_control</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>控制 timer</td><td>tick 值</td></tr></tbody></table><table><thead><tr><th><code>timer</code></th><th><code>cmd</code></th><th><code>*arg</code></th></tr></thead><tbody><tr><td>欲控制的 timer</td><td>動作</td><td>根據前面動作的參數</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will get or set some options of the timer * * @param timer the timer to be get or set * @param cmd the control command * @param arg the argument * * @return RT_EOK */</span>rt_err_t <span class="token function">rt_timer_control</span><span class="token punctuation">(</span>rt_timer_t timer<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* timer check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>timer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>timer<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> RT_TIMER_CTRL_GET_TIME<span class="token punctuation">:</span>        <span class="token operator">*</span><span class="token punctuation">(</span>rt_tick_t <span class="token operator">*</span><span class="token punctuation">)</span>arg <span class="token operator">=</span> timer<span class="token operator">-></span>init_tick<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果需要尋找 timer 的值，將 <code>arg</code> 設為 <code>init_tick</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">case</span> RT_TIMER_CTRL_SET_TIME<span class="token punctuation">:</span>        timer<span class="token operator">-></span>init_tick <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>rt_tick_t <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果需要設定 tick，將 <code>init_tick</code> 設為 <code>arg</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">case</span> RT_TIMER_CTRL_SET_ONESHOT<span class="token punctuation">:</span>        timer<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RT_TIMER_FLAG_PERIODIC<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果要設定 timer 為一次性的，添加 <code>RT_TIMER_FLAG_ONE_SHOT</code> 的 flag（即為 <code>~RT_TIMER_FLAG_PERIODIC</code>）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">case</span> RT_TIMER_CTRL_SET_PERIODIC<span class="token punctuation">:</span>        timer<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">|</span><span class="token operator">=</span> RT_TIMER_FLAG_PERIODIC<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_timer_control<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果要設定 timer 為週期性的，添加 <code>RT_TIMER_FLAG_PERIODIC</code></li></ul><hr><h2 id="檢查-timer"><a href="#檢查-timer" class="headerlink" title="檢查 timer"></a>檢查 timer</h2><p><i class="fa fa-code"></i> Code: <code>rt_timer_check</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>檢查 timer list</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will check timer list, if a timeout event happens, the * corresponding timeout function will be invoked. * * @note this function shall be invoked in operating system timer interrupt. */</span><span class="token keyword">void</span> <span class="token function">rt_timer_check</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_timer <span class="token operator">*</span>t<span class="token punctuation">;</span>    rt_tick_t current_tick<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_TIMER<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"timer check enter\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    current_tick <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rt_timer_list<span class="token punctuation">[</span>RT_TIMER_SKIP_LIST_LEVEL <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>rt_timer_list<span class="token punctuation">[</span>RT_TIMER_SKIP_LIST_LEVEL <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">,</span>                          <span class="token keyword">struct</span> rt_timer<span class="token punctuation">,</span> row<span class="token punctuation">[</span>RT_TIMER_SKIP_LIST_LEVEL <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * It supposes that the new tick shall less than the half duration of         * tick max.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>current_tick <span class="token operator">-</span> t<span class="token operator">-></span>timeout_tick<span class="token punctuation">)</span> <span class="token operator">&lt;</span> RT_TICK_MAX <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_timer_timeout_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* remove timer from timer list firstly */</span>            <span class="token function">_rt_timer_remove</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* call timeout function */</span>            t<span class="token operator">-></span><span class="token function">timeout_func</span><span class="token punctuation">(</span>t<span class="token operator">-></span>parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* re-get tick */</span>            current_tick <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_TIMER<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"current tick: %d\n"</span><span class="token punctuation">,</span> current_tick<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">&amp;</span> RT_TIMER_FLAG_PERIODIC<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>t<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">&amp;</span> RT_TIMER_FLAG_ACTIVATED<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* start it */</span>                t<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RT_TIMER_FLAG_ACTIVATED<span class="token punctuation">;</span>                <span class="token function">rt_timer_start</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* stop timer */</span>                t<span class="token operator">-></span>parent<span class="token punctuation">.</span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RT_TIMER_FLAG_ACTIVATED<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_TIMER<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"timer check leave\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> timer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread Thread</title>
      <link href="/rt-thread-thread/"/>
      <url>/rt-thread-thread/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><blockquote><p>File: rtdef.h</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Thread structure */</span><span class="token keyword">struct</span> rt_thread<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* rt object */</span>    <span class="token keyword">char</span>        name<span class="token punctuation">[</span>RT_NAME_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; the name of thread */</span>    rt_uint8_t  type<span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">/**&lt; type of object */</span>    rt_uint8_t  flags<span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">/**&lt; thread's flags */</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MODULE</span>    <span class="token keyword">void</span>       <span class="token operator">*</span>module_id<span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">/**&lt; id of application module */</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一些基本資料，如名字等</li></ul><pre class="line-numbers language-c"><code class="language-c">    rt_list_t   list<span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">/**&lt; the object list */</span>    rt_list_t   tlist<span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">/**&lt; the thread list */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>兩條鏈：thread list、object list</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* stack point and entry */</span>    <span class="token keyword">void</span>       <span class="token operator">*</span>sp<span class="token punctuation">;</span>                                     <span class="token comment" spellcheck="true">/**&lt; stack point */</span>    <span class="token keyword">void</span>       <span class="token operator">*</span>entry<span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">/**&lt; entry */</span>    <span class="token keyword">void</span>       <span class="token operator">*</span>parameter<span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">/**&lt; parameter */</span>    <span class="token keyword">void</span>       <span class="token operator">*</span>stack_addr<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">/**&lt; stack address */</span>    rt_uint32_t stack_size<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">/**&lt; stack size */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>stack 相關的</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* error code */</span>    rt_err_t    error<span class="token punctuation">;</span>                                  <span class="token comment" spellcheck="true">/**&lt; error code */</span>    rt_uint8_t  stat<span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">/**&lt; thread status */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>狀態，下面會列出來所有可能</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* priority */</span>    rt_uint8_t  current_priority<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/**&lt; current priority */</span>    rt_uint8_t  init_priority<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">/**&lt; initialized priority */</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX > 32</span>    rt_uint8_t  number<span class="token punctuation">;</span>    rt_uint8_t  high_mask<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    rt_uint32_t number_mask<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>與權限相關的</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">if</span> defined(RT_USING_EVENT)</span>    <span class="token comment" spellcheck="true">/* thread event */</span>    rt_uint32_t event_set<span class="token punctuation">;</span>    rt_uint8_t  event_info<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">if</span> defined(RT_USING_SIGNALS)</span>    rt_sigset_t     sig_pending<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; the pending signals */</span>    rt_sigset_t     sig_mask<span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">/**&lt; the mask bits of signal */</span>    <span class="token keyword">void</span>            <span class="token operator">*</span>sig_ret<span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">/**&lt; the return stack pointer from signal */</span>    rt_sighandler_t <span class="token operator">*</span>sig_vectors<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/**&lt; vectors of signal handler */</span>    <span class="token keyword">void</span>            <span class="token operator">*</span>si_list<span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">/**&lt; the signal infor list */</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    rt_ubase_t  init_tick<span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">/**&lt; thread's initialized tick */</span>    rt_ubase_t  remaining_tick<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">/**&lt; remaining tick */</span>    <span class="token keyword">struct</span> rt_timer thread_timer<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/**&lt; built-in thread timer */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>event、sig、tick</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>cleanup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>tid<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/**&lt; cleanup function when thread exit */</span>    <span class="token comment" spellcheck="true">/* light weight process if present */</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_LWP</span>    <span class="token keyword">void</span>        <span class="token operator">*</span>lwp<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    rt_uint32_t user_data<span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">/**&lt; private user data beyond this thread */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>rt_thread_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>cleanup</code> 函數及 <code>user_data</code></li></ul><hr><h2 id="狀態"><a href="#狀態" class="headerlink" title="狀態"></a>狀態</h2><ul><li>一共有 6 種狀態</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> RT_THREAD_INIT                  0x00                </span><span class="token comment" spellcheck="true">/**&lt; Initialized status */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_THREAD_READY                 0x01                </span><span class="token comment" spellcheck="true">/**&lt; Ready status */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_THREAD_SUSPEND               0x02                </span><span class="token comment" spellcheck="true">/**&lt; Suspend status */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_THREAD_RUNNING               0x03                </span><span class="token comment" spellcheck="true">/**&lt; Running status */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_THREAD_BLOCK                 RT_THREAD_SUSPEND   </span><span class="token comment" spellcheck="true">/**&lt; Blocked status */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_THREAD_CLOSE                 0x04                </span><span class="token comment" spellcheck="true">/**&lt; Closed status */</span><span class="token macro property">#<span class="token directive keyword">define</span> RT_THREAD_STAT_MASK             0x0f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>File: thread.h</p></blockquote><ul><li>下圖為官方文本的 thread 流向圖，接著一個一個的看下去<br><img src="https://i.imgur.com/bysM6mg.png" alt=""></li></ul><hr><h2 id="初始化、建立-thread"><a href="#初始化、建立-thread" class="headerlink" title="初始化、建立 thread"></a>初始化、建立 thread</h2><h3 id="靜態記憶體管理"><a href="#靜態記憶體管理" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h3><p><i class="fa fa-code"></i> Code: <code>rt_thread_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 thread</td><td><code>RT-EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*thread</code></th><th><code>*name</code></th><th><code>*entry</code></th><th><code>*parameter</code></th></tr></thead><tbody><tr><td>thread 本體</td><td>名字</td><td>要執行的副程式</td><td>副程式參數</td></tr></tbody></table><table><thead><tr><th><code>*stack_start</code></th><th><code>stack_size</code></th><th><code>priority</code></th><th><code>tick</code></th></tr></thead><tbody><tr><td>thread 堆疊起點</td><td>thread 堆疊大小</td><td>優先級</td><td>可執行的 tick 數</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will initialize a thread, normally it's used to initialize a * static thread object. * * @param thread the static thread object * @param name the name of thread, which shall be unique * @param entry the entry function of thread * @param parameter the parameter of thread enter function * @param stack_start the start address of thread stack * @param stack_size the size of thread stack * @param priority the priority of thread * @param tick the time slice if there are same priority thread * * @return the operation status, RT_EOK on OK, -RT_ERROR on error */</span>rt_err_t <span class="token function">rt_thread_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">,</span>                        <span class="token keyword">const</span> <span class="token keyword">char</span>       <span class="token operator">*</span>name<span class="token punctuation">,</span>                        <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token keyword">void</span>             <span class="token operator">*</span>parameter<span class="token punctuation">,</span>                        <span class="token keyword">void</span>             <span class="token operator">*</span>stack_start<span class="token punctuation">,</span>                        rt_uint32_t       stack_size<span class="token punctuation">,</span>                        rt_uint8_t        priority<span class="token punctuation">,</span>                        rt_uint32_t       tick<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* thread check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>thread <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>stack_start <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init thread object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">,</span> RT_Object_Class_Thread<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">_rt_thread_init</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span>                           name<span class="token punctuation">,</span>                           entry<span class="token punctuation">,</span>                           parameter<span class="token punctuation">,</span>                           stack_start<span class="token punctuation">,</span>                           stack_size<span class="token punctuation">,</span>                           priority<span class="token punctuation">,</span>                           tick<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_thread_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>透過 <code>_rt_thread_init</code> 完成初始化</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>_rt_thread_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 thread</td><td>RT_EOK</td></tr></tbody></table><table><thead><tr><th><code>*thread</code></th><th><code>*name</code></th><th><code>*entry</code></th><th><code>*parameter</code></th></tr></thead><tbody><tr><td>thread 本體</td><td>名字</td><td>要執行的副程式</td><td>副程式參數</td></tr></tbody></table><table><thead><tr><th><code>*stack_start</code></th><th><code>stack_size</code></th><th><code>priority</code></th><th><code>tick</code></th></tr></thead><tbody><tr><td>thread 堆疊起點</td><td>thread 堆疊大小</td><td>優先級</td><td>可執行的 tick 數</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> rt_err_t <span class="token function">_rt_thread_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">,</span>                                <span class="token keyword">const</span> <span class="token keyword">char</span>       <span class="token operator">*</span>name<span class="token punctuation">,</span>                                <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span>                                <span class="token keyword">void</span>             <span class="token operator">*</span>parameter<span class="token punctuation">,</span>                                <span class="token keyword">void</span>             <span class="token operator">*</span>stack_start<span class="token punctuation">,</span>                                rt_uint32_t       stack_size<span class="token punctuation">,</span>                                rt_uint8_t        priority<span class="token punctuation">,</span>                                rt_uint32_t       tick<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* init thread list */</span>    <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>tlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token operator">-></span>entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>entry<span class="token punctuation">;</span>    thread<span class="token operator">-></span>parameter <span class="token operator">=</span> parameter<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* stack init */</span>    thread<span class="token operator">-></span>stack_addr <span class="token operator">=</span> stack_start<span class="token punctuation">;</span>    thread<span class="token operator">-></span>stack_size <span class="token operator">=</span> stack_size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先將傳入的資料填入結構</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init thread stack */</span>    <span class="token function">rt_memset</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>stack_addr<span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> thread<span class="token operator">-></span>stack_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token operator">-></span>sp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">rt_hw_stack_init</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>entry<span class="token punctuation">,</span> thread<span class="token operator">-></span>parameter<span class="token punctuation">,</span>                                          <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>thread<span class="token operator">-></span>stack_addr <span class="token operator">+</span> thread<span class="token operator">-></span>stack_size <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>rt_thread_exit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著設定堆疊，使用 <code>rt_hw_stack_init</code> 來完成（根據不同 cpu 有不同的方式，<code>rt_hw_stack_init</code> 在 /libcpu 中針對不同的 cpu 有不同的函式宣告）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* priority init */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>priority <span class="token operator">&lt;</span> RT_THREAD_PRIORITY_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread<span class="token operator">-></span>init_priority    <span class="token operator">=</span> priority<span class="token punctuation">;</span>    thread<span class="token operator">-></span>current_priority <span class="token operator">=</span> priority<span class="token punctuation">;</span>    thread<span class="token operator">-></span>number_mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX > 32</span>    thread<span class="token operator">-></span>number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    thread<span class="token operator">-></span>high_mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 priority 及 mask</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* tick init */</span>    thread<span class="token operator">-></span>init_tick      <span class="token operator">=</span> tick<span class="token punctuation">;</span>    thread<span class="token operator">-></span>remaining_tick <span class="token operator">=</span> tick<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* error and flags */</span>    thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>    thread<span class="token operator">-></span>stat  <span class="token operator">=</span> RT_THREAD_INIT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize cleanup function and user data */</span>    thread<span class="token operator">-></span>cleanup   <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    thread<span class="token operator">-></span>user_data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init thread timer */</span>    <span class="token function">rt_timer_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                  thread<span class="token operator">-></span>name<span class="token punctuation">,</span>                  rt_thread_timeout<span class="token punctuation">,</span>                  thread<span class="token punctuation">,</span>                  <span class="token number">0</span><span class="token punctuation">,</span>                  RT_TIMER_FLAG_ONE_SHOT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize signal */</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_SIGNALS</span>    thread<span class="token operator">-></span>sig_mask    <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    thread<span class="token operator">-></span>sig_pending <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    thread<span class="token operator">-></span>sig_ret     <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    thread<span class="token operator">-></span>sig_vectors <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    thread<span class="token operator">-></span>si_list     <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_LWP</span>    thread<span class="token operator">-></span>lwp <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_thread_inited_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後依序完成 tick、sig、hook 等的初始化</li></ul><hr><h3 id="動態記憶體管理"><a href="#動態記憶體管理" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h3><p><i class="fa fa-code"></i> Code: <code>rt_thread_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 thread</td><td>thread</td></tr></tbody></table><table><thead><tr><th><code>*name</code></th><th><code>*entry</code></th><th><code>*parameter</code></th></tr></thead><tbody><tr><td>名字</td><td>要執行的副程式</td><td>副程式參數</td></tr></tbody></table><table><thead><tr><th><code>*stack_start</code></th><th><code>stack_size</code></th><th><code>priority</code></th><th><code>tick</code></th></tr></thead><tbody><tr><td>thread 堆疊起點</td><td>thread 堆疊大小</td><td>優先級</td><td>可執行的 tick 數</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will create a thread object and allocate thread object memory * and stack. * * @param name the name of thread, which shall be unique * @param entry the entry function of thread * @param parameter the parameter of thread enter function * @param stack_size the size of thread stack * @param priority the priority of thread * @param tick the time slice if there are same priority thread * * @return the created thread object */</span>rt_thread_t <span class="token function">rt_thread_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>                             <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token keyword">void</span>       <span class="token operator">*</span>parameter<span class="token punctuation">,</span>                             rt_uint32_t stack_size<span class="token punctuation">,</span>                             rt_uint8_t  priority<span class="token punctuation">,</span>                             rt_uint32_t tick<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>stack_start<span class="token punctuation">;</span>    thread <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_thread <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">rt_object_allocate</span><span class="token punctuation">(</span>RT_Object_Class_Thread<span class="token punctuation">,</span>                                                    name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    stack_start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">RT_KERNEL_MALLOC</span><span class="token punctuation">(</span>stack_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack_start <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* allocate stack failure */</span>        <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">_rt_thread_init</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span>                    name<span class="token punctuation">,</span>                    entry<span class="token punctuation">,</span>                    parameter<span class="token punctuation">,</span>                    stack_start<span class="token punctuation">,</span>                    stack_size<span class="token punctuation">,</span>                    priority<span class="token punctuation">,</span>                    tick<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> thread<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_thread_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先 allocate 一塊給 thread，一塊給堆疊</li><li>再呼叫 <code>_rt_thread_init</code> 完成初始化</li></ul><hr><h2 id="啟動-thread"><a href="#啟動-thread" class="headerlink" title="啟動 thread"></a>啟動 thread</h2><p><i class="fa fa-code"></i> Code: <code>rt_thread_startup</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>啟動 thread</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>thread</code></th></tr></thead><tbody><tr><td>欲啟動的 thread</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will start a thread and put it to system ready queue * * @param thread the thread to be started * * @return the operation status, RT_EOK on OK, -RT_ERROR on error */</span>rt_err_t <span class="token function">rt_thread_startup</span><span class="token punctuation">(</span>rt_thread_t thread<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* thread check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>thread <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>stat <span class="token operator">&amp;</span> RT_THREAD_STAT_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> RT_THREAD_INIT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set current priority to init priority */</span>    thread<span class="token operator">-></span>current_priority <span class="token operator">=</span> thread<span class="token operator">-></span>init_priority<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 priority</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* calculate priority attribute */</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX > 32</span>    thread<span class="token operator">-></span>number      <span class="token operator">=</span> thread<span class="token operator">-></span>current_priority <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 5bit */</span>    thread<span class="token operator">-></span>number_mask <span class="token operator">=</span> <span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> thread<span class="token operator">-></span>number<span class="token punctuation">;</span>    thread<span class="token operator">-></span>high_mask   <span class="token operator">=</span> <span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>current_priority <span class="token operator">&amp;</span> <span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 3bit */</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    thread<span class="token operator">-></span>number_mask <span class="token operator">=</span> <span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> thread<span class="token operator">-></span>current_priority<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這些參數是用來計算權限的，<code>scheudler</code> 會用到</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_THREAD<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"startup a thread:%s with priority:%d\n"</span><span class="token punctuation">,</span>                                   thread<span class="token operator">-></span>name<span class="token punctuation">,</span> thread<span class="token operator">-></span>init_priority<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* change thread stat */</span>    thread<span class="token operator">-></span>stat <span class="token operator">=</span> RT_THREAD_SUSPEND<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* then resume it */</span>    <span class="token function">rt_thread_resume</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* do a scheduling */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_thread_startup<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後將 stat 設為 <code>RT_THREAD_SUSPEND</code>，再透過 <code>rt_thread_resume</code> 來完成啟動</li><li>啟動完成後呼叫 <code>rt_scheduler()</code> 來執行一次調度</li></ul><hr><h2 id="暫停、復原-thread"><a href="#暫停、復原-thread" class="headerlink" title="暫停、復原 thread"></a>暫停、復原 thread</h2><p><i class="fa fa-code"></i> Code: <code>rt_thread_suspend</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>暫停 thread</td><td><code>RT-EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*thread</code></th></tr></thead><tbody><tr><td>欲暫停的 thread</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will suspend the specified thread. * * @param thread the thread to be suspended * * @return the operation status, RT_EOK on OK, -RT_ERROR on error * * @note if suspend self thread, after this function call, the * rt_schedule() must be invoked. */</span>rt_err_t <span class="token function">rt_thread_suspend</span><span class="token punctuation">(</span>rt_thread_t thread<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* thread check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>thread <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_THREAD<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"thread suspend:  %s\n"</span><span class="token punctuation">,</span> thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>stat <span class="token operator">&amp;</span> RT_THREAD_STAT_MASK<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_THREAD_READY<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_THREAD<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"thread suspend: thread disorder, 0x%2x\n"</span><span class="token punctuation">,</span>                                       thread<span class="token operator">-></span>stat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* change thread stat */</span>    thread<span class="token operator">-></span>stat <span class="token operator">=</span> RT_THREAD_SUSPEND <span class="token operator">|</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>stat <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_THREAD_STAT_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_schedule_remove_thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* stop thread timer anyway */</span>    <span class="token function">rt_timer_stop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_thread_suspend_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_thread_suspend<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先將狀態修改為 <code>RT_THREAD_SUSPEND</code>，接著將 thread 從 tlist 移除，結束 timer</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>rt_thread_delay</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>延遲 thread</td><td><code>RT-EOK</code></td></tr></tbody></table><table><thead><tr><th><code>tick</code></th></tr></thead><tbody><tr><td>欲延遲的時間</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will let current thread delay for some ticks. * * @param tick the delay ticks * * @return RT_EOK */</span>rt_err_t <span class="token function">rt_thread_delay</span><span class="token punctuation">(</span>rt_tick_t tick<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">rt_thread_sleep</span><span class="token punctuation">(</span>tick<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_thread_delay<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>透過 <code>rt_thread_sleep</code> 實作</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>rt_thread_sleep</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>使 thread 休眠</td><td><code>RT-EOK</code></td></tr></tbody></table><table><thead><tr><th><code>tick</code></th></tr></thead><tbody><tr><td>欲睡眠的時間</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will let current thread sleep for some ticks. * * @param tick the sleep ticks * * @return RT_EOK */</span>rt_err_t <span class="token function">rt_thread_sleep</span><span class="token punctuation">(</span>rt_tick_t tick<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set to current thread */</span>    thread <span class="token operator">=</span> rt_current_thread<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>thread <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* suspend thread */</span>    <span class="token function">rt_thread_suspend</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reset the timeout of thread timer and start it */</span>    <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tick<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* clear error number of this thread to RT_EOK */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">==</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">)</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="復原-thread"><a href="#復原-thread" class="headerlink" title="復原 thread"></a>復原 thread</h3><p><i class="fa fa-code"></i> Code: <code>rt_thread_resume</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>復原 thread</td><td><code>RT-EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*thread</code></th></tr></thead><tbody><tr><td>欲復原的 thread</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will resume a thread and put it to system ready queue. * * @param thread the thread to be resumed * * @return the operation status, RT_EOK on OK, -RT_ERROR on error */</span>rt_err_t <span class="token function">rt_thread_resume</span><span class="token punctuation">(</span>rt_thread_t thread<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* thread check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>thread <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_THREAD<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"thread resume:  %s\n"</span><span class="token punctuation">,</span> thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>stat <span class="token operator">&amp;</span> RT_THREAD_STAT_MASK<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_THREAD_SUSPEND<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_THREAD<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"thread resume: thread disorder, %d\n"</span><span class="token punctuation">,</span>                                       thread<span class="token operator">-></span>stat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* remove from suspend list */</span>    <span class="token function">rt_list_remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>tlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_timer_stop</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* insert to schedule ready list */</span>    <span class="token function">rt_schedule_insert_thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_thread_resume_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_thread_resume<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先從 suspend list 移除，停止 timer，掛回去 ready list</li><li><code>rt_schedule_insert_thread</code> 會將狀態修改成 <code>RT_THREAD_READY</code></li></ul><hr><h2 id="離開、刪除-thread"><a href="#離開、刪除-thread" class="headerlink" title="離開、刪除 thread"></a>離開、刪除 thread</h2><p><i class="fa fa-code"></i> Code: <code>rt_thread_exit</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>暫停 thread</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rt_thread_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> rt_current_thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* remove from schedule */</span>    <span class="token function">rt_schedule_remove_thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* change stat */</span>    thread<span class="token operator">-></span>stat <span class="token operator">=</span> RT_THREAD_CLOSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* remove it from timer list */</span>    <span class="token function">rt_timer_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先從 ready list 中移除，修改狀態為 <code>RT_THREAD_CLOSE</code>，從 timer list 中移除</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span> <span class="token operator">==</span> RT_TRUE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        thread<span class="token operator">-></span>cleanup <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* insert to defunct thread list */</span>        <span class="token function">rt_list_insert_after</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rt_thread_defunct<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>tlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* switch to next task */</span>    <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果為系統的 thread，且 <code>cleanup</code> 函式沒有被定義時，呼叫 <code>rt_object_detach</code> 來完成移除的動作</li><li>否則，將 thread 插入至 <code>rt_thread_defunct</code>，此鏈上面的 thread 會由 idle 清除。</li></ul><hr><h3 id="刪除-thread"><a href="#刪除-thread" class="headerlink" title="刪除 thread"></a>刪除 thread</h3><h4 id="動態記憶體管理-1"><a href="#動態記憶體管理-1" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_thread_delete</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 thread</td><td><code>RT-EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*thread</code></th></tr></thead><tbody><tr><td>欲刪除的 thread</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will delete a thread. The thread object will be removed from * thread queue and deleted from system object management in the idle thread. * * @param thread the thread to be deleted * * @return the operation status, RT_EOK on OK, -RT_ERROR on error */</span>rt_err_t <span class="token function">rt_thread_delete</span><span class="token punctuation">(</span>rt_thread_t thread<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_base_t lock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* thread check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>thread <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>stat <span class="token operator">&amp;</span> RT_THREAD_STAT_MASK<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_THREAD_INIT<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* remove from schedule */</span>        <span class="token function">rt_schedule_remove_thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果此 thread 已經啟動過了，將此 thread 從 ready list 移除</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* release thread timer */</span>    <span class="token function">rt_timer_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* change stat */</span>    thread<span class="token operator">-></span>stat <span class="token operator">=</span> RT_THREAD_CLOSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    lock <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* insert to defunct thread list */</span>    <span class="token function">rt_list_insert_after</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rt_thread_defunct<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>tlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_thread_delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著將 timer 還回去，修改狀態為 <code>RT_THREAD_CLOSE</code>，插入至 <code>rt_thread_defunct</code></li></ul><hr><h4 id="靜態記憶體管理-1"><a href="#靜態記憶體管理-1" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_thread_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 thread</td><td><code>RT-EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*thread</code></th></tr></thead><tbody><tr><td>欲刪除的 thread</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will detach a thread. The thread object will be removed from * thread queue and detached/deleted from system object management. * * @param thread the thread to be deleted * * @return the operation status, RT_EOK on OK, -RT_ERROR on error */</span>rt_err_t <span class="token function">rt_thread_detach</span><span class="token punctuation">(</span>rt_thread_t thread<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_base_t lock<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* thread check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>thread <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>stat <span class="token operator">&amp;</span> RT_THREAD_STAT_MASK<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_THREAD_INIT<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* remove from schedule */</span>        <span class="token function">rt_schedule_remove_thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* release thread timer */</span>    <span class="token function">rt_timer_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* change stat */</span>    thread<span class="token operator">-></span>stat <span class="token operator">=</span> RT_THREAD_CLOSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* detach object */</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>cleanup <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        lock <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* insert to defunct thread list */</span>        <span class="token function">rt_list_insert_after</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rt_thread_defunct<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>tlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_thread_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>與 delete 不同的差在第32行</li></ul><h2 id="控制-thread"><a href="#控制-thread" class="headerlink" title="控制 thread"></a>控制 thread</h2><p><i class="fa fa-code"></i> Code: <code>rt_thread_control</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>控制 thread</td><td><code>RT-EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*thread</code></th><th><code>cmd</code></th><th><code>*argv</code></th></tr></thead><tbody><tr><td>欲控制的 thread</td><td>需執行的動作</td><td>伴隨動作的參數</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will control thread behaviors according to control command. * * @param thread the specified thread to be controlled * @param cmd the control command, which includes *  RT_THREAD_CTRL_CHANGE_PRIORITY for changing priority level of thread; *  RT_THREAD_CTRL_STARTUP for starting a thread; *  RT_THREAD_CTRL_CLOSE for delete a thread. * @param arg the argument of control command * * @return RT_EOK */</span>rt_err_t <span class="token function">rt_thread_control</span><span class="token punctuation">(</span>rt_thread_t thread<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* thread check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>thread <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_object_t<span class="token punctuation">)</span>thread<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_Thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> RT_THREAD_CTRL_CHANGE_PRIORITY<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* for ready thread, change queue */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>stat <span class="token operator">&amp;</span> RT_THREAD_STAT_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> RT_THREAD_READY<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* remove thread from schedule queue first */</span>            <span class="token function">rt_schedule_remove_thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* change thread priority */</span>            thread<span class="token operator">-></span>current_priority <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* recalculate priority attribute */</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX > 32</span>            thread<span class="token operator">-></span>number      <span class="token operator">=</span> thread<span class="token operator">-></span>current_priority <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 5bit */</span>            thread<span class="token operator">-></span>number_mask <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> thread<span class="token operator">-></span>number<span class="token punctuation">;</span>            thread<span class="token operator">-></span>high_mask   <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>current_priority <span class="token operator">&amp;</span> <span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 3bit */</span><span class="token macro property">#<span class="token directive keyword">else</span></span>            thread<span class="token operator">-></span>number_mask <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> thread<span class="token operator">-></span>current_priority<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token comment" spellcheck="true">/* insert thread to schedule queue again */</span>            <span class="token function">rt_schedule_insert_thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            thread<span class="token operator">-></span>current_priority <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* recalculate priority attribute */</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX > 32</span>            thread<span class="token operator">-></span>number      <span class="token operator">=</span> thread<span class="token operator">-></span>current_priority <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 5bit */</span>            thread<span class="token operator">-></span>number_mask <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> thread<span class="token operator">-></span>number<span class="token punctuation">;</span>            thread<span class="token operator">-></span>high_mask   <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>current_priority <span class="token operator">&amp;</span> <span class="token number">0x07</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 3bit */</span><span class="token macro property">#<span class="token directive keyword">else</span></span>            thread<span class="token operator">-></span>number_mask <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> thread<span class="token operator">-></span>current_priority<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RT_THREAD_CTRL_STARTUP<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">rt_thread_startup</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_HEAP</span>    <span class="token keyword">case</span> RT_THREAD_CTRL_CLOSE<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">rt_thread_delete</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_thread_control<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread 理解 RTM_EXPORT</title>
      <link href="/rt-thread-RTM-EXPORT/"/>
      <url>/rt-thread-RTM-EXPORT/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在 RT-Thread 的 kernel 中，許多副程式的結尾都有 <code>RTM_EXPORT</code>，如：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**  * This function will lock the thread scheduler. */</span><span class="token keyword">void</span> <span class="token function">rt_enter_critical</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * the maximal number of nest is RT_UINT16_MAX, which is big     * enough and does not check here     */</span>    rt_scheduler_lock_nest <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_enter_critical<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>RTM_EXPORT</code> 是在 <em>rtm.h</em> 中所定義的一個巨集。</p><h2 id="File-rtm-h"><a href="#File-rtm-h" class="headerlink" title="File: rtm.h"></a>File: rtm.h</h2><ul><li><code>RTM_EXPORT</code> 可被定義的方式有三種：</li></ul><h3 id="1-MSC-VER"><a href="#1-MSC-VER" class="headerlink" title="1. _MSC_VER"></a>1. _MSC_VER</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">if</span> defined(_MSC_VER)</span><span class="token macro property">#<span class="token directive keyword">pragma</span> section("RTMSymTab$f",read)</span><span class="token macro property">#<span class="token directive keyword">define</span> RTM_EXPORT(symbol)                                            \__declspec(allocate("RTMSymTab$f"))const char __rtmsym_##symbol##_name[] = "__vs_rtm_"#symbol;</span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(linker, "/merge:RTMSymTab=mytext")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-MINGW32"><a href="#2-MINGW32" class="headerlink" title="2. __MINGW32_"></a>2. __MINGW32_</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">elif</span> defined(__MINGW32__)</span><span class="token macro property">#<span class="token directive keyword">define</span> RTM_EXPORT(symbol)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-else"><a href="#3-else" class="headerlink" title="3. else"></a>3. else</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">else</span></span><span class="token macro property">#<span class="token directive keyword">define</span> RTM_EXPORT(symbol)                                            \const char __rtmsym_##symbol##_name[] SECTION(".rodata.name") = #symbol;     \const struct rt_module_symtab __rtmsym_##symbol SECTION("RTMSymTab")= \{                                                                     \    (void *)&amp;symbol,                                                  \    __rtmsym_##symbol##_name                                          \};</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>##</code> 為連字符<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[C/C++ 的預處理定義 : # , #@ , ##](https://blog.xuite.net/jesonchung/scienceview/93554778-C%2FC%2B%2B+的預處理定義+%3A+%23+%2C++%23%40+%2C+%23%23)">[1]</span></a></sup>，作用是將指定文字帶到變數名稱裡；如：當傳進來的 <code>symbol</code> 值是 <code>rt_enter_critical</code> 時，此字串的變數名會被宣告成 <code>__rtmsym_rt_enter_critical_name</code></li><li><code>SECTION</code> 為 <code>__attribute__((section))</code> 的巨集寫法</li><li><code>#</code> 為字串話操作符，作用是將後面的變數轉換成字串；如當傳進來的 <code>symbol</code> 值是 <code>rt_enter_critical</code> 時，<code>#symbol</code> 會被轉換成 <code>"rt_enter_critical"</code></li><li>綜合以上，我們可以將原來的 <code>RTM_EXPORT(rt_enter_critical)</code> 透過 <code>define</code> 轉換成以下程式碼：</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">char</span> __rtmsym_rt_enter_critical_name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">".rodata.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> \<span class="token operator">=</span> <span class="token string">"rt_enter_critical"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">struct</span> rt_module_symtab __rtmsym_rt_enter_critical  \ <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">"RTMSymTab"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span>                                                                         <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>rt_enter_critical<span class="token punctuation">,</span>                                                      __rtmsym_rt_enter_critical_name                                          <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> rt_module_symtab<span class="token punctuation">{</span>    <span class="token keyword">void</span>       <span class="token operator">*</span>addr<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="用意"><a href="#用意" class="headerlink" title="用意"></a>用意</h2><ul><li>linux 系統中，有 <code>EXPORT_SYMBOL</code>，其中的用意是為了在撰寫程式時能夠方便呼叫這些副程式<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[EXPORT_SYMBOL解析](http://www.cnblogs.com/dyllove98/p/3186967.html)">[2]</span></a></sup>，即<strong>模組化</strong></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.xuite.net/jesonchung/scienceview/93554778-C%2FC%2B%2B+%E7%9A%84%E9%A0%90%E8%99%95%E7%90%86%E5%AE%9A%E7%BE%A9+%3A+%23+%2C++%23%40+%2C+%23%23" target="_blank" rel="noopener">C/C++ 的預處理定義 : # , #@ , ##</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.cnblogs.com/dyllove98/p/3186967.html" target="_blank" rel="noopener">EXPORT_SYMBOL解析</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> RTM_EXPORT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread Scheduler</title>
      <link href="/rt-thread-scheduler/"/>
      <url>/rt-thread-scheduler/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: scheduler.c</p></blockquote><ul><li>於 <em>components.c</em> 中 的 <code>rtthread_startup()</code> 首先呼叫 <code>rt_system_scheduler_init()</code> 初始化 scheduler</li><li>於 <code>rtthread_startup()</code> 的最後呼叫 <code>rt_system_scheduler_start()</code> 開始 scheduler</li></ul><hr><h2 id="初始化-scheduler"><a href="#初始化-scheduler" class="headerlink" title="初始化 scheduler"></a>初始化 scheduler</h2><p><i class="fa fa-code"></i> Code: <code>rt_system_scheduler_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 scheduler</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @ingroup SystemInit * This function will initialize the system scheduler */</span><span class="token keyword">void</span> <span class="token function">rt_system_scheduler_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t offset<span class="token punctuation">;</span>    rt_scheduler_lock_nest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>rt_scheduler_lock_nest</code> 為 scheduler 的鎖，在進入 critical region 時會 <code>++</code>，離開時會 <code>--</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SCHEDULER<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"start scheduler: max priority 0x%02x\n"</span><span class="token punctuation">,</span>                                      RT_THREAD_PRIORITY_MAX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> RT_THREAD_PRIORITY_MAX<span class="token punctuation">;</span> offset <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rt_thread_priority_table<span class="token punctuation">[</span>offset<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>RT_THREAD_PRIORITY_MAX</code> 根據不同的 <em>BSP</em> 可設定為不同的值，如 256；即優先級為 0~255，數字越小越等級越高</li><li>初始化 <code>rt_thread_priority_table</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    rt_current_priority <span class="token operator">=</span> RT_THREAD_PRIORITY_MAX <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    rt_current_thread <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>設定當前的優先級為最低，及空。</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize ready priority group */</span>    rt_thread_ready_priority_group <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX > 32</span>    <span class="token comment" spellcheck="true">/* initialize ready table */</span>    <span class="token function">rt_memset</span><span class="token punctuation">(</span>rt_thread_ready_table<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_thread_ready_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* initialize thread defunct */</span>    <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rt_thread_defunct<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>初始化 <code>rt_thread_ready_priority_group</code> 及 <code>rt_thread_defunct</code></li></ul><hr><h2 id="啟動-scheduler"><a href="#啟動-scheduler" class="headerlink" title="啟動 scheduler"></a>啟動 scheduler</h2><ul><li>此函數會找到一個 priorty 最高的 thread 並執行</li></ul><p><i class="fa fa-code"></i> Code: <code>rt_system_scheduler_start</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>啟動 scheduler</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @ingroup SystemInit * This function will startup scheduler. It will select one thread * with the highest priority level, then switch to it. */</span><span class="token keyword">void</span> <span class="token function">rt_system_scheduler_start</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>to_thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t highest_ready_priority<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX > 32</span>    <span class="token keyword">register</span> rt_ubase_t number<span class="token punctuation">;</span>    number <span class="token operator">=</span> <span class="token function">__rt_ffs</span><span class="token punctuation">(</span>rt_thread_ready_priority_group<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    highest_ready_priority <span class="token operator">=</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">__rt_ffs</span><span class="token punctuation">(</span>rt_thread_ready_table<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    highest_ready_priority <span class="token operator">=</span> <span class="token function">__rt_ffs</span><span class="token punctuation">(</span>rt_thread_ready_priority_group<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 <code>rt_ffs</code> 來尋找 priority 最高的鏈結</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* get switch to thread */</span>    to_thread <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>rt_thread_priority_table<span class="token punctuation">[</span>highest_ready_priority<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">,</span>                              <span class="token keyword">struct</span> rt_thread<span class="token punctuation">,</span>                              tlist<span class="token punctuation">)</span><span class="token punctuation">;</span>    rt_current_thread <span class="token operator">=</span> to_thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* switch to new thread */</span>    <span class="token function">rt_hw_context_switch_to</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token operator">&amp;</span>to_thread<span class="token operator">-></span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* never come back */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找到該鏈的第一顆，context switch 至該 thread</li></ul><hr><h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h2><ul><li>呼叫此函式，系統會重新計算所有 thread 的 priority，如果存在更高的（與呼叫此函式的 thread 比較），系統將會 switch 至該 thread。</li></ul><p><i class="fa fa-code"></i> Code: <code>rt_schedule</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>執行一次調度</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will perform one schedule. It will select one thread * with the highest priority level, then switch to it. */</span><span class="token keyword">void</span> <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_base_t level<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>to_thread<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>from_thread<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先將中斷關閉</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* check the scheduler is enabled or not */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rt_scheduler_lock_nest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">register</span> rt_ubase_t highest_ready_priority<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX &lt;= 32</span>        highest_ready_priority <span class="token operator">=</span> <span class="token function">__rt_ffs</span><span class="token punctuation">(</span>rt_thread_ready_priority_group<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>        <span class="token keyword">register</span> rt_ubase_t number<span class="token punctuation">;</span>        number <span class="token operator">=</span> <span class="token function">__rt_ffs</span><span class="token punctuation">(</span>rt_thread_ready_priority_group<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        highest_ready_priority <span class="token operator">=</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">__rt_ffs</span><span class="token punctuation">(</span>rt_thread_ready_table<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>檢查鎖的狀態，並找到 priority 最高的鍊</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* get switch to thread */</span>        to_thread <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>rt_thread_priority_table<span class="token punctuation">[</span>highest_ready_priority<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">,</span>                                  <span class="token keyword">struct</span> rt_thread<span class="token punctuation">,</span>                                  tlist<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找到該鏈的第一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* if the destination thread is not the same as current thread */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>to_thread <span class="token operator">!=</span> rt_current_thread<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rt_current_priority <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t<span class="token punctuation">)</span>highest_ready_priority<span class="token punctuation">;</span>            from_thread         <span class="token operator">=</span> rt_current_thread<span class="token punctuation">;</span>            rt_current_thread   <span class="token operator">=</span> to_thread<span class="token punctuation">;</span>            <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_scheduler_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span>from_thread<span class="token punctuation">,</span> to_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* switch to new thread */</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SCHEDULER<span class="token punctuation">,</span>                         <span class="token punctuation">(</span><span class="token string">"[%d]switch to priority#%d "</span>                          <span class="token string">"thread:%.*s(sp:0x%p), "</span>                          <span class="token string">"from thread:%.*s(sp: 0x%p)\n"</span><span class="token punctuation">,</span>                          rt_interrupt_nest<span class="token punctuation">,</span> highest_ready_priority<span class="token punctuation">,</span>                          RT_NAME_MAX<span class="token punctuation">,</span> to_thread<span class="token operator">-></span>name<span class="token punctuation">,</span> to_thread<span class="token operator">-></span>sp<span class="token punctuation">,</span>                          RT_NAME_MAX<span class="token punctuation">,</span> from_thread<span class="token operator">-></span>name<span class="token punctuation">,</span> from_thread<span class="token operator">-></span>sp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_OVERFLOW_CHECK</span>            <span class="token function">_rt_scheduler_stack_check</span><span class="token punctuation">(</span>to_thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rt_interrupt_nest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">rt_thread_handle_sig</span><span class="token punctuation">(</span>rt_bool_t clean_state<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">rt_hw_context_switch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token operator">&amp;</span>from_thread<span class="token operator">-></span>sp<span class="token punctuation">,</span>                                     <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token operator">&amp;</span>to_thread<span class="token operator">-></span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* enable interrupt */</span>                <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_SIGNALS</span>                <span class="token comment" spellcheck="true">/* check signal status */</span>                <span class="token function">rt_thread_handle_sig</span><span class="token punctuation">(</span>RT_TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果找到的 thread 與當前的 thread 不相符，且 <code>rt_interrupt_nest == 0</code>，即這次調度不是在中斷下運作的，直接 switch 至該 thread </li><li>最後恢復中斷</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SCHEDULER<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"switch in interrupt\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">rt_hw_context_switch_interrupt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token operator">&amp;</span>from_thread<span class="token operator">-></span>sp<span class="token punctuation">,</span>                                               <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token operator">&amp;</span>to_thread<span class="token operator">-></span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* enable interrupt */</span>                <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 <code>rt_interrupt_nest != 0</code>，即這次調度是在中斷下運作的，則用中斷 switch 至該 thread</li><li>最後恢復中斷</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* enable interrupt */</span>            <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果找到的一樣，或是沒要到鎖，直接開啟中斷，結束調度</li></ul><hr><h2 id="插入-thread"><a href="#插入-thread" class="headerlink" title="插入 thread"></a>插入 thread</h2><p><i class="fa fa-code"></i> Code: <code>rt_schedule_insert_thread</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>將 thread 插入 list</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*thread</code></th></tr></thead><tbody><tr><td>欲插入的 thread</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will insert a thread to system ready queue. The state of * thread will be set as READY and remove from suspend queue. * * @param thread the thread to be inserted * @note Please do not invoke this function in user application. */</span><span class="token keyword">void</span> <span class="token function">rt_schedule_insert_thread</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_thread <span class="token operator">*</span> thread<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>thread <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* change stat */</span>    thread<span class="token operator">-></span>stat <span class="token operator">=</span> RT_THREAD_READY <span class="token operator">|</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>stat <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_THREAD_STAT_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先關閉中斷，及更改 thread 的狀態為 <code>RT_THREAD_READY</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* insert thread to ready list */</span>    <span class="token function">rt_list_insert_before</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>rt_thread_priority_table<span class="token punctuation">[</span>thread<span class="token operator">-></span>current_priority<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>tlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>接著呼叫 <code>rt_list_insert_before</code> 將 thread 插到第一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set priority mask */</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX &lt;= 32</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SCHEDULER<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"insert thread[%.*s], the priority: %d\n"</span><span class="token punctuation">,</span>                                      RT_NAME_MAX<span class="token punctuation">,</span> thread<span class="token operator">-></span>name<span class="token punctuation">,</span> thread<span class="token operator">-></span>current_priority<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SCHEDULER<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token string">"insert thread[%.*s], the priority: %d 0x%x %d\n"</span><span class="token punctuation">,</span>                  RT_NAME_MAX<span class="token punctuation">,</span>                  thread<span class="token operator">-></span>name<span class="token punctuation">,</span>                  thread<span class="token operator">-></span>number<span class="token punctuation">,</span>                  thread<span class="token operator">-></span>number_mask<span class="token punctuation">,</span>                  thread<span class="token operator">-></span>high_mask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX > 32</span>    rt_thread_ready_table<span class="token punctuation">[</span>thread<span class="token operator">-></span>number<span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> thread<span class="token operator">-></span>high_mask<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    rt_thread_ready_priority_group <span class="token operator">|</span><span class="token operator">=</span> thread<span class="token operator">-></span>number_mask<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後恢復中斷</li></ul><hr><h2 id="移除-thread"><a href="#移除-thread" class="headerlink" title="移除 thread"></a>移除 thread</h2><p><i class="fa fa-code"></i> Code: <code>rt_schedule_remove_thread</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>從 list 中移除 thread</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*thread</code></th></tr></thead><tbody><tr><td>欲移除的 thread</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will remove a thread from system ready queue. * * @param thread the thread to be removed * * @note Please do not invoke this function in user application. */</span><span class="token keyword">void</span> <span class="token function">rt_schedule_remove_thread</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>thread <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX &lt;= 32</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SCHEDULER<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"remove thread[%.*s], the priority: %d\n"</span><span class="token punctuation">,</span>                                      RT_NAME_MAX<span class="token punctuation">,</span> thread<span class="token operator">-></span>name<span class="token punctuation">,</span>                                      thread<span class="token operator">-></span>current_priority<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SCHEDULER<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token string">"remove thread[%.*s], the priority: %d 0x%x %d\n"</span><span class="token punctuation">,</span>                  RT_NAME_MAX<span class="token punctuation">,</span>                  thread<span class="token operator">-></span>name<span class="token punctuation">,</span>                  thread<span class="token operator">-></span>number<span class="token punctuation">,</span>                  thread<span class="token operator">-></span>number_mask<span class="token punctuation">,</span>                  thread<span class="token operator">-></span>high_mask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* remove thread from ready list */</span>    <span class="token function">rt_list_remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>tlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先關閉中斷，再呼叫 <code>rt_list_remove</code> 來刪除第一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>rt_thread_priority_table<span class="token punctuation">[</span>thread<span class="token operator">-></span>current_priority<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_THREAD_PRIORITY_MAX > 32</span>        rt_thread_ready_table<span class="token punctuation">[</span>thread<span class="token operator">-></span>number<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>thread<span class="token operator">-></span>high_mask<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rt_thread_ready_table<span class="token punctuation">[</span>thread<span class="token operator">-></span>number<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rt_thread_ready_priority_group <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>thread<span class="token operator">-></span>number_mask<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">else</span></span>        rt_thread_ready_priority_group <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>thread<span class="token operator">-></span>number_mask<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果刪除後，原本的鏈為空，就修改一些參數（在 thread 會討論）</li><li>最後開啟中斷</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kernel </tag>
            
            <tag> RT-Thread </tag>
            
            <tag> scheduler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread GUI engine - 架構</title>
      <link href="/RT-Thread-GUI/"/>
      <url>/RT-Thread-GUI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>RT-Thread 的 GUI 放在 package 中（<a href="https://github.com/RT-Thread-packages/gui_engine.git" target="_blank" rel="noopener">git 原始碼</a>），本文將簡單將此 GUI engine 分工。</p><h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><p>處理文字編碼，及字型相關的</p><pre><code>. |-- src| |-- asc12font.c| |-- asc16font.c| |-- font_bmp.c| |-- font_fnt.c| |-- font_freetype.c| |-- font_hz_bmp.c| |-- font_hz_file.c| |-- font.c| |-- hz12font.c| |-- hz16font.c| ˋ-- gb2312.c|ˋ-- include  ˋ-- rtgui    |-- font_fnt.h    |-- font_freetype.h    |-- font.h    ˋ-- gb2312.h</code></pre><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>處理圖片格式相關的</p><pre><code>.|-- src| |-- blit.c| |-- image_bmp.c| |-- image_jpg.c| |-- image_png.c| |-- image_xpm.c| ˋ-- image.c|ˋ-- include  ˋ-- rtgui    |-- bilt.h    |-- image_bmp.h    |-- image_container.h    |-- image_hdc.h    ˋ-- image.h</code></pre><h2 id="Draw"><a href="#Draw" class="headerlink" title="Draw"></a>Draw</h2><p>協助使用者繪製一些圖形等</p><pre><code>.|-- src| |-- color.c| |-- dc_blend.c| |-- dc_duffer.c| |-- dc_client.c| |-- dc_hw.c| |-- dc_rotozoom.c| |-- dc_trans.c| ˋ-- dc.c|ˋ-- include  ˋ-- rtgui    |-- color.h    |-- dc_draw.h    |-- dc_trans.h    ˋ-- dc.h</code></pre><h2 id="Widgets"><a href="#Widgets" class="headerlink" title="Widgets"></a>Widgets</h2><p>一些相關的 widgets，如按鈕、視窗等</p><pre><code>.|-- src| |-- box.c| |-- container.c| |-- matrix.c| |-- region.c| |-- title.c| |-- topwin.c| |-- topwin.h| |-- widgets.c| ˋ-- window.c|ˋ-- include  ˋ-- rtgui    ˋ-- widgets      |-- box.h      |-- container.h      |-- matrix.h      |-- region.h      |-- title.h      |-- widget.h      ˋ-- window.h</code></pre><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2><p>系統層面的工作、及協助外部硬體，如鍵盤等。</p><pre><code>.|-- src| |-- filerw.c| |-- mouse.c| |-- mouse.h| |-- server.c| |-- rtgui_app.c| |-- rtgui_driver.c| |-- rtgui_object.c| ˋ-- rtgui_system.c|ˋ-- include  ˋ-- rtgui    |-- driver.h    |-- event.h    |-- filerw.h    |-- kbddef.h    |-- list.h    |-- rtgui_app.h    |-- rtgui_config.h    |-- rtgui_object.h    |-- rtgui_server.h    |-- rtgui_system.h    |-- rtgui.h    ˋ-- tree.h</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> RT-Thread </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RT-Thread </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 更改家目錄位置</title>
      <link href="/Ubuntu-change-home-partition/"/>
      <url>/Ubuntu-change-home-partition/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>之前為了解決我的問題，上網<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Partitioning/Home/Moving](https://help.ubuntu.com/community/Partitioning/Home/Moving)">[1]</span></a></sup>找到的解答，紀錄一下。</p><h2 id="1-找到目標分割的-UUID"><a href="#1-找到目標分割的-UUID" class="headerlink" title="1. 找到目標分割的 UUID"></a>1. 找到目標分割的 UUID</h2><ul><li>command:</li></ul><pre class="line-numbers language-shell"><code class="language-shell">sudo blkid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>result:</li></ul><pre class="line-numbers language-shell"><code class="language-shell">/dev/sda1: UUID="1a2b3c4d-1a2b-1a2b-1a2b-1a2b3c4d5e6f" TYPE="ext4" PARTUUID="12345678-01"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>其中 <code>UUID="1a2b3c4d-1a2b-1a2b-1a2b-1a2b3c4d5e6f"</code> 為此分割的 UUID，記著。</li></ul><hr><h2 id="2-設定-fstab"><a href="#2-設定-fstab" class="headerlink" title="2. 設定 fstab"></a>2. 設定 fstab</h2><p>fstab 是用來設定開機時哪些分割需要被載入，接下來會將原本的 fstab 備份，並於檔名中加入當前日期，接著修改該文件。</p><ul><li>備份 (Duplicate)</li></ul><pre class="line-numbers language-shell"><code class="language-shell">sudo cp /etc/fstab /etc/fstab.$(date +%Y-%m-%d)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>比較兩檔案</li></ul><pre class="line-numbers language-shell"><code class="language-shell">cmp /etc/fstab /etc/fstab.$(date +%Y-%m-%d)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>開啟文字編輯器修改 fstab</li></ul><pre class="line-numbers language-shell"><code class="language-shell">sudo gedit /etc/fstab <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(gedit 可替換成任何文字編輯器，如 vim)<br>加入以下文字：</p><pre><code># (identifier)  (location, eg sda5)   (format, eg ext3 or ext4)      (some settings) UUID=1a2b3c4d-1a2b-1a2b-1a2b-1a2b3c4d5e6f   /media/home    ext4          defaults       0       2 </code></pre><p>記得填入自己的 UUID，及正確的格式。</p><p>存檔，關閉編輯器。</p><ul><li>建立新資料夾</li></ul><pre class="line-numbers language-shell"><code class="language-shell">sudo mkdir /media/home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此資料夾是為了掛載新的分割，需與上一步驟填入的相同。</p><ul><li>重開機。</li></ul><hr><h2 id="3-複製原本的-home-到新分割"><a href="#3-複製原本的-home-到新分割" class="headerlink" title="3. 複製原本的 home 到新分割"></a>3. 複製原本的 home 到新分割</h2><pre class="line-numbers language-shell"><code class="language-shell">sudo rsync -aXS --progress --exclude='/*/.gvfs' /home/. /media/home/.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>檢查是否全複製過去了</li></ul><pre class="line-numbers language-shell"><code class="language-shell">sudo diff -r /home /media/home -x ".gvfs/*"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="4-再次修改-fstab"><a href="#4-再次修改-fstab" class="headerlink" title="4. 再次修改 fstab"></a>4. 再次修改 fstab</h2><ul><li>開啟</li></ul><pre class="line-numbers language-shell"><code class="language-shell">sudo gedit /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改上次新增的部分，將 <code>/media/home</code> 改成 <code>default</code>:</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># (identifier)  (location, eg sda5)   (format, eg ext3 or ext4)      (some settings) UUID=????????   /home    ext3          defaults       0       2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="5-備份舊的家目錄"><a href="#5-備份舊的家目錄" class="headerlink" title="5. 備份舊的家目錄"></a>5. 備份舊的家目錄</h2><pre class="line-numbers language-shell"><code class="language-shell">cd / && sudo mv /home /old_home && sudo mkdir /home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="6-重開機，大功告成"><a href="#6-重開機，大功告成" class="headerlink" title="6. 重開機，大功告成"></a>6. 重開機，大功告成</h2><ol><li>fstab 將新分割掛載在 /home 上</li><li>原本的 /home 改名成 /old_home</li></ol><hr><h2 id="刪除-old-home"><a href="#刪除-old-home" class="headerlink" title="刪除 old_home"></a>刪除 old_home</h2><p>如果磁碟空間不夠，或是想清理磁碟的話，可透過以下指令刪除。</p><pre class="line-numbers language-shell"><code class="language-shell">cd /sudo rm -rI /old_home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://help.ubuntu.com/community/Partitioning/Home/Moving" target="_blank" rel="noopener">Partitioning/Home/Moving</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C語言 attribute</title>
      <link href="/c-attribute/"/>
      <url>/c-attribute/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>有分三種： ① 對副函式的　② 對資料的　③ 對結構的</p><p><i class="fa fa-bell"></i> 註：<strong>attribute</strong> 是給 compiler 看的。</p><h2 id="對結構的"><a href="#對結構的" class="headerlink" title="對結構的"></a>對結構的</h2><h3 id="packed"><a href="#packed" class="headerlink" title="packed"></a>packed</h3><p>C語言在宣告結構的時候，會對裡面的元素作對齊，給個例子：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sample <span class="token punctuation">{</span>    <span class="token keyword">int</span>  memberA<span class="token punctuation">;</span>    <span class="token keyword">char</span> memberB<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>  memberC<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我們手算此結構的大小的話，會是：</p><ul><li>A: 4 bytes;</li><li>B: 3 bytes;</li><li>C: 4 bytes;</li><li>sample : 4 + 3 + 4 = 11 bytes</li></ul><p>但實際上 compiler 出來 <code>sizeof(struct sample) = 12</code><br><br>這是因為 compiler 所有元素對齊，也就是把每一格切成 4 bytes，B 就會自動對齊成 4 bytes。<br><br>也可以說是寫成：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sample <span class="token punctuation">{</span>    <span class="token keyword">int</span>  memberA<span class="token punctuation">;</span>    <span class="token keyword">char</span> memberB<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> padding<span class="token punctuation">;</span>    <span class="token keyword">int</span>  memberC<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在嵌入式系統中，不可浪費太多記憶體，所以需要使用 packed 屬性來告訴 compiler 不要幫我們對齊，<code>sizeof</code> 出來的結果就會如我們預期。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sample <span class="token punctuation">{</span>    <span class="token keyword">int</span>  memberA<span class="token punctuation">;</span>    <span class="token keyword">char</span> memberB<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>  memberC<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="aligned"><a href="#aligned" class="headerlink" title="aligned"></a>aligned</h3><p>相反的，<code>aligned</code> 屬性就是告訴 compiler 幫我們對齊資料，可以指定對其的大小，如：</p><ul><li><code>__attribute__((aligned(8)))</code></li><li><code>__attribute__((aligned(16)))</code></li></ul><p>如果我們在上一個例子加上此屬性的話，<code>sizeof</code> 的結果將會不一樣。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sample <span class="token punctuation">{</span>    <span class="token keyword">int</span>  memberA<span class="token punctuation">;</span>    <span class="token keyword">char</span> memberB<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>  memberC<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此時 <code>sizeof(struct sample) = 16</code><br>也就是 A+B=7 bytes，沒有超過我們給定的 8，但加上 C 就會超過了，所以在 B 跟 C 中間塞個 1 byte 來對齊；然後在 C 的後面塞 4 bytes；也就是：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sample <span class="token punctuation">{</span>    <span class="token keyword">int</span>  memberA<span class="token punctuation">;</span>    <span class="token keyword">char</span> memberB<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> padding1<span class="token punctuation">;</span>    <span class="token keyword">int</span>  memberC<span class="token punctuation">;</span>    <span class="token keyword">int</span>  padding2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果沒有加數字，compiler 會進行最佳化的對齊。<br>以此例子將以 4 對齊。</p><h2 id="對資料的"><a href="#對資料的" class="headerlink" title="對資料的"></a>對資料的</h2><ul><li><code>__attribute__((aligned))</code></li><li><code>__attribute__((packed))</code></li></ul><p>與結構道理相同，也是決定要不要對齊。</p><h2 id="aligned-v-s-packed"><a href="#aligned-v-s-packed" class="headerlink" title="aligned v.s. packed"></a>aligned v.s. packed</h2><ul><li>aligned: 速度快</li><li>packed: 省記憶體</li></ul><h2 id="對副程式的"><a href="#對副程式的" class="headerlink" title="對副程式的"></a>對副程式的</h2><h3 id="noreturn"><a href="#noreturn" class="headerlink" title="noreturn"></a>noreturn</h3><p>對於 void 的副程式，如果放在某個需要回傳值的副程式，理論上會需要回傳值，也就是 <code>return void</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sample</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">?</span> a <span class="token punctuation">:</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但這是無效的操作，所以需要加上 <code>__attribute__((noreturn))</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sample</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span> a <span class="token punctuation">:</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><h3 id="section"><a href="#section" class="headerlink" title="section"></a>section</h3><p>如果需要將特定的變數、結構或是副程式放到指定的記憶體位置，即可使用此屬性，用法如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> sample<span class="token punctuation">{</span>    <span class="token keyword">int</span>  some<span class="token punctuation">;</span>    <span class="token keyword">char</span> members<span class="token punctuation">;</span>    <span class="token keyword">int</span>  here<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述例子我們指定將 sample 結構放置於指定的記憶體區塊，名為 <code>"name"</code>。<br><br>而 <code>"name"</code> 這個記憶體區塊則在 <em>linker script</em> 中命名。</p><pre><code>SECTION{    . = 0x1000;    .name : {        AT(0x100000);    }}</code></pre><p>對變數、副程式我們可以一樣指定連結的位址：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> link_sample <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sample_fun</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">section</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sample_fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> do_nothing <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> do_nothing<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim 指令筆記</title>
      <link href="/vim-instruction/"/>
      <url>/vim-instruction/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="編輯"><a href="#編輯" class="headerlink" title="編輯"></a>編輯</h2><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">i</td><td style="text-align:left">游標位置進入編輯模式（insert mode）<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[vi 與 vim 的指令整理](http://www.vixual.net/blog/archives/234)">[1]</span></a></sup></td></tr><tr><td style="text-align:center">I</td><td style="text-align:left">在游標行的第一個非空字元進入編輯模式</td></tr><tr><td style="text-align:center">A</td><td style="text-align:left">在游標行的最後一位進入編輯模式</td></tr><tr><td style="text-align:center">o</td><td style="text-align:left">向下新增一行，進入編輯模式</td></tr><tr><td style="text-align:center">O</td><td style="text-align:left">向下新增一行，進入編輯模式</td></tr><tr><td style="text-align:center">cc</td><td style="text-align:left">刪除此行，並進入編輯模式</td></tr><tr><td style="text-align:center"><code>ESC</code></td><td style="text-align:left">退出編輯模式</td></tr></tbody></table><h2 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h2><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">dd</td><td style="text-align:left">刪除此行</td></tr><tr><td style="text-align:center"><code>n</code> dd</td><td style="text-align:left">刪除第 <code>n</code> 行</td></tr><tr><td style="text-align:center">dG</td><td style="text-align:left">從游標行刪除至最後一行</td></tr><tr><td style="text-align:center">d1G</td><td style="text-align:left">從游標行刪除至第一行</td></tr><tr><td style="text-align:center">d$</td><td style="text-align:left">從游標處刪除至最後一個字元</td></tr><tr><td style="text-align:center">d0</td><td style="text-align:left">從游標處刪除至第一個字元</td></tr></tbody></table><h2 id="游標移動"><a href="#游標移動" class="headerlink" title="游標移動"></a>游標移動</h2><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">gg</td><td style="text-align:left">移至第一行</td></tr><tr><td style="text-align:center">G</td><td style="text-align:left">移至最後一行</td></tr><tr><td style="text-align:center"><code>n</code> G</td><td style="text-align:left">移至第 <code>n</code> 行</td></tr><tr><td style="text-align:center">0</td><td style="text-align:left">移至該行的最前</td></tr><tr><td style="text-align:center">$</td><td style="text-align:left">移至該行的最後</td></tr><tr><td style="text-align:center"><code>n</code> <code>Space</code></td><td style="text-align:left">向右移 <code>n</code> 個字元</td></tr><tr><td style="text-align:center"><code>n</code> <code>Enter</code></td><td style="text-align:left">向下移 <code>n</code> 行</td></tr></tbody></table><h2 id="標記、複製"><a href="#標記、複製" class="headerlink" title="標記、複製"></a>標記、複製</h2><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">v</td><td style="text-align:left">開始文字標記</td></tr><tr><td style="text-align:center">V</td><td style="text-align:left">開始行標記</td></tr><tr><td style="text-align:center">v <code>Ctrl</code> v</td><td style="text-align:left">開始區塊標記</td></tr><tr><td style="text-align:center">d</td><td style="text-align:left">刪除標記內容</td></tr><tr><td style="text-align:center">y</td><td style="text-align:left">複製標記內容</td></tr><tr><td style="text-align:center">yy</td><td style="text-align:left">複製游標行</td></tr><tr><td style="text-align:center">yG</td><td style="text-align:left">從游標行複製到最後一行</td></tr><tr><td style="text-align:center">y1G</td><td style="text-align:left">從游標行複製到第一行</td></tr><tr><td style="text-align:center">y$</td><td style="text-align:left">複製游標處至最後</td></tr><tr><td style="text-align:center">y0</td><td style="text-align:left">複製游標處至最前</td></tr><tr><td style="text-align:center">p</td><td style="text-align:left">在下一行貼上複製或刪除的內容</td></tr><tr><td style="text-align:center">P</td><td style="text-align:left">在上一行貼上複製或刪除的內容</td></tr><tr><td style="text-align:center"><code>Ctrl</code> R 0</td><td style="text-align:left">於編輯模式中，在下一行貼上複製或刪除的內容</td></tr></tbody></table><h2 id="搜尋與取代"><a href="#搜尋與取代" class="headerlink" title="搜尋與取代"></a>搜尋與取代</h2><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">/</td><td style="text-align:left">搜尋</td></tr><tr><td style="text-align:center">/\c</td><td style="text-align:left">不分大小寫搜尋</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">選取字串，按 * 也可以搜尋</td></tr><tr><td style="text-align:center">?</td><td style="text-align:left">向上搜尋</td></tr><tr><td style="text-align:center">?\c</td><td style="text-align:left">不分大小寫向上搜尋</td></tr><tr><td style="text-align:center">n</td><td style="text-align:left">下一個搜尋結果</td></tr><tr><td style="text-align:center">N</td><td style="text-align:left">上一個搜尋結果</td></tr></tbody></table><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">:w</td><td style="text-align:left">存檔</td></tr><tr><td style="text-align:center">:w <code>file_name</code></td><td style="text-align:left">另存新檔</td></tr><tr><td style="text-align:center">:q</td><td style="text-align:left">退出</td></tr><tr><td style="text-align:center">:wq</td><td style="text-align:left">存檔並退出</td></tr><tr><td style="text-align:center">:x</td><td style="text-align:left">存檔並退出</td></tr><tr><td style="text-align:center">:e <code>file_name</code></td><td style="text-align:left">編輯其他檔案</td></tr><tr><td style="text-align:center">:e!</td><td style="text-align:left">還原至檔案修改前的狀態</td></tr><tr><td style="text-align:center">:files</td><td style="text-align:left">列出所有開啟的檔案</td></tr><tr><td style="text-align:center">:n</td><td style="text-align:left">切到下一個開啟的檔案</td></tr><tr><td style="text-align:center">:N</td><td style="text-align:left">切到上一個開啟的檔案</td></tr><tr><td style="text-align:center">:Ex</td><td style="text-align:left">開啟檔案瀏覽器</td></tr><tr><td style="text-align:center">:Ex <code>url</code></td><td style="text-align:left">在指定路徑開啟檔案瀏覽器</td></tr></tbody></table><h3 id="檔案瀏覽器相關"><a href="#檔案瀏覽器相關" class="headerlink" title="檔案瀏覽器相關"></a>檔案瀏覽器相關</h3><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:left">同指令 <code>..</code></td></tr><tr><td style="text-align:center">d</td><td style="text-align:left"><code>mkdir</code></td></tr><tr><td style="text-align:center">D</td><td style="text-align:left"><code>rmdir</code></td></tr><tr><td style="text-align:center">R</td><td style="text-align:left">重新命名</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:left">重覆上一個指令</td></tr><tr><td style="text-align:center">! <code>shell</code></td><td style="text-align:left">執行 <code>shell</code> 指令，並顯示執行結果</td></tr><tr><td style="text-align:center">u</td><td style="text-align:left">還原指令</td></tr><tr><td style="text-align:center">J</td><td style="text-align:left">將游標行與下一行合併</td></tr></tbody></table><hr><h2 id="特殊指令"><a href="#特殊指令" class="headerlink" title="特殊指令"></a>特殊指令</h2><ul><li><code>:w !sudo tee %</code>：當要存檔的時候需要權限，可以用此指令來提升。</li><li><code>"+y</code>：將選取的內容複製到 + 暫存器（剪貼簿)，方便在其他程式中貼上。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[如何将 Vim 剪贴板里面的东西粘贴到 Vim 之外的地方？](https://www.zhihu.com/question/19863631)">[2]</span></a></sup></li></ul><blockquote><p>vim 在複製、刪除時，會把資料放在預設暫存器中，有 0-9A-Za-z+” 這些暫存器可選擇，其中：</p><ul><li>0-9：vim 會用到 0-9，0 存放最近一次的資料</li><li>“：預設暫存器</li><li>+：剪貼簿暫存器</li></ul></blockquote><p>因此將資料放進 + 暫存器等同於將資料放進剪貼簿。</p><hr><h2 id="vim-rc-設定檔"><a href="#vim-rc-設定檔" class="headerlink" title="vim.rc 設定檔"></a>vim.rc 設定檔</h2><p>記錄我目前的設定檔。</p><pre class="line-numbers language-vim"><code class="language-vim"><span class="token keyword">set</span> <span class="token keyword">nu</span><span class="token keyword">set</span> <span class="token builtin">incsearch</span><span class="token keyword">set</span> <span class="token builtin">smartindent</span><span class="token keyword">set</span> <span class="token builtin">cursorline</span><span class="token builtin">syntax</span> <span class="token keyword">on</span>inoremap <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>Esc<span class="token operator">></span>iinoremap <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>Esc<span class="token operator">></span>iinoremap <span class="token string">' '</span>'<span class="token operator">&lt;</span>Esc<span class="token operator">></span>iinoremap <span class="token string">" "</span><span class="token comment" spellcheck="true">"&lt;Esc>i</span>inoremap <span class="token punctuation">{</span><span class="token operator">&lt;</span>CR<span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">&lt;</span>CR<span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">&lt;</span>Esc<span class="token operator">></span>ko<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>set nu</code></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.vixual.net/blog/archives/234" target="_blank" rel="noopener">vi 與 vim 的指令整理</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.zhihu.com/question/19863631" target="_blank" rel="noopener">如何将 Vim 剪贴板里面的东西粘贴到 Vim 之外的地方？</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XV6 啟動流程</title>
      <link href="/starting-xv6/"/>
      <url>/starting-xv6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>BIOS -&gt; boot section -&gt; main -&gt; scheduler 的詳細流程在 <a href="/xv6-1-process/">Ch1</a>、<a href="/xv6-5-scheduler/">Ch5</a>及<a href="/xv6-b-bootloader/">Appendix B</a>，本文強調 CPU0 以外的 CPU 啟動流程及更詳細的 main 解析。</p></blockquote><h2 id="Code-startothers"><a href="#Code-startothers" class="headerlink" title="Code: startothers"></a>Code: startothers</h2><blockquote><p>File: main.c</p></blockquote><ul><li>在 main 初始化一些設備後，會先呼叫 startothers，再呼叫 mpmain 來完成 cpu 的設定及呼叫 scheduler。</li></ul><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>啟動其他 CPU</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">startothers</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">extern</span> uchar _binary_entryother_start<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _binary_entryother_size<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  uchar <span class="token operator">*</span>code<span class="token punctuation">;</span>  <span class="token keyword">struct</span> cpu <span class="token operator">*</span>c<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>stack<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Write entry code to unused memory at 0x7000.</span>  <span class="token comment" spellcheck="true">// The linker has placed the image of entryother.S in</span>  <span class="token comment" spellcheck="true">// _binary_entryother_start.</span>  code <span class="token operator">=</span> <span class="token function">p2v</span><span class="token punctuation">(</span><span class="token number">0x7000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memmove</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> _binary_entryother_start<span class="token punctuation">,</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>_binary_entryother_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>entryother.S 的入口被 linked 到 <code>0x7000</code>，這裡將 code 指向 <code>0x7000</code> 作為 entryother.S 的進入點。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">for</span><span class="token punctuation">(</span>c <span class="token operator">=</span> cpus<span class="token punctuation">;</span> c <span class="token operator">&lt;</span> cpus<span class="token operator">+</span>ncpu<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> cpus<span class="token operator">+</span><span class="token function">cpunum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// We've started already.</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Tell entryother.S what stack to use, where to enter, and what </span>    <span class="token comment" spellcheck="true">// pgdir to use. We cannot use kpgdir yet, because the AP processor</span>    <span class="token comment" spellcheck="true">// is running in low  memory, so we use entrypgdir for the APs too.</span>    stack <span class="token operator">=</span> <span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>code<span class="token number">-4</span><span class="token punctuation">)</span> <span class="token operator">=</span> stack <span class="token operator">+</span> KSTACKSIZE<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>code<span class="token number">-8</span><span class="token punctuation">)</span> <span class="token operator">=</span> mpenter<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>code<span class="token number">-12</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">v2p</span><span class="token punctuation">(</span>entrypgdir<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>為待會的 entryother 建立一個堆疊 …</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">lapicstartap</span><span class="token punctuation">(</span>c<span class="token operator">-></span>id<span class="token punctuation">,</span> <span class="token function">v2p</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>正式的啟動 CPU <code>c</code>，即進入 entryother.S</li><li>entryother.S 做完設定後會呼叫 <code>mpenter()</code>，<code>mpmenter</code> 最後會呼叫 <code>mpmain()</code>。</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">// wait for cpu to finish mpmain()</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token operator">-></span>started <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 <code>mpmain()</code> 會將 <code>cpu-&gt;started</code> 設為 <code>1</code>，CPU0 在 <code>while</code> 迴圈等待 CPU <code>c</code> 啟動完畢，才繼續啟動下一個 CPU。</li></ul><h3 id="lapicstartup"><a href="#lapicstartup" class="headerlink" title="lapicstartup"></a>lapicstartup</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>啟動 lapic</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>apicid</code></th><th><code>addr</code></th></tr></thead><tbody><tr><td>欲啟動的 lapic</td><td>填入的值</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">lapicstartap</span><span class="token punctuation">(</span>uchar apicid<span class="token punctuation">,</span> uint addr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  ushort <span class="token operator">*</span>wrv<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "The BSP must initialize CMOS shutdown code to 0AH</span>  <span class="token comment" spellcheck="true">// and the warm reset vector (DWORD based at 40:67) to point at</span>  <span class="token comment" spellcheck="true">// the AP startup code prior to the [universal startup algorithm]."</span>  <span class="token function">outb</span><span class="token punctuation">(</span>IO_RTC<span class="token punctuation">,</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// offset 0xF is shutdown code</span>  <span class="token function">outb</span><span class="token punctuation">(</span>IO_RTC<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  wrv <span class="token operator">=</span> <span class="token punctuation">(</span>ushort<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">P2V</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span> <span class="token operator">|</span> <span class="token number">0x67</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Warm reset vector</span>  wrv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  wrv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> addr <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "Universal startup algorithm."</span>  <span class="token comment" spellcheck="true">// Send INIT (level-triggered) interrupt to reset other CPU.</span>  <span class="token function">lapicw</span><span class="token punctuation">(</span>ICRHI<span class="token punctuation">,</span> apicid<span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">lapicw</span><span class="token punctuation">(</span>ICRLO<span class="token punctuation">,</span> INIT <span class="token operator">|</span> LEVEL <span class="token operator">|</span> ASSERT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">microdelay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">lapicw</span><span class="token punctuation">(</span>ICRLO<span class="token punctuation">,</span> INIT <span class="token operator">|</span> LEVEL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">microdelay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// should be 10ms, but too slow in Bochs!</span>  <span class="token comment" spellcheck="true">// Send startup IPI (twice!) to enter code.</span>  <span class="token comment" spellcheck="true">// Regular hardware is supposed to only accept a STARTUP</span>  <span class="token comment" spellcheck="true">// when it is in the halted state due to an INIT.  So the second</span>  <span class="token comment" spellcheck="true">// should be ignored, but it is part of the official Intel algorithm.</span>  <span class="token comment" spellcheck="true">// Bochs complains about the second one.  Too bad for Bochs.</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">lapicw</span><span class="token punctuation">(</span>ICRHI<span class="token punctuation">,</span> apicid<span class="token operator">&lt;&lt;</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapicw</span><span class="token punctuation">(</span>ICRLO<span class="token punctuation">,</span> STARTUP <span class="token operator">|</span> <span class="token punctuation">(</span>addr<span class="token operator">>></span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">microdelay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>mpenter</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>完成多核心啟動流程</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">mpenter</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">switchkvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">seginit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">lapicinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mpmain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>mpmain</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>執行多核心任務</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">mpmain</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"cpu%d: starting\n"</span><span class="token punctuation">,</span> cpu<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">idtinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// load idt register</span>  <span class="token function">xchg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu<span class="token operator">-></span>started<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// tell startothers() we're up</span>  <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// start running processes</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Main-解析"><a href="#Main-解析" class="headerlink" title="Main 解析"></a>Main 解析</h2><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">kinit1</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> <span class="token function">P2V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// phys page allocator</span>  <span class="token function">kvmalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// kernel page table</span>  <span class="token function">mpinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// collect info about this machine</span>  <span class="token function">lapicinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seginit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// set up segments</span>  <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"\ncpu%d: starting XV6\n\n"</span><span class="token punctuation">,</span> cpu<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">picinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// interrupt controller</span>  <span class="token function">ioapicinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// another interrupt controller</span>  <span class="token function">consoleinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// I/O devices &amp; their interrupts</span>  <span class="token function">uartinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// serial port</span>  <span class="token function">pinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// process table</span>  <span class="token function">tvinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// trap vectors</span>  <span class="token function">binit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// buffer cache</span>  <span class="token function">fileinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// file table</span>  <span class="token function">iinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// inode cache</span>  <span class="token function">ideinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// disk</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ismp<span class="token punctuation">)</span>    <span class="token function">timerinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// uniprocessor timer</span>  <span class="token function">startothers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// start other processors</span>  <span class="token function">kinit2</span><span class="token punctuation">(</span><span class="token function">P2V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">P2V</span><span class="token punctuation">(</span>PHYSTOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// must come after startothers()</span>  <span class="token function">userinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// first user process</span>  <span class="token comment" spellcheck="true">// Finish setting up this processor in mpmain.</span>  <span class="token function">mpmain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>kinit1()</code> <a href="/xv6-2-mem/#kinit">In ch2</a></li><li><code>kvmalloc()</code> <a href="/xv6-2-mem/#kvmalloc">In Ch2</a></li><li><code>mpinit()</code></li><li><code>lapicinit()</code></li><li><code>seginit()</code></li><li><code>picinit()</code></li><li><code>ioapicinit()</code></li><li><code>consoleinit()</code></li><li><code>uartinit()</code></li><li><code>pinit()</code></li><li><code>tvinit()</code> <a href="/xv6-3-trap/#tvinit">In Ch3</a></li><li><code>binit()</code></li><li><code>fileinit()</code></li><li><code>iinit()</code></li><li><code>ideinit()</code> <a href="/xv6-3-trap/#ideinit">In Ch3</a></li><li><code>timerinit()</code></li><li><code>startothers()</code> <a href="#Code-startothers">Above</a></li><li><code>kinit2()</code> <a href="/xv6-2-mem/#kinit">In ch2</a></li><li><code>userinit()</code> <a href="/xv6-1-process/#userinit">In Ch1</a></li><li><code>mpmain()</code></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> XV6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XV6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>運行 XV6</title>
      <link href="/running-xv6/"/>
      <url>/running-xv6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Makefile-解析"><a href="#Makefile-解析" class="headerlink" title="Makefile 解析"></a>Makefile 解析</h2><pre class="line-numbers language-makefile"><code class="language-makefile">OBJS <span class="token operator">=</span> \    bio.o\    console.o\    exec.o\    file.o\    fs.o\    ide.o\    ioapic.o\    kalloc.o\    kbd.o\    lapic.o\    main.o\    mp.o\    picirq.o\    pipe.o\    proc.o\    spinlock.o\    string.o\    swtch.o\    syscall.o\    sysfile.o\    sysproc.o\    timer.o\    trapasm.o\    trap.o\    uart.o\    vectors.o\<span class="token comment" spellcheck="true"># Cross-compiling (e.g., on Mac OS X)</span>TOOLPREFIX <span class="token operator">=</span> /usr/bin/i386-jos-elf-<span class="token comment" spellcheck="true"># Using native tools (e.g., on X86 Linux)</span><span class="token comment" spellcheck="true"># TOOLPREFIX = </span>CC <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>TOOLPREFIX<span class="token punctuation">)</span>gccAS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>TOOLPREFIX<span class="token punctuation">)</span>gasLD <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>TOOLPREFIX<span class="token punctuation">)</span>ldOBJCOPY <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>TOOLPREFIX<span class="token punctuation">)</span>objcopyOBJDUMP <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>TOOLPREFIX<span class="token punctuation">)</span>objdumpCFLAGS <span class="token operator">=</span> -fno-builtin -O2 -Wall -MD -ggdb -m32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>-fno-builtin</code>：不使用 C 中的內建函數。</li><li><code>-O2</code>：<code>-O</code> 表示最佳化的程度，數字越大越好，但會增加編譯時間。</li><li><code>-Wall</code>：Warm all 的意思，打開所有的警告。</li><li><code>-MD</code>：生成 .d（directory），等同於 <code>-M -MF file</code>。</li></ul><p><code>gcc -M file.c</code><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Linux Makefile 生成 .d 依赖文件及 gcc -M -MF -MP 等相关选项说明](https://blog.csdn.net/QQ1452008/article/details/50855810)">[1]</span></a></sup> 會將 file.c 有 include 的 .h （包含標準函式庫）關聯起來，即輸出為：<br><code>file.o: file.c header.h stdio.h</code><br><code>gcc -M -MF file.c</code> 將 <code>-M</code> 的輸出存入 file.d 裡。<br><strong>註</strong>：<code>-M</code> 會自動帶 <code>-E</code>，如果使用 <code>-MD</code> 替代 <code>-M -MF</code> 時則不會帶 <code>-E</code>。</p><ul><li><code>-ggdb</code>：為 GDB 生成更多的 debug 資訊。 </li><li><code>-m32</code>：生成 32 位元的程式碼。</li></ul><pre class="line-numbers language-makefile"><code class="language-makefile">CFLAGS <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -fno-stack-protector -E -x c /dev/null >/dev/null 2>&amp;1 &amp;&amp; echo -fno-stack-protector<span class="token punctuation">)</span>ASFLAGS <span class="token operator">=</span> -m32<span class="token comment" spellcheck="true"># FreeBSD ld wants ``elf_i386_fbsd''</span>LDFLAGS <span class="token operator">+=</span> -m <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> -V <span class="token operator">|</span> grep elf_i386 2>/dev/null<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">XV6.img</span><span class="token punctuation">:</span> bootblock kernel fs.img    dd if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>XV6.img count<span class="token operator">=</span>10000    dd if<span class="token operator">=</span>bootblock of<span class="token operator">=</span>XV6.img conv<span class="token operator">=</span>notrunc    dd if<span class="token operator">=</span>kernel of<span class="token operator">=</span>XV6.img seek<span class="token operator">=</span>1 conv<span class="token operator">=</span>notrunc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>產生 XV6.img</li><li><code>dd</code> 指令將 <code>if</code>(input file) 複製到 <code>of</code>(output file)</li><li><code>count</code> 限制輸入的大小，單位為 blocks，一個 block 的大小由 <code>ibs=BYTES</code> 宣告（預設為 512）。</li><li><code>notrunc</code> 在輸出檔案時會比對輸入的檔案，只會輸出與輸入檔案不一樣的地方。</li><li><code>seek</code> 會略過數個 blocks 之後再輸出，block 大小由 <code>obs=BTYES</code> 宣告（預設為 512）。</li></ul><p>/dev/zero 為一個特殊檔案，讀取時會提供無限的空字元，44 行為生成一個大小為 10000（個 block）的空白檔案 XV6.img（或是把 XV6.img 的前 10000 個 block 清除。）</p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">bootblock</span><span class="token punctuation">:</span> bootasm.S bootmain.c    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -O -nostdinc -I. -c bootmain.c    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -nostdinc -I. -c bootasm.S    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -N -e start -Ttext 0x7C00 -o bootblock.o bootasm.o bootmain.o    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S bootblock.o > bootblock.asm    <span class="token variable">$</span><span class="token punctuation">(</span>OBJCOPY<span class="token punctuation">)</span> -S -O binary bootblock.o bootblock    ./sign.pl bootblock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建立 bootblock</li></ul><ul><li>GCC</li></ul><table><thead><tr><th><code>-nostdinc</code></th><th><code>-I.</code></th><th><code>-c</code></th></tr></thead><tbody><tr><td>不要從根目錄開始搜尋檔案，要從 <code>-I</code> 指定的目錄開始</td><td>指定現在的資料夾</td><td>對後面的檔案編譯（或組譯），但不做連接</td></tr></tbody></table><ul><li>LD</li></ul><table><thead><tr><th><code>-N</code></th><th><code>-e</code></th><th><code>-Ttext</code></th><th><code>-o</code></th></tr></thead><tbody><tr><td>使用後面的名稱（start）作為入口</td><td>使用後面的名稱（start）作為入口</td><td>將後面的位置作為輸出文件的起始位置（須為 16 進位）</td><td>用來指定 ld 生成的名稱</td></tr></tbody></table><ul><li>OBJDUMP</li></ul><table><thead><tr><th><code>-S</code></th></tr></thead><tbody><tr><td>反組譯目標文件</td></tr></tbody></table><ul><li>OBJCOPY</li></ul><table><thead><tr><th><code>-S</code></th><th><code>-O binary</code></th></tr></thead><tbody><tr><td>去除所有符號資訊</td><td>輸出為二進位的文件</td></tr></tbody></table><p>反組譯的用意是為了 debug</p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">bootother</span><span class="token punctuation">:</span> bootother.S    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -nostdinc -I. -c bootother.S    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -N -e start -Ttext 0x7000 -o bootother.out bootother.o    <span class="token variable">$</span><span class="token punctuation">(</span>OBJCOPY<span class="token punctuation">)</span> -S -O binary bootother.out bootother    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S bootother.o > bootother.asm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>啟動其他的 CPU</li></ul><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">initcode</span><span class="token punctuation">:</span> initcode.S    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -nostdinc -I. -c initcode.S    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -N -e start -Ttext 0 -o initcode.out initcode.o    <span class="token variable">$</span><span class="token punctuation">(</span>OBJCOPY<span class="token punctuation">)</span> -S -O binary initcode.out initcode    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S initcode.o > initcode.asm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建立 initcode</li></ul><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">kernel</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> bootother initcode    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -Ttext 0x100000 -e main -o kernel <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> -b binary initcode bootother    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S kernel > kernel.asm    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -t kernel <span class="token operator">|</span> sed <span class="token string">'1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d'</span> > kernel.sym<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建立 kernel</li></ul><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">tags</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> bootother.S _init    etags *.S *.c<span class="token symbol">vectors.S</span><span class="token punctuation">:</span> vectors.pl    perl vectors.pl > vectors.S<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 vectors.pl 生成 vectors.S</li></ul><pre class="line-numbers language-makefile"><code class="language-makefile">ULIB <span class="token operator">=</span> ulib.o usys.o printf.o umalloc.o<span class="token symbol">_%</span><span class="token punctuation">:</span> %.o <span class="token variable">$</span><span class="token punctuation">(</span>ULIB<span class="token punctuation">)</span>    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -N -e main -Ttext 0 -o <span class="token variable">$@</span> <span class="token variable">$^</span>    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S <span class="token variable">$@</span> > <span class="token variable">$*.asm</span>    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -t <span class="token variable">$@</span> <span class="token operator">|</span> sed <span class="token string">'1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d'</span> > <span class="token variable">$*.sym</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>特殊符號</th><th></th></tr></thead><tbody><tr><td>%</td><td>萬用字元，如 <code>_a</code> 需對應 <code>a.o</code></td></tr><tr><td>$@</td><td>代表工作目標，即 <code>_%</code></td></tr><tr><td>$^</td><td>代表所有必要條件，即 <code>%.o $(ULIB)</code></td></tr><tr><td>$*</td><td>代表第一個必要條件，但不包含副檔名</td></tr></tbody></table><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">_forktest</span><span class="token punctuation">:</span> forktest.o <span class="token variable">$</span><span class="token punctuation">(</span>ULIB<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># forktest has less library code linked in - needs to be small</span>    <span class="token comment" spellcheck="true"># in order to be able to max out the proc table.</span>    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -N -e main -Ttext 0 -o _forktest forktest.o ulib.o usys.o    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S _forktest > forktest.asm<span class="token symbol">mkfs</span><span class="token punctuation">:</span> mkfs.c fs.h    gcc <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -Wall -o mkfs mkfs.cUPROGS<span class="token operator">=</span>\    _cat\    _echo\    _forktest\    _grep\    _init\    _kill\    _ln\    _ls\    _mkdir\    _rm\    _sh\    _usertests\    _wc\    _zombie\<span class="token symbol">fs.img</span><span class="token punctuation">:</span> mkfs README <span class="token variable">$</span><span class="token punctuation">(</span>UPROGS<span class="token punctuation">)</span>    ./mkfs fs.img README <span class="token variable">$</span><span class="token punctuation">(</span>UPROGS<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>fs 指的是 file system</li></ul><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token keyword">-include</span> *.d<span class="token symbol">clean</span><span class="token punctuation">:</span>     rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \    *.o *.d *.asm *.sym vectors.S parport.out \    bootblock kernel XV6.img fs.img mkfs \    <span class="token variable">$</span><span class="token punctuation">(</span>UPROGS<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># make a printout</span>FILES <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> grep -v <span class="token string">'^\#'</span> runoff.list<span class="token punctuation">)</span>PRINT <span class="token operator">=</span> runoff.list <span class="token variable">$</span><span class="token punctuation">(</span>FILES<span class="token punctuation">)</span><span class="token symbol">XV6.pdf</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>PRINT<span class="token punctuation">)</span>    ./runoff<span class="token symbol">print</span><span class="token punctuation">:</span> XV6.pdf<span class="token comment" spellcheck="true"># run in emulators</span><span class="token symbol">bochs </span><span class="token punctuation">:</span> fs.img XV6.img    if [ ! -e .bochsrc ]<span class="token punctuation">;</span> then ln -s dot-bochsrc .bochsrc<span class="token punctuation">;</span> fi    bochs -q<span class="token symbol">qemu</span><span class="token punctuation">:</span> fs.img XV6.img    qemu -parallel stdio -hdb fs.img XV6.img<span class="token symbol">qemutty</span><span class="token punctuation">:</span> fs.img XV6.img    qemu -nographic -smp 2 -hdb fs.img XV6.img<span class="token comment" spellcheck="true"># CUT HERE</span><span class="token comment" spellcheck="true"># prepare dist for students</span><span class="token comment" spellcheck="true"># after running make dist, probably want to</span><span class="token comment" spellcheck="true"># rename it to rev0 or rev1 or so on and then</span><span class="token comment" spellcheck="true"># check in that version.</span>EXTRA<span class="token operator">=</span>\    mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c\    kill.c ln.c ls.c mkdir.c rm.c usertests.c wc.c zombie.c\    printf.c umalloc.c \    README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\<span class="token symbol">dist</span><span class="token punctuation">:</span>    rm -rf dist    mkdir dist    for i in <span class="token variable">$</span><span class="token punctuation">(</span>FILES<span class="token punctuation">)</span><span class="token punctuation">;</span> \    do \        grep -v PAGEBREAK <span class="token variable">$$i</span> >dist/<span class="token variable">$$i;</span> \    done    sed <span class="token string">'/CUT HERE/,$$d'</span> Makefile >dist/Makefile    echo >dist/runoff.spec    cp <span class="token variable">$</span><span class="token punctuation">(</span>EXTRA<span class="token punctuation">)</span> dist<span class="token symbol">dist-test</span><span class="token punctuation">:</span>    rm -rf dist    make dist    rm -rf dist-test    mkdir dist-test    cp dist/* dist-test    cd dist-test<span class="token punctuation">;</span> ../m print    cd dist-test<span class="token punctuation">;</span> ../m bochs <span class="token operator">|</span><span class="token operator">|</span> true    cd dist-test<span class="token punctuation">;</span> ../m qemu<span class="token comment" spellcheck="true"># update this rule (change rev1) when it is time to</span><span class="token comment" spellcheck="true"># make a new revision.</span><span class="token symbol">tar</span><span class="token punctuation">:</span>    rm -rf /tmp/XV6    mkdir -p /tmp/XV6    cp dist/* /tmp/XV6    <span class="token punctuation">(</span>cd /tmp<span class="token punctuation">;</span> tar cf - XV6<span class="token punctuation">)</span> <span class="token operator">|</span> gzip >XV6-rev2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h2><p>我本來是打算在 MacOX 的環境下 make XV6 的，但是如果要 make 的話需要有 <code>i386-jos-elf</code> 的相關工具，需另外安裝（<a href="https://pdos.csail.mit.edu/6.828/2016/tools.html" target="_blank" rel="noopener">安裝方法</a>）。由於我一直沒辦法安裝，最後只好裝 ubuntu 來 make。</p><ul><li>在主目錄下輸入 <code>make</code> 指令</li><li>接著會多出兩個檔案：XV6.img、fs.img，我們使用 qemu 來運行 XV6。</li></ul><hr><h2 id="QEMU"><a href="#QEMU" class="headerlink" title="QEMU"></a>QEMU</h2><ul><li>輸入以下代碼<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[【學習 XV6 】在 Mac OSX 下運行 XV6](http://leenjewel.github.io/blog/2014/07/24/%5B%28xue-xi-xv6-%29%5D-zai-mac-osx-xia-yun-xing-xv6/)">[2]</span></a></sup></li></ul><pre class="line-numbers language-shell"><code class="language-shell">qemu-system-i386 -serial mon:stdio -hdb fs.img XV6.img -smp 1 -m 512<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.imgur.com/Fz4WKO1.png" alt="QEMU" title="Running XV6 in QEMU"></p><p>註：make 好了以後，在 MacOS 的環境下使用 QEMU 模擬器即可運行。</p><hr><h2 id="Code-Kernel-ld"><a href="#Code-Kernel-ld" class="headerlink" title="Code: Kernel.ld"></a>Code: Kernel.ld</h2><pre class="line-numbers language-armasm"><code class="language-armasm">/* Simple linker script for the JOS kernel.   See the GNU ld 'info' manual ("info ld") to learn the syntax. */OUTPUT_FORMAT("elf32-i386", "elf32-i386", "elf32-i386")OUTPUT_ARCH(i386)ENTRY(_start)SECTIONS{    /* Link the kernel at this address: "." means the current address */        /* Must be equal to KERNLINK */    . = 0x80100000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定記憶體位置到 <code>0x8010000</code>（虛擬地址，分頁硬體會映射至實體位置 <code>0x0010000</code>）</li><li><em>bootmain.c</em> 將 ELF 指標指向 <code>0x100000</code> 接著將 kernel 讀入。</li></ul><p><code>`</code>armasm<br>    .text : AT(0x100000) {<br>        <em>(.text .stub .text.</em> .gnu.linkonce.t.*)<br>    }</p><pre><code>PROVIDE(etext = .);    /* Define the 'etext' symbol to this value */.rodata : {    *(.rodata .rodata.* .gnu.linkonce.r.*)}/* Include debugging information in kernel memory */.stab : {    PROVIDE(__STAB_BEGIN__ = .);    *(.stab);    PROVIDE(__STAB_END__ = .);    BYTE(0)        /* Force the linker to allocate space               for this section */}.stabstr : {    PROVIDE(__STABSTR_BEGIN__ = .);    *(.stabstr);    PROVIDE(__STABSTR_END__ = .);    BYTE(0)        /* Force the linker to allocate space               for this section */}/* Adjust the address for the data segment to the next page */. = ALIGN(0x1000);/* Conventionally, Unix linkers provide pseudo-symbols * etext, edata, and end, at the end of the text, data, and bss. * For the kernel mapping, we need the address at the beginning * of the data section, but that's not one of the conventional * symbols, because the convention started before there was a * read-only rodata section between text and data. */PROVIDE(data = .);/* The data segment */.data : {    *(.data)}PROVIDE(edata = .);.bss : {    *(.bss)}PROVIDE(end = .);/DISCARD/ : {    *(.eh_frame .note.GNU-stack)}</code></pre><p>}<br><code>`</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/QQ1452008/article/details/50855810" target="_blank" rel="noopener">Linux Makefile 生成 .d 依赖文件及 gcc -M -MF -MP 等相关选项说明</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://leenjewel.github.io/blog/2014/07/24/%5B%28xue-xi-xv6-%29%5D-zai-mac-osx-xia-yun-xing-xv6/" target="_blank" rel="noopener">【學習 XV6 】在 Mac OSX 下運行 XV6</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> XV6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XV6 </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XV6 Appendix B The Boot loader</title>
      <link href="/xv6-b-bootloader/"/>
      <url>/xv6-b-bootloader/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li>x86 開機時，會先呼叫位於主機板上的 BIOS。</li><li>BIOS 的工作：準備硬體，將控制權轉給 OS (XV6)。</li><li>準確的說，控制權轉給 boot sector，位於開機碟的第一個磁碟扇區(512 byte)。</li><li>Boot sector 包含 boot loader—負責將 kernel 載入記憶體。</li><li>BIOS 將 boot sector 寫入 0x7c00 的位置，並跳至該位址(透過設定暫存器 %ip)。</li><li>XV6 boot loader 包含兩個檔案：<em>bootasm.s</em>、<em>bootmain.c</em>。</li></ul><h2 id="Code-Assembly-bootstrap"><a href="#Code-Assembly-bootstrap" class="headerlink" title="Code: Assembly bootstrap"></a>Code: Assembly bootstrap</h2><h3 id="File-bootasm-s"><a href="#File-bootasm-s" class="headerlink" title="File: bootasm.s"></a>File: bootasm.s</h3><pre class="line-numbers language-x86asm"><code class="language-x86asm">#include "asm.h"#include "memlayout.h"#include "mmu.h"# Start the first CPU: switch to 32-bit protected mode, jump into C.# The BIOS loads this code from the first sector of the hard disk into# memory at physical address 0x7c00 and starts executing in real mode# with %cs=0 %ip=7c00.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一行指令：<code>cli</code>，禁止處理器中斷。</li><li>硬體可以透過中斷觸發中斷處理，進而操作系統的功能。BIOS 為了初始化硬體，可能設置了自己的中斷處理。但控制權已經給 boot loader 了，所以現在處理中斷是不安全的；當 XV6 準備完成後會重新允許中斷。</li></ul><pre class="line-numbers language-x86asm"><code class="language-x86asm">.code16                       # Assemble for 16-bit mode.globl startstart:  cli                         # BIOS enabled interrupts; disable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>處理器在模擬 Intel 8088 的 <strong>real mode</strong> 狀態下，有 8 個 16 位元的通用暫存器，但處理器傳送的是20位元的地址給記憶體；因此多出來的四個位元由段暫存器(<code>%cs</code>, <code>%ds</code>, <code>%es</code>, <code>%ss</code>)提供。</li><li><code>%cs</code> 取指令用</li><li><code>%ds</code> 讀寫資料用</li><li><code>%ss</code> 讀寫堆疊用</li><li>BIOS 完成工作後 <code>%ds</code>, <code>%es</code>, <code>%ss</code> 是未知的，所以將其設為 0</li></ul><pre class="line-numbers language-x86asm"><code class="language-x86asm">  # Zero data segment registers DS, ES, and SS.  xorw    %ax,%ax             # Set %ax to zero  movw    %ax,%ds             # -> Data Segment  movw    %ax,%es             # -> Extra Segment  movw    %ax,%ss             # -> Stack Segment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>XV6 假設 x86 的指令是使用虛擬地址，但實際上使用的是邏輯地址。</li><li>一個邏輯地址包含一個段選擇器及一個差值，有時表示為 segment:offset。</li><li>更多時候，段是固定的，所以程式只會使用差值。</li><li>分段硬體負責將邏輯地址翻譯成線性地址。</li><li>如果分頁硬體是啟用的，它會把線性地址轉成物理地址；若未啟用，處理器會把線性地址當作物理地址。</li></ul><p><img src="https://i.imgur.com/WqLrdy2.png" alt="logic address" title="The relationship between logical, linear, and physical addresses."></p><ul><li>一個 segment:offset 可能產生 21-bit 的物理地址，但在模擬 Intel 8088 下只能使用 20 bits 的記憶體位置，IBM 提出了一個方法：如果鍵盤控制器輸出端的第二位高於第一位，則第 21 個 bit 可以正常使用，反之則歸零。</li><li>boot loader 用 I/O 指令控制鍵盤控制器端 0x64、0x60 來確保第 21 個 bit 正常運作。</li></ul><pre class="line-numbers language-x86asm"><code class="language-x86asm">  # Physical address line A20 is tied to zero so that the first PCs   # with 2 MB would run software that assumed 1 MB.  Undo that.seta20.1:  inb     $0x64,%al               # Wait for not busy  testb   $0x2,%al  jnz     seta20.1  movb    $0xd1,%al               # 0xd1 -> port 0x64  outb    %al,$0x64seta20.2:  inb     $0x64,%al               # Wait for not busy  testb   $0x2,%al  jnz     seta20.2  movb    $0xdf,%al               # 0xdf -> port 0x60  outb    %al,$0x60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>由於 real mode 只有 16-bit 的暫存器，導致一個程式如果要使用超過 65536 bytes 的記憶體會很困難，也不可能使用超過 1MB 的記憶體。</li><li>x86 從 80286 開始有 <strong>protected mode</strong>，允許物理位置能擁有更多 bits，從 80386 後有 32-bit 模式。</li><li>Boot loader 接著開啟 protected mode 和 32-bit 模式。</li><li>在 protected mode 下的段暫存器保存著段描述符表的索引。</li></ul><p><img src="https://i.imgur.com/vGzE58G.png" alt="segment" title="Segments in protected mode."></p><ul><li>Limits 代表最大的虛擬地址</li><li>段描述符表包含一個權限(被 protected mode 保護)，kernel 可以使用這個權限確保一個程式只會使用自己的記憶體。</li><li>XV6 幾乎不用段，取而代之的是分頁。</li><li>Boot loader 設定段描述符表 gdt，每一段的基址為 0，且 limit 為 4GB (2^32)。</li><li>Flag 使程式碼會在 32-bit 中執行。</li><li>由上述設定能確保當 boot loader 進入 protected mode 時，邏輯地址映射到物理地址會是 1-1 的。</li><li><code>lgdt</code> 指令將 GDT 暫存器(指向 gdt) 載入 gdtdesc 的值。</li></ul><p id="gdt"></p><blockquote><p>補充：在創建 GDT 的時候，第一項須為空(規定)，接著我們為此臨時的 GDT 設立 code 及 data 段。</p></blockquote><pre class="line-numbers language-x86asm"><code class="language-x86asm"># Line 78 in bootasm.S# Bootstrap GDT.p2align 2                                   # force 4 byte alignmentgdt:     SEG_NULLASM                             # null seg     SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)   # code seg     SEG_ASM(STA_W, 0x0, 0xffffffff)         # data seggdtdesc:     .word   (gdtdesc - gdt - 1)             # sizeof(gdt) - 1     .long   gdt                             # address gdt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-x86asm"><code class="language-x86asm">  # Switch from real to protected mode.  Use a bootstrap GDT that makes  # virtual addresses map directly to physical addresses so that the  # effective memory map doesn't change during the transition.  lgdt    gdtdesc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Boot loader 將 <code>%cr0</code> 中的 <code>CRO_PE</code> 設為 1，來啟用 protected mode。</li><li>啟用 protceted mode 不會立即改變處理器轉譯邏輯地址的過程；只有當段暫存器載入了新的值，處理器讀取 GDT 改變其內部的斷設定。</li></ul><pre class="line-numbers language-x86asm"><code class="language-x86asm">  movl    %cr0, %eax  orl     $CR0_PE, %eax  movl    %eax, %cr0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>ljmp</code> 指令語法：<code>ljmp segment offset</code>，此時段暫存器為 <code>SEG_KCODE&lt;&lt;3</code>，即 8 (<code>SEG_KCODE == 1</code>，定義於<code>mmu.h</code>)</li><li><code>ljmp</code> 指令跳至 start32 執行。</li></ul><pre class="line-numbers language-x86asm"><code class="language-x86asm">//PAGEBREAK!  # Complete transition to 32-bit protected mode by using long jmp  # to reload %cs and %eip.  The segment descriptors are set up with no  # translation, so that the mapping is still the identity mapping.  ljmp    $(SEG_KCODE<<3), $start32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>進入 32 位元後的第一個動作：用<code>SEG_KDATA</code>初始化數據段暫存器</li></ul><pre class="line-numbers language-x86asm"><code class="language-x86asm">.code32  # Tell assembler to generate 32-bit code now.start32:  # Set up the protected-mode data segment registers  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector  movw    %ax, %ds                # -> DS: Data Segment  movw    %ax, %es                # -> ES: Extra Segment  movw    %ax, %ss                # -> SS: Stack Segment  movw    $0, %ax                 # Zero segments not ready for use  movw    %ax, %fs                # -> FS  movw    %ax, %gs                # -> GS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後建立一個 stack，跳至 <em>bootmain.c</em>。</li><li>記憶體 0xa0000 至 0x100000 為設備區，XV6 kernel 放在 0x100000。</li><li>Boot loader 位於 0x7c00 至 0x7e00 (512 bytes)，所以其他位置都能拿來建立堆疊；這裡選擇 0x7c00 當作 top (<code>$start</code>)，堆疊向下延伸，直到 0x0000。</li></ul><pre class="line-numbers language-x86asm"><code class="language-x86asm">  # Set up the stack pointer and call into C.  movl    $start, %esp  call    bootmain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果出錯了，會向 0x8a00 端輸出一些字。</li><li>實際上沒有設備連接到 0x8a00。</li><li>如果使用模擬器，boot loader 會把控制權還給模擬器。</li></ul><blockquote><p>真正的 boot loader 會印出一些錯誤訊息。</p></blockquote><pre class="line-numbers language-x86asm"><code class="language-x86asm">  # If bootmain returns (it shouldnt), trigger a Bochs  # breakpoint if running under Bochs, then loop.  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00  movw    %ax, %dx  outw    %ax, %dx  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00  outw    %ax, %dx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著進入無限迴圈</li></ul><pre class="line-numbers language-x86asm"><code class="language-x86asm">spin:  jmp     spin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="Code-C-bootstrap"><a href="#Code-C-bootstrap" class="headerlink" title="Code: C bootstrap"></a>Code: C bootstrap</h2><h3 id="File-bootmain-c"><a href="#File-bootmain-c" class="headerlink" title="File: bootmain.c"></a>File: bootmain.c</h3><ul><li><em>bootmain</em> 的工作：載入並執行 kernel。</li><li>Kernel 為 ELF 格式的二進位檔。</li><li>ELF(Executable and Linking Format) ，為 UNIX 中的目錄檔格式。</li></ul><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>開機程序（執行 kernel)</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Boot loader.</span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">// Part of the boot sector, along with bootasm.S, which calls bootmain().</span><span class="token comment" spellcheck="true">// bootasm.S has put the processor into protected 32-bit mode.</span><span class="token comment" spellcheck="true">// bootmain() loads an ELF kernel image from the disk starting at</span><span class="token comment" spellcheck="true">// sector 1 and then jumps to the kernel entry routine.</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"types.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"elf.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"x86.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"memlayout.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> SECTSIZE  512</span><span class="token keyword">void</span> <span class="token function">readseg</span><span class="token punctuation">(</span>uchar<span class="token operator">*</span><span class="token punctuation">,</span> uint<span class="token punctuation">,</span> uint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">bootmain</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> elfhdr <span class="token operator">*</span>elf<span class="token punctuation">;</span>  <span class="token keyword">struct</span> proghdr <span class="token operator">*</span>ph<span class="token punctuation">,</span> <span class="token operator">*</span>eph<span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  uchar<span class="token operator">*</span> pa<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>為了存取 ELF 開頭，<em>bootmain</em> 載入 ELF 文件的前 4096 bytes，並拷貝到 010000 中。</li></ul><pre class="line-numbers language-c"><code class="language-c">  elf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> elfhdr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x10000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// scratch space</span>  <span class="token comment" spellcheck="true">// Read 1st page off disk</span>  <span class="token function">readseg</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uchar<span class="token operator">*</span><span class="token punctuation">)</span>elf<span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著確認是否為 ELF 文件。</li></ul><blockquote><p>正常情況下 <em>bootmain</em> 不會<code>return</code>，這裡<code>return</code>會跳回 <em>bootasm.S</em> 中，由 <em>bootasm.S</em> 來處理此錯誤。</p></blockquote><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Is this an ELF executable?</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>elf<span class="token operator">-></span>magic <span class="token operator">!=</span> ELF_MAGIC<span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// let bootasm.S handle error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><em>bootmain</em> 從 ELF 開頭之後的 off bytes 讀取內容，並存入 paddr 中(呼叫<code>readseg</code>)。</li><li>呼叫<code>stosb</code>將段的剩餘部分設 0</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Load each program segment (ignores ph flags).</span>  ph <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> proghdr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uchar<span class="token operator">*</span><span class="token punctuation">)</span>elf <span class="token operator">+</span> elf<span class="token operator">-></span>phoff<span class="token punctuation">)</span><span class="token punctuation">;</span>  eph <span class="token operator">=</span> ph <span class="token operator">+</span> elf<span class="token operator">-></span>phnum<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> ph <span class="token operator">&lt;</span> eph<span class="token punctuation">;</span> ph<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pa <span class="token operator">=</span> <span class="token punctuation">(</span>uchar<span class="token operator">*</span><span class="token punctuation">)</span>ph<span class="token operator">-></span>paddr<span class="token punctuation">;</span>    <span class="token function">readseg</span><span class="token punctuation">(</span>pa<span class="token punctuation">,</span> ph<span class="token operator">-></span>filesz<span class="token punctuation">,</span> ph<span class="token operator">-></span>off<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ph<span class="token operator">-></span>memsz <span class="token operator">></span> ph<span class="token operator">-></span>filesz<span class="token punctuation">)</span>      <span class="token function">stosb</span><span class="token punctuation">(</span>pa <span class="token operator">+</span> ph<span class="token operator">-></span>filesz<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ph<span class="token operator">-></span>memsz <span class="token operator">-</span> ph<span class="token operator">-></span>filesz<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Boot loader 最後一項工作：呼叫 kernel 的進入指令，即 kernel 第一條執行指令的地址(0x10000c)。</li><li><em>entry.S</em> 中定義的<code>_start</code>即為 ELF 入口。</li><li>XV6 虛擬記憶體尚未建立，因此 entry 為物理地址。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Call the entry point from the ELF header.</span>  <span class="token comment" spellcheck="true">// Does not return!</span>  entry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>elf<span class="token operator">-></span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">entry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函數指標</strong>的補充<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[指標函數和函數指標有什麼區別](http://bluelove1968.pixnet.net/blog/post/222285883-%E6%8C%87%E6%A8%99%E5%87%BD%E6%95%B8%E5%92%8C%E5%87%BD%E6%95%B8%E6%8C%87%E6%A8%99%E6%9C%89%E4%BB%80%E9%BA%BC%E5%8D%80%E5%88%A5)">[1]</span></a></sup>：<br><br>上述用一個 <code>void (*entry)(void)</code> 指標即為一個函數指標，此指標指向一個函數，於上述 42 行將此指標指向 <code>elf-&gt;entry</code>，此動作將 <code>entry</code> 指標指向一個函數的進入點位置（<code>elf-&gt;entry</code>）。<br>此時呼叫 <code>entry()</code> 會進入此指標位置，並當作一個副函式執行；因此執行完上述程式碼會進入 <em>entry.S</em>，並執行其中的程式碼。</p><hr><p><i class="fa fa-code"></i> Code: <code>waitdisk</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>等待磁碟</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">waitdisk</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Wait for disk ready.</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">inb</span><span class="token punctuation">(</span><span class="token number">0x1F7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xC0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0x40</span><span class="token punctuation">)</span>    <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>readsect</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>讀取一個磁碟區</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*dst</code></th><th><code>offset</code></th></tr></thead><tbody><tr><td>目標磁碟</td><td>目標磁碟區</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Read a single sector at offset into dst.</span><span class="token keyword">void</span><span class="token function">readsect</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>dst<span class="token punctuation">,</span> uint offset<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Issue command.</span>  <span class="token function">waitdisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// count = 1</span>  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F3</span><span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F4</span><span class="token punctuation">,</span> offset <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F5</span><span class="token punctuation">,</span> offset <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F6</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>offset <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0xE0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1F7</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// cmd 0x20 - read sectors</span>  <span class="token comment" spellcheck="true">// Read data.</span>  <span class="token function">waitdisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">insl</span><span class="token punctuation">(</span><span class="token number">0x1F0</span><span class="token punctuation">,</span> dst<span class="token punctuation">,</span> SECTSIZE<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>readseg</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>讀取一段磁碟資料</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*pa</code></th><th>`count</th><th><code>offset</code></th></tr></thead><tbody><tr><td>目標位址</td><td>數量</td><td>目標磁碟區</td></tr></tbody></table><p><code>`</code>c<br>// Read ‘count’ bytes at ‘offset’ from kernel into physical address ‘pa’.<br>// Might copy more than asked.<br>void<br>readseg(uchar<em> pa, uint count, uint offset)<br>{<br>  uchar</em> epa;</p><p>  epa = pa + count;</p><p>  // Round down to sector boundary.<br>  pa -= offset % SECTSIZE;</p><p>  // Translate from bytes to sectors; kernel starts at sector 1.<br>  offset = (offset / SECTSIZE) + 1;</p><p>  // If this is too slow, we could read lots of sectors at a time.<br>  // We’d write more to memory than asked, but it doesn’t matter –<br>  // we load in increasing order.<br>  for(; pa &lt; epa; pa += SECTSIZE, offset++)<br>    readsect(pa, offset);<br>}<br><code>`</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://bluelove1968.pixnet.net/blog/post/222285883-%E6%8C%87%E6%A8%99%E5%87%BD%E6%95%B8%E5%92%8C%E5%87%BD%E6%95%B8%E6%8C%87%E6%A8%99%E6%9C%89%E4%BB%80%E9%BA%BC%E5%8D%80%E5%88%A5" target="_blank" rel="noopener">指標函數和函數指標有什麼區別</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> XV6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XV6 </tag>
            
            <tag> 函數指標 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XV6 Appendix A PC 硬體</title>
      <link href="/xv6-a-headware/"/>
      <url>/xv6-a-headware/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="通用暫存器"><a href="#通用暫存器" class="headerlink" title="通用暫存器"></a>通用暫存器</h2><table><thead><tr><th>Name</th><th>Function</th></tr></thead><tbody><tr><td><code>%eax</code></td><td>Accumulator 累加器</td></tr><tr><td><code>%ebx</code></td><td>Based 基址暫存器</td></tr><tr><td><code>%ecx</code></td><td>Counter 計數器</td></tr><tr><td><code>%edx</code></td><td>Data 數據暫存器</td></tr><tr><td><code>%edi</code></td><td>Destination Index 目的地址指針暫存器</td></tr><tr><td><code>%esi</code></td><td>Source Index 源地址指針暫存器</td></tr><tr><td><code>%ebp</code></td><td>Based 基址指針暫存器</td></tr><tr><td><code>%esp</code></td><td>Stack 堆疊指針暫存器</td></tr></tbody></table><ul><li><strong>程式計數器</strong> <code>%eip</code>：Instruction Pointer 指令指針暫存器 </li></ul><p><code>e</code> 指的是 extended，為 16 位元暫存器的 32 位元擴展。<br>同時 <code>%ax</code> 為 <code>%eax</code> 的低位，以此類推；修改任意一個都會影響另一個。<br>另外，前四個暫存器有另一套低位別名：<code>%al</code>、<code>%ah</code>…etc，低八位為 <code>%al</code>，高八位為 <code>%ah</code>。</p><p><img src="https://i.imgur.com/biz7b4q.png" alt="eax" title="Layout of eax."></p><hr><h2 id="控制暫存器"><a href="#控制暫存器" class="headerlink" title="控制暫存器"></a>控制暫存器</h2><table><thead><tr><th>Name</th><th>Function</th></tr></thead><tbody><tr><td><code>%cr0</code></td><td>包含了兩個標誌：</td></tr><tr><td></td><td>0 位（PE）用於啟動 <strong>protected mode</strong>，若 PE = 1，則啟動 protected mode，為 0 則在 <strong>real mode</strong> 下運行。</td></tr><tr><td></td><td>31 位（PG）為分頁允許位，用來表示分頁硬體是否允許作業</td></tr><tr><td><code>%cr1</code></td><td>保留</td></tr><tr><td><code>%cr2</code></td><td>保存最後一次出現夜故障時的32位線性地址</td></tr><tr><td><code>%cr3</code></td><td>保存頁目錄表的物理地址</td></tr></tbody></table><p><img src="https://i.imgur.com/LjEa8lY.png" alt="cr" title="Layout of CR."></p><hr><h2 id="段暫存器"><a href="#段暫存器" class="headerlink" title="段暫存器"></a>段暫存器</h2><table><thead><tr><th>Name</th><th>Function</th><th>Name</th><th>Function</th></tr></thead><tbody><tr><td><code>%cs</code></td><td>Code Segment</td><td><code>%es</code></td><td>extra Segment</td></tr><tr><td><code>%ds</code></td><td>Data Segment</td><td><code>%fs</code></td><td>extra Segment</td></tr><tr><td><code>%fs</code></td><td>Stack Segment</td><td><code>%gs</code></td><td>extra Segment</td></tr></tbody></table><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><code>%gdtr</code> 全域段描述符表、<code>%ldtr</code> 區域段描述符表<br>（參考<a href="/xv6-b-bootloader/#gdt">Appendix B</a>)</li><li><p><code>%eflags</code> <strong>標誌暫存器</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[X86 彙編/X86 架構](https://zh.wikibooks.org/zh-tw/X86_汇编/X86_架构#16-位通用暂存器_(通存器_GPR)">[1]</span></a></sup></p><p>  <img src="https://i.imgur.com/tfPZm5w.png" alt="eflags" title="Layout of eflags."></p><ul><li>灰色為保留位，值不變<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[x86—EFLAGS寄存器详解](https://blog.csdn.net/jn1158359135/article/details/7761011)">[2]</span></a></sup></li></ul></li></ul><table><thead><tr><th>Name</th><th>Function</th><th>Name</th><th>Function</th></tr></thead><tbody><tr><td>CF</td><td>Carry Flag</td><td>IOPL</td><td>I/O Privilege Level field</td></tr><tr><td>PF</td><td>Parity Flag</td><td>NT</td><td>Nested Task flag</td></tr><tr><td>AF</td><td>Auxiliary Carry Flag</td><td>RF</td><td>Resume Flag</td></tr><tr><td>ZF</td><td>Zero Flag</td><td>VM</td><td>Virtual-8086 Mode Flag</td></tr><tr><td>SF</td><td>Sign Flag</td><td>AC</td><td>Alignment Check Flag</td></tr><tr><td>TF</td><td>Trap Flag</td><td>VIF</td><td>Virtual Interrupt Flag</td></tr><tr><td>IF</td><td>Interrupt Enable Flag</td><td>VIP</td><td>Virtual Interrupt Pending flag</td></tr><tr><td>DF</td><td>Direction Flag</td><td>ID</td><td>Identification Flag</td></tr><tr><td>OF</td><td>Overflow Flag</td></tr></tbody></table><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.wikibooks.org/zh-tw/X86_汇编/X86_架构#16-位通用暂存器_(通存器_GPR" target="_blank" rel="noopener">X86 彙編/X86 架構</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/jn1158359135/article/details/7761011" target="_blank" rel="noopener">x86—EFLAGS寄存器详解</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> XV6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XV6 </tag>
            
            <tag> 暫存器 </tag>
            
            <tag> x86 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XV6 Ch6 檔案系統</title>
      <link href="/xv6-6-fs/"/>
      <url>/xv6-6-fs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>本文沒有按照 XV6 官方文本的順序介紹</p></blockquote><h2 id="概觀"><a href="#概觀" class="headerlink" title="概觀"></a>概觀</h2><ul><li>XV6 的檔案系統分為 6 層，本文將從上到下介紹。<br><img src="https://i.imgur.com/yTmir5p.png" alt="" title="Layers of the XV6 file system"></li></ul><hr><h2 id="檔案描述符"><a href="#檔案描述符" class="headerlink" title="檔案描述符"></a>檔案描述符</h2><blockquote><p>File: file.c</p></blockquote><ul><li>UNIX 大部分的資源都是一個文件，而此統一性由檔案描述符實現。</li><li>每個 process 都有一個表記錄著開啟的文件（行 13），一個開啟的文件即為 <code>struct file</code></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Per-process state</span><span class="token keyword">struct</span> proc <span class="token punctuation">{</span>  uint sz<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// Size of process memory (bytes)</span>  pde_t<span class="token operator">*</span> pgdir<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Page table</span>  <span class="token keyword">char</span> <span class="token operator">*</span>kstack<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Bottom of kernel stack for this process</span>  <span class="token keyword">enum</span> procstate state<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Process state</span>  <span class="token keyword">volatile</span> <span class="token keyword">int</span> pid<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Process ID</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>parent<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Parent process</span>  <span class="token keyword">struct</span> trapframe <span class="token operator">*</span>tf<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Trap frame for current syscall</span>  <span class="token keyword">struct</span> context <span class="token operator">*</span>context<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// swtch() here to run process</span>  <span class="token keyword">void</span> <span class="token operator">*</span>chan<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// If non-zero, sleeping on chan</span>  <span class="token keyword">int</span> killed<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// If non-zero, have been killed</span>  <span class="token keyword">struct</span> file <span class="token operator">*</span>ofile<span class="token punctuation">[</span>NOFILE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Open files</span>  <span class="token keyword">struct</span> inode <span class="token operator">*</span>cwd<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// Current directory</span>  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// Process name (debugging)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> file <span class="token punctuation">{</span>  <span class="token keyword">enum</span> <span class="token punctuation">{</span> FD_NONE<span class="token punctuation">,</span> FD_PIPE<span class="token punctuation">,</span> FD_INODE <span class="token punctuation">}</span> type<span class="token punctuation">;</span>  <span class="token keyword">int</span> ref<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// reference count</span>  <span class="token keyword">char</span> readable<span class="token punctuation">;</span>  <span class="token keyword">char</span> writable<span class="token punctuation">;</span>  <span class="token keyword">struct</span> pipe <span class="token operator">*</span>pipe<span class="token punctuation">;</span>  <span class="token keyword">struct</span> inode <span class="token operator">*</span>ip<span class="token punctuation">;</span>  uint off<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>所有的 open files 皆被存放在 <code>ftable</code> 中：</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> <span class="token punctuation">{</span>  <span class="token keyword">struct</span> spinlock lock<span class="token punctuation">;</span>  <span class="token keyword">struct</span> file file<span class="token punctuation">[</span>NFILE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> ftable<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Code-filealloc、dup-and-close"><a href="#Code-filealloc、dup-and-close" class="headerlink" title="Code: filealloc、dup and close"></a>Code: filealloc、dup and close</h3><p><i class="fa fa-code"></i> Code: <code>filealloc</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立一個檔案</td><td>檔案結構</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Allocate a file structure.</span><span class="token keyword">struct</span> file<span class="token operator">*</span><span class="token function">filealloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> file <span class="token operator">*</span>f<span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ftable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>f <span class="token operator">=</span> ftable<span class="token punctuation">.</span>file<span class="token punctuation">;</span> f <span class="token operator">&lt;</span> ftable<span class="token punctuation">.</span>file <span class="token operator">+</span> NFILE<span class="token punctuation">;</span> f<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ref <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      f<span class="token operator">-></span>ref <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ftable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> f<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ftable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>filealloc</code> 在 <code>ftable</code> 找到一個 <code>f-&gt;ref</code> 為零的，並返回。</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>filedup</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>再次一個檔案</td><td>開啟的檔案結構</td></tr></tbody></table><table><thead><tr><th><code>*f</code></th></tr></thead><tbody><tr><td>欲開啟的檔案</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Increment ref count for file f.</span><span class="token keyword">struct</span> file<span class="token operator">*</span><span class="token function">filedup</span><span class="token punctuation">(</span><span class="token keyword">struct</span> file <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ftable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ref <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"filedup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  f<span class="token operator">-></span>ref<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ftable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>filedup</code> 增加引用次數。</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>fileclose</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>關閉檔案</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*f</code></th></tr></thead><tbody><tr><td>欲關閉的檔案</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Close file f.  (Decrement ref count, close when reaches 0.)</span><span class="token keyword">void</span><span class="token function">fileclose</span><span class="token punctuation">(</span><span class="token keyword">struct</span> file <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> file ff<span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ftable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ref <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"fileclose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>f<span class="token operator">-></span>ref <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ftable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>fileclose</code> 減少引用次數。</li></ul><pre class="line-numbers language-c"><code class="language-c">  ff <span class="token operator">=</span> <span class="token operator">*</span>f<span class="token punctuation">;</span>  f<span class="token operator">-></span>ref <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  f<span class="token operator">-></span>type <span class="token operator">=</span> FD_NONE<span class="token punctuation">;</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ftable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>ff<span class="token punctuation">.</span>type <span class="token operator">==</span> FD_PIPE<span class="token punctuation">)</span>    <span class="token function">pipeclose</span><span class="token punctuation">(</span>ff<span class="token punctuation">.</span>pipe<span class="token punctuation">,</span> ff<span class="token punctuation">.</span>writable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ff<span class="token punctuation">.</span>type <span class="token operator">==</span> FD_INODE<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">begin_trans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iput</span><span class="token punctuation">(</span>ff<span class="token punctuation">.</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">commit_trans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若引用次數降為 0 時，則依據類型的不同釋放當前的 pipe 或是 inode。</li></ul><h3 id="Code-filestat、read-and-write"><a href="#Code-filestat、read-and-write" class="headerlink" title="Code: filestat、read and write"></a>Code: filestat、read and write</h3><p><i class="fa fa-code"></i> Code: <code>filestat</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>讀取檔案狀態</td><td>0 (ok) / -1 (err)</td></tr></tbody></table><table><thead><tr><th><code>*f</code></th><th><code>*st</code></th></tr></thead><tbody><tr><td>欲讀取的檔案</td><td>寫入狀態的結構</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Get metadata about file f.</span><span class="token keyword">int</span><span class="token function">filestat</span><span class="token punctuation">(</span><span class="token keyword">struct</span> file <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">struct</span> stat <span class="token operator">*</span>st<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-></span>type <span class="token operator">==</span> FD_INODE<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ilock</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">stati</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ip<span class="token punctuation">,</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iunlock</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>須為 <code>inode</code> 才可使用 <code>filestat</code>，通過呼叫 <code>stati</code> 來實現操作。</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>stati</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>寫入檔案狀態</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*ip</code></th><th><code>*st</code></th></tr></thead><tbody><tr><td>欲讀取的檔案</td><td>寫入狀態的結構</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Copy stat information from inode.</span><span class="token keyword">void</span><span class="token function">stati</span><span class="token punctuation">(</span><span class="token keyword">struct</span> inode <span class="token operator">*</span>ip<span class="token punctuation">,</span> <span class="token keyword">struct</span> stat <span class="token operator">*</span>st<span class="token punctuation">)</span><span class="token punctuation">{</span>  st<span class="token operator">-></span>dev <span class="token operator">=</span> ip<span class="token operator">-></span>dev<span class="token punctuation">;</span>  st<span class="token operator">-></span>ino <span class="token operator">=</span> ip<span class="token operator">-></span>inum<span class="token punctuation">;</span>  st<span class="token operator">-></span>type <span class="token operator">=</span> ip<span class="token operator">-></span>type<span class="token punctuation">;</span>  st<span class="token operator">-></span>nlink <span class="token operator">=</span> ip<span class="token operator">-></span>nlink<span class="token punctuation">;</span>  st<span class="token operator">-></span>size <span class="token operator">=</span> ip<span class="token operator">-></span>size<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>fileread</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>讀取檔案</td><td>讀取大小</td></tr></tbody></table><table><thead><tr><th><code>*f</code></th><th><code>*addr</code></th><th><code>n</code></th></tr></thead><tbody><tr><td>欲讀取的檔案</td><td>欲寫入資料的記憶體</td><td>欲寫入的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Read from file f.</span><span class="token keyword">int</span><span class="token function">fileread</span><span class="token punctuation">(</span><span class="token keyword">struct</span> file <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-></span>readable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-></span>type <span class="token operator">==</span> FD_PIPE<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">piperead</span><span class="token punctuation">(</span>f<span class="token operator">-></span>pipe<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-></span>type <span class="token operator">==</span> FD_INODE<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ilock</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">readi</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ip<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> f<span class="token operator">-></span>off<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>      f<span class="token operator">-></span>off <span class="token operator">+</span><span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token function">iunlock</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"fileread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>fileread</code> 針對不同類型有不同的操作：<ul><li>pipe：呼叫 <code>piperead</code>，於 <a href="https://omuskywalker.github.io/2018/08/14/ch5/#piperead" target="_blank" rel="noopener">ch5</a> 介紹過。</li><li>inode：由 <code>readi</code> 完成動作，下面會介紹。</li></ul></li></ul><hr><p><i class="fa fa-code"></i> Code: <code>filewrite</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>寫入檔案</td><td>寫入大小</td></tr></tbody></table><table><thead><tr><th><code>*f</code></th><th><code>*addr</code></th><th><code>n</code></th></tr></thead><tbody><tr><td>欲寫入的檔案</td><td>欲寫入的資料</td><td>欲寫入的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//PAGEBREAK!</span><span class="token comment" spellcheck="true">// Write to file f.</span><span class="token keyword">int</span><span class="token function">filewrite</span><span class="token punctuation">(</span><span class="token keyword">struct</span> file <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-></span>writable <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-></span>type <span class="token operator">==</span> FD_PIPE<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">pipewrite</span><span class="token punctuation">(</span>f<span class="token operator">-></span>pipe<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">-></span>type <span class="token operator">==</span> FD_INODE<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write a few blocks at a time to avoid exceeding</span>    <span class="token comment" spellcheck="true">// the maximum log transaction size, including</span>    <span class="token comment" spellcheck="true">// i-node, indirect block, allocation blocks,</span>    <span class="token comment" spellcheck="true">// and 2 blocks of slop for non-aligned writes.</span>    <span class="token comment" spellcheck="true">// this really belongs lower down, since writei()</span>    <span class="token comment" spellcheck="true">// might be writing a device like the console.</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>LOGSIZE<span class="token number">-1</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">512</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">int</span> n1 <span class="token operator">=</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>n1 <span class="token operator">></span> max<span class="token punctuation">)</span>        n1 <span class="token operator">=</span> max<span class="token punctuation">;</span>      <span class="token function">begin_trans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">ilock</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">writei</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ip<span class="token punctuation">,</span> addr <span class="token operator">+</span> i<span class="token punctuation">,</span> f<span class="token operator">-></span>off<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        f<span class="token operator">-></span>off <span class="token operator">+</span><span class="token operator">=</span> r<span class="token punctuation">;</span>      <span class="token function">iunlock</span><span class="token punctuation">(</span>f<span class="token operator">-></span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">commit_trans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">!=</span> n1<span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"short filewrite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      i <span class="token operator">+</span><span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i <span class="token operator">==</span> n <span class="token operator">?</span> n <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"filewrite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>filewrite</code> 針對不同類型有不同的操作：<ul><li>pipe：呼叫 <code>pipewrite</code>，於 <a href="https://omuskywalker.github.io/2018/08/14/ch5/#pipewrite" target="_blank" rel="noopener">ch5</a> 介紹過。</li><li>inode：由 <code>writei</code> 完成動作，下面會介紹。</li></ul></li></ul><hr><h2 id="Code-Path-names"><a href="#Code-Path-names" class="headerlink" title="Code: Path names"></a>Code: Path names</h2><blockquote><p>File: fs.c</p></blockquote><h3 id="namex"><a href="#namex" class="headerlink" title="namex"></a>namex</h3><p><i class="fa fa-code"></i> Code: <code>namex</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>從路徑尋找檔案</td><td>inode 結構</td></tr></tbody></table><table><thead><tr><th><code>*path</code></th><th><code>nameiparent</code></th><th><code>*name</code></th></tr></thead><tbody><tr><td>路徑名</td><td>-</td><td>-</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Look up and return the inode for a path name.</span><span class="token comment" spellcheck="true">// If parent != 0, return the inode for the parent and copy the final</span><span class="token comment" spellcheck="true">// path element into name, which must have room for DIRSIZ bytes.</span><span class="token keyword">static</span> <span class="token keyword">struct</span> inode<span class="token operator">*</span><span class="token function">namex</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">int</span> nameiparent<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> inode <span class="token operator">*</span>ip<span class="token punctuation">,</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>path <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span>    ip <span class="token operator">=</span> <span class="token function">iget</span><span class="token punctuation">(</span>ROOTDEV<span class="token punctuation">,</span> ROOTINO<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    ip <span class="token operator">=</span> <span class="token function">idup</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token function">skipelem</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ilock</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ip<span class="token operator">-></span>type <span class="token operator">!=</span> T_DIR<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">iunlockput</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nameiparent <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>path <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Stop one level early.</span>      <span class="token function">iunlock</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>next <span class="token operator">=</span> <span class="token function">dirlookup</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">iunlockput</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">iunlockput</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    ip <span class="token operator">=</span> next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>nameiparent<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">iput</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> ip<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Code-目錄"><a href="#Code-目錄" class="headerlink" title="Code: 目錄"></a>Code: 目錄</h2><ul><li>目錄的 inode type 為 <code>T_DIR</code>，存在 <code>struct dirent</code> 中。</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> dirent <span class="token punctuation">{</span>  ushort inum<span class="token punctuation">;</span>  <span class="token keyword">char</span> name<span class="token punctuation">[</span>DIRSIZ<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>inum</code> 為 inode 編號，為 0 的代表可用。</li></ul><hr><h2 id="Inode"><a href="#Inode" class="headerlink" title="Inode"></a>Inode</h2><hr><h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><hr><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><ul><li>buffer 有兩個任務：<ol><li>同步硬碟，保證只會有一份拷貝放在記憶體，並只有一個 kernel thread 使用。</li><li>快取常用的 block 以提升性能 (<em>bio.c</em>);</li></ol></li></ul><h3 id="Code-Buffer-cache"><a href="#Code-Buffer-cache" class="headerlink" title="Code: Buffer cache"></a>Code: Buffer cache</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> XV6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XV6 </tag>
            
            <tag> file system </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XV6 Ch5 Scheduling</title>
      <link href="/xv6-5-scheduler/"/>
      <url>/xv6-5-scheduler/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Multiplexing"><a href="#Multiplexing" class="headerlink" title="Multiplexing"></a>Multiplexing</h2><ul><li>如果 process 需要等待 I/O 或是子 process 結束，XV6 讓其進入睡眠狀態，接著將處理器 switch 給其他 process。 </li><li>此機制使 process 有獨佔 CPU 的假象。</li><li>完成 switch 的動作由 context switch 完成：<ul><li>透明化 -&gt; 使用 <strong>timer interrupt handler</strong> 驅動 context switch。</li><li>同時多個 process 需要 switch -&gt; lock</li></ul></li></ul><hr><h2 id="Code-Context-switch"><a href="#Code-Context-switch" class="headerlink" title="Code: Context switch"></a>Code: Context switch</h2><ul><li>從 process 的 kernel stack -&gt; schedluler kernel stack (CPU) -&gt; 另一個 process 的 kernel stack。</li><li>永遠不會從 process 的 kernel stack -&gt; process 的 kernel stack。 </li></ul><p><img src="https://i.imgur.com/qtfH1Vj.png" alt="context switch" title="Switching from one user process to another."></p><ul><li>每個 process 都有自己的 kernel stack 及暫存器集合，每個 CPU 有自己的 scheduler stack。</li><li>context 即 process 的暫存器集合，用一個 <code>struct context *</code> 表示。</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> context <span class="token punctuation">{</span>  uint edi<span class="token punctuation">;</span>  uint esi<span class="token punctuation">;</span>  uint ebx<span class="token punctuation">;</span>  uint ebp<span class="token punctuation">;</span>  uint eip<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>trap 有可能會呼叫 <code>yield</code>，<code>yield</code> 會呼叫 <code>sched</code>，最後 <code>sched</code> 呼叫 <code>swtch(&amp;proc-&gt;context, cpu-&gt;scheduler);</code>。</li></ul><h3 id="File-swtch-S"><a href="#File-swtch-S" class="headerlink" title="File: swtch.S"></a>File: swtch.S</h3><ul><li><em>swtch</em> 有兩個參數：<code>struct context ** old</code>、<code>struct context * new</code>。</li></ul><pre class="line-numbers language-x86asm"><code class="language-x86asm"># Context switch##   void swtch(struct context **old, struct context *new);# # Save current register context in old# and then load register context from new..globl swtchswtch:  movl 4(%esp), %eax  movl 8(%esp), %edx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將 <code>%eax</code> 指向 <code>struct context ** old</code>，<code>%ebx</code> 指向 <code>struct context * new</code>。</li></ul><p><img src="https://i.imgur.com/0QWW7gZ.png" alt="swtch" title="Context switch step. 1"></p><pre class="line-numbers language-x86asm"><code class="language-x86asm">  # Save old callee-save registers  pushl %ebp  pushl %ebx  pushl %esi  pushl %edi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>依序將 context push 進堆疊</li></ul><p><img src="https://i.imgur.com/CXUNIYY.png" alt="swtch" title="Context switch step. 2"> </p><pre class="line-numbers language-x86asm"><code class="language-x86asm">  # Switch stacks  movl %esp, (%eax)  movl %edx, %esp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>將 <code>struct context ** old</code>（<code>%eax</code>） 指向 <code>%esp</code>（當前堆疊的 <strong>top</strong>）</li><li>將 <code>%esp</code> 指向 <code>struct context * new</code>（<code>%ebx</code>）</li></ul><p><img src="https://i.imgur.com/AB38T7t.png" alt="swtch" title="Context switch step. 3"></p><pre class="line-numbers language-x86asm"><code class="language-x86asm">  # Load new callee-save registers  popl %edi  popl %esi  popl %ebx  popl %ebp  ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>恢復保存的暫存器，用<code>ret</code> 指令跳回</li></ul><hr><h2 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h2><blockquote><p>File: proc.c</p></blockquote><ul><li>process 要讓出 CPU 前需要先取得 ptable.lock，釋放其他擁有的鎖，修改 p-&gt;state，呼叫 <code>sched</code>。</li><li><code>sched</code> 會再次檢查以上動作，並且確定此時中斷是關閉的，最後呼叫 <code>swtch</code>，將 process 的暫存器保存在 proc-&gt;context，switch 到 cpu-&gt;scheduler。</li></ul><h3 id="sched"><a href="#sched" class="headerlink" title="sched"></a>sched</h3><p><i class="fa fa-code"></i> Code: <code>sched</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>檢查並跳至 swtch.h</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">sched</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> intena<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">holding</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sched ptable.lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>cpu<span class="token operator">-></span>ncli <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sched locks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>proc<span class="token operator">-></span>state <span class="token operator">==</span> RUNNING<span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sched running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">readeflags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>FL_IF<span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sched interruptible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  intena <span class="token operator">=</span> cpu<span class="token operator">-></span>intena<span class="token punctuation">;</span>  <span class="token function">swtch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc<span class="token operator">-></span>context<span class="token punctuation">,</span> cpu<span class="token operator">-></span>scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>  cpu<span class="token operator">-></span>intena <span class="token operator">=</span> intena<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>swtch</code> 會 return 回 scheduler 的堆疊上，scheduler 繼續執行迴圈：找到一個 process 運行，<code>swtch</code> 到該 process，repeat。</li></ul><h3 id="scheduler"><a href="#scheduler" class="headerlink" title="scheduler"></a>scheduler</h3><p><i class="fa fa-code"></i> Code: <code>scheduler</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>執行調度，指定執行的 process</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Enable interrupts on this processor.</span>    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Loop over process table looking for process to run.</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ptable<span class="token punctuation">.</span>proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>state <span class="token operator">!=</span> RUNNABLE<span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Switch to chosen process.  It is the process's job</span>      <span class="token comment" spellcheck="true">// to release ptable.lock and then reacquire it</span>      <span class="token comment" spellcheck="true">// before jumping back to us.</span>      proc <span class="token operator">=</span> p<span class="token punctuation">;</span>      <span class="token function">switchuvm</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>      p<span class="token operator">-></span>state <span class="token operator">=</span> RUNNING<span class="token punctuation">;</span>      <span class="token function">swtch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu<span class="token operator">-></span>scheduler<span class="token punctuation">,</span> proc<span class="token operator">-></span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">switchkvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Process is done running for now.</span>      <span class="token comment" spellcheck="true">// It should have changed its p->state before coming back.</span>      proc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>scheduler</code> 找到一個 <code>RUNNABLE</code> 的 process，將 per-cpu 設為此 process，呼叫 <code>switchuvm</code> 切換到該 process 的頁表，更新狀態為<code>RUNNING</code>，<code>swtch</code> 到該 process 中運行。</li></ul><hr><h2 id="Code-mycpu-and-myproc"><a href="#Code-mycpu-and-myproc" class="headerlink" title="Code:  mycpu  and  myproc"></a>Code:  mycpu  and  myproc</h2><ul><li>CPU 需要辨識目前正在執行的 process，XV6 有一個 struct cpu 的陣列，裡面包含了一些 CPU 的資訊，及當前 process 的資訊。</li><li><code>mycpu</code> 尋找當前的 <code>lapicid</code> 是哪顆 CPU 的。</li></ul><h3 id="mycpu"><a href="#mycpu" class="headerlink" title="mycpu"></a>mycpu</h3><p><i class="fa fa-code"></i> Code: <code>mycpu</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>找到目前所在的 CPU</td><td>CPU 結構指標</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> cpu<span class="token operator">*</span><span class="token function">mycpu</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> apicid<span class="token punctuation">,</span> i<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">readeflags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>FL_IF<span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"mycpu called with interrupts enabled\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  apicid <span class="token operator">=</span> <span class="token function">lapicid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// APIC IDs are not guaranteed to be contiguous. Maybe we should have</span>  <span class="token comment" spellcheck="true">// a reverse map, or reserve a register to store &amp;cpus[i].</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ncpu<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cpus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>apicid <span class="token operator">==</span> apicid<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token operator">&amp;</span>cpus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"unknown apicid\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>myproc</code> 呼叫 <code>mycpu</code>，從正確的 CPU 上尋找當前的 process。<br><i class="fa fa-code"></i> Code: <code>myproc</code></li></ul><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>找到當前的 process</td><td>proc 結構指標</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> proc<span class="token operator">*</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">struct</span> cpu <span class="token operator">*</span>c<span class="token punctuation">;</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token function">pushcli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  c <span class="token operator">=</span> <span class="token function">mycpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p <span class="token operator">=</span> c<span class="token operator">-></span>proc<span class="token punctuation">;</span>  <span class="token function">popcli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="睡眠與喚醒（例子）"><a href="#睡眠與喚醒（例子）" class="headerlink" title="睡眠與喚醒（例子）"></a>睡眠與喚醒（例子）</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> q <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">struct</span> q <span class="token operator">*</span>q<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token operator">-></span>ptr <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    q<span class="token operator">-></span>ptr <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token function">recv</span><span class="token punctuation">(</span><span class="token keyword">struct</span> q <span class="token operator">*</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> q<span class="token operator">-></span>ptr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    q<span class="token operator">-></span>ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>send</code> 直到隊伍 <code>q</code> 為空時，將要傳送的資料 <code>p</code> 放入隊中，<code>recv</code> 直到 <code>q</code> 有東西時將資料取出，把 <code>q</code> 再次設為 <code>0</code></li><li>這允許不同的 process 交換資料，但是很耗資源。</li></ul><h3 id="方案-1"><a href="#方案-1" class="headerlink" title="方案 1"></a>方案 1</h3><ul><li>加入 <code>sleep</code> 及 <code>wakeup</code> 機制，<code>sleep(chan)</code> 將 process 在 <code>chan</code> 中睡眠（一個 wait channel），<code>wakeup(chan)</code> 將 <code>chan</code> 上睡眠的 process 喚醒。</li></ul><pre class="line-numbers language-diff"><code class="language-diff">void*send(struct q *q, void *p){    while(q->ptr != 0)        ;    q->ptr = p;<span class="token inserted">+    wakeup(q);    /*wake recv*/</span>}void*recv(struct q *q){    void *p;    while((p = q->ptr) == 0)<span class="token inserted">+        sleep(q);</span>    q->ptr = 0;    return p;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如此一來 <code>recv</code> 能讓出 CPU，直到有人（<code>send</code>）將它喚醒。</li></ul><blockquote><p><strong>問題</strong>：遺失的喚醒：<br><img src="https://i.imgur.com/aPcvuOZ.png" alt="遺失的喚醒" title="Example lost wakeup problem"></p><ul><li>假設 <code>recv</code> 在 215 行查看隊伍，發現需要睡眠，就在要呼叫 <code>sleep</code> 之前發生中斷，<code>send</code> 在其他的 CPU 將資料放進隊伍中，呼叫 <code>wakeup</code>，發現沒有正在休眠的 process，於是不做事；接著 <code>recv</code> 終於呼叫 <code>sleep</code> 進入睡眠。</li><li>此時，<code>revc</code> 正在等待 <code>send</code> 將它喚醒，但是 <code>send</code> 正在等待隊伍清空，清空的動作須由 <code>recv</code> 完成（休眠中），於是就產生了 <strong>deadlock</strong>。</li></ul></blockquote><h3 id="方案-2"><a href="#方案-2" class="headerlink" title="方案 2"></a>方案 2</h3><ul><li>讓 <code>send</code> 及 <code>recv</code> 在睡眠及喚醒前都持有鎖。</li></ul><pre class="line-numbers language-diff"><code class="language-diff">struct q {    struct spinlock lock;    void *ptr;};void *send(struct q *q, void *p){<span class="token inserted">+    acquire(&amp;q->lock);</span>    while(q->ptr != 0)        ;    q->ptr = p;    wakeup(q);<span class="token inserted">+    release(&amp;q->lock);</span>}void*recv(struct q *q){    void *p;<span class="token inserted">+    acquire(&amp;q->lock);</span>    while((p = q->ptr) == 0)        sleep(q);    q->ptr = 0;<span class="token inserted">+    release(&amp;q->lock);</span>    return p;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>但這一樣有問題：<code>recv</code> 帶著鎖進入睡眠，<code>send</code> 也同時需要鎖來喚醒，於是就產生了 <strong>deadlock</strong>。</li></ul><h3 id="方案-3"><a href="#方案-3" class="headerlink" title="方案 3"></a>方案 3</h3><ul><li>在 <code>sleep</code> 時一併釋放鎖，也就是將鎖當成參數傳進去。</li></ul><pre class="line-numbers language-diff"><code class="language-diff">struct q {    struct spinlock lock;    void *ptr;};void *send(struct q *q, void *p){    acquire(&amp;q->lock);    while(q->ptr != 0)        ;    q->ptr = p;    wakeup(q);    release(&amp;q->lock);}void*recv(struct q *q){    void *p;    acquire(&amp;q->lock);    while((p = q->ptr) == 0)<span class="token inserted">+        sleep(q, &amp;q->lock);</span>    q->ptr = 0;    release(&amp;q->lock);    return p;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Code-睡眠與喚醒"><a href="#Code-睡眠與喚醒" class="headerlink" title="Code: 睡眠與喚醒"></a>Code: 睡眠與喚醒</h2><table><thead><tr><th>副程式</th><th>目標</th></tr></thead><tbody><tr><td><code>sleep</code></td><td>將狀態改成 <code>SLEEPING</code>，呼叫 <code>sched</code> 釋放 CPU</td></tr><tr><td><code>wakeup</code></td><td>尋找狀態為 <code>SLEEPING</code> 的 process，改成 <code>RUNNABLE</code></td></tr></tbody></table><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>讓 process 睡眠</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*chan</code></th><th><code>*lk</code></th></tr></thead><tbody><tr><td>欲睡眠的頻道</td><td>持有的鎖</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>chan<span class="token punctuation">,</span> <span class="token keyword">struct</span> spinlock <span class="token operator">*</span>lk<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sleep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>lk <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"sleep without lk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先確保 process 存在，及持有鎖。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">if</span><span class="token punctuation">(</span>lk <span class="token operator">!=</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//DOC: sleeplock0</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DOC: sleeplock1</span>    <span class="token function">release</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著檢查是否持有 <code>ptable-&gt;lock</code>，如果沒有則要求一個，把 <code>lk</code> 釋出。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Go to sleep.</span>  p<span class="token operator">-></span>chan <span class="token operator">=</span> chan<span class="token punctuation">;</span>  p<span class="token operator">-></span>state <span class="token operator">=</span> SLEEPING<span class="token punctuation">;</span>  <span class="token function">sched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>睡眠，並呼叫 <code>sched</code></li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Tidy up.</span>  p<span class="token operator">-></span>chan <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Reacquire original lock.</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>lk <span class="token operator">!=</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//DOC: sleeplock2</span>    <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">acquire</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="wakeup1"><a href="#wakeup1" class="headerlink" title="wakeup1"></a>wakeup1</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>叫醒頻道上的 process</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*chan</code></th></tr></thead><tbody><tr><td>頻道</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// </span><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">wakeup1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>chan<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ptable<span class="token punctuation">.</span>proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>state <span class="token operator">==</span> SLEEPING <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>chan <span class="token operator">==</span> chan<span class="token punctuation">)</span>      p<span class="token operator">-></span>state <span class="token operator">=</span> RUNNABLE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="wakeup"></a>wakeup</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>叫醒頻道上的 process</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*chan</code></th></tr></thead><tbody><tr><td>頻道</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>chan<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">wakeup1</span><span class="token punctuation">(</span>chan<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>wakeup</code> 找到 <code>chan</code> 上在睡眠的 process，並喚醒。</li></ul><hr><h2 id="Code-Pipes"><a href="#Code-Pipes" class="headerlink" title="Code: Pipes"></a>Code: Pipes</h2><blockquote><p>File: pipe.c</p></blockquote><ul><li>pipe 為一個結構，包含一個鎖，一個 <code>buf</code> 等。</li><li>當 pipe 為空時，<code>nread == nwrite</code></li><li>當 pipe 為滿時，<code>nwrite == nread % PIPESIZE</code></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> pipe <span class="token punctuation">{</span>  <span class="token keyword">struct</span> spinlock lock<span class="token punctuation">;</span>  <span class="token keyword">char</span> data<span class="token punctuation">[</span>PIPESIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  uint nread<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// number of bytes read</span>  uint nwrite<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// number of bytes written</span>  <span class="token keyword">int</span> readopen<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// read fd is still open</span>  <span class="token keyword">int</span> writeopen<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// write fd is still open</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="pipewrite"><a href="#pipewrite" class="headerlink" title="pipewrite"></a>pipewrite</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>寫入 pipe</td><td>寫入的大小</td></tr></tbody></table><table><thead><tr><th><code>*p</code></th><th><code>*addr</code></th><th><code>n</code></th></tr></thead><tbody><tr><td>欲寫入的 pipe</td><td>欲寫入的值</td><td>欲寫入的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">pipewrite</span><span class="token punctuation">(</span><span class="token keyword">struct</span> pipe <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>nwrite <span class="token operator">==</span> p<span class="token operator">-></span>nread <span class="token operator">+</span> PIPESIZE<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//DOC: pipewrite-full</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>readopen <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>killed<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>nread<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>nwrite<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DOC: pipewrite-sleep</span>    <span class="token punctuation">}</span>    p<span class="token operator">-></span>data<span class="token punctuation">[</span>p<span class="token operator">-></span>nwrite<span class="token operator">++</span> <span class="token operator">%</span> PIPESIZE<span class="token punctuation">]</span> <span class="token operator">=</span> addr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>nread<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DOC: pipewrite-wakeup1</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先須取得鎖。</li><li><code>pipewrite</code> 從 0 開始將資料讀入 <code>buf</code>，更新 <code>nwrite</code> 計數器，當 <code>buf</code> 滿了，則喚醒 <code>piperead</code> 並睡眠；或是讀入完畢，一樣喚醒 <code>pipiread</code>。</li></ul><hr><h3 id="piperead"><a href="#piperead" class="headerlink" title="piperead"></a>piperead</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>讀取 pipe</td><td>讀入的大小</td></tr></tbody></table><table><thead><tr><th><code>*p</code></th><th><code>*addr</code></th><th><code>n</code></th></tr></thead><tbody><tr><td>欲讀取的 pipe</td><td>讀取資料存放區</td><td>欲讀入的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">piperead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> pipe <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-></span>nread <span class="token operator">==</span> p<span class="token operator">-></span>nwrite <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>writeopen<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//DOC: pipe-empty</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>killed<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>nread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//DOC: piperead-sleep</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//DOC: piperead-copy</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>nread <span class="token operator">==</span> p<span class="token operator">-></span>nwrite<span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    addr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">[</span>p<span class="token operator">-></span>nread<span class="token operator">++</span> <span class="token operator">%</span> PIPESIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>nwrite<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DOC: piperead-wakeup</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先須取得鎖。</li><li><code>piperead</code> 確認 pipe 是否為空，為空則進入睡眠。</li><li>當 pipe 不為空時，寫入資料，更新 <code>nread</code> 計數器。</li><li>讀取完畢後，喚醒 <code>pipewrite</code>。</li></ul><hr><h2 id="Code-Wait-exit-and-kill"><a href="#Code-Wait-exit-and-kill" class="headerlink" title="Code: Wait, exit and kill"></a>Code: Wait, exit and kill</h2><h3 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>等待子 process 結束</td><td>pid (ok) / -1 (err)</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">int</span> havekids<span class="token punctuation">,</span> pid<span class="token punctuation">;</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>curproc <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Scan through table looking for exited children.</span>    havekids <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ptable<span class="token punctuation">.</span>proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>parent <span class="token operator">!=</span> curproc<span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      havekids <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>state <span class="token operator">==</span> ZOMBIE<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Found one.</span>        pid <span class="token operator">=</span> p<span class="token operator">-></span>pid<span class="token punctuation">;</span>        <span class="token function">kfree</span><span class="token punctuation">(</span>p<span class="token operator">-></span>kstack<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>kstack <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">freevm</span><span class="token punctuation">(</span>p<span class="token operator">-></span>pgdir<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>pid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>parent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>killed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>state <span class="token operator">=</span> UNUSED<span class="token punctuation">;</span>        <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pid<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// No point waiting if we don't have any children.</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>havekids <span class="token operator">||</span> curproc<span class="token operator">-></span>killed<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Wait for children to exit.  (See wakeup1 call in proc_exit.)</span>    <span class="token function">sleep</span><span class="token punctuation">(</span>curproc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DOC: wait-sleep</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先須取得鎖。</li><li>接著尋找是否有子 process，如果有，並且還沒退出，則睡眠，等待子 process 退出。</li><li>如果找到已退出的子 process，紀錄該子 process 的 pid，清理 <code>struct proc</code>，釋放相關記憶體。</li></ul><hr><h3 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>自行結束 process</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>curproc <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">int</span> fd<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>curproc <span class="token operator">==</span> initproc<span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"init exiting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Close all open files.</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> fd <span class="token operator">&lt;</span> NOFILE<span class="token punctuation">;</span> fd<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>curproc<span class="token operator">-></span>ofile<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fileclose</span><span class="token punctuation">(</span>curproc<span class="token operator">-></span>ofile<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      curproc<span class="token operator">-></span>ofile<span class="token punctuation">[</span>fd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">begin_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">iput</span><span class="token punctuation">(</span>curproc<span class="token operator">-></span>cwd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">end_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  curproc<span class="token operator">-></span>cwd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Parent might be sleeping in wait().</span>  <span class="token function">wakeup1</span><span class="token punctuation">(</span>curproc<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Pass abandoned children to init.</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ptable<span class="token punctuation">.</span>proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>parent <span class="token operator">==</span> curproc<span class="token punctuation">)</span><span class="token punctuation">{</span>      p<span class="token operator">-></span>parent <span class="token operator">=</span> initproc<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>state <span class="token operator">==</span> ZOMBIE<span class="token punctuation">)</span>        <span class="token function">wakeup1</span><span class="token punctuation">(</span>initproc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Jump into the scheduler, never to return.</span>  curproc<span class="token operator">-></span>state <span class="token operator">=</span> ZOMBIE<span class="token punctuation">;</span>  <span class="token function">sched</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"zombie exit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先須取得鎖。</li><li>喚醒父 process，將子 process 交給 <em>initproc</em>，修改狀態，呼叫 <code>sched</code> switch 至 scheduler。</li></ul><hr><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>使 process 終止</td><td>0 (ok) / -1 (err)</td></tr></tbody></table><table><thead><tr><th><code>pid</code></th></tr></thead><tbody><tr><td>欲終止的 process id</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ptable<span class="token punctuation">.</span>proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>pid <span class="token operator">==</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>      p<span class="token operator">-></span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Wake process from sleep if necessary.</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>state <span class="token operator">==</span> SLEEPING<span class="token punctuation">)</span>        p<span class="token operator">-></span>state <span class="token operator">=</span> RUNNABLE<span class="token punctuation">;</span>      <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>kill</code> 將 <code>p-&gt;killed</code> 設為 1 ，當此 process 發生中斷或是 system call 進入 kernel，離開時 <code>trap</code> 會檢查 <code>p-&gt;killed</code>，如果被設置了，則呼叫 <code>exit</code>。</li><li>當要被 kill 的 process 處於睡眠狀態，則喚醒它。 </li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> XV6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XV6 </tag>
            
            <tag> kernel </tag>
            
            <tag> scheduler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XV6 Ch4 鎖</title>
      <link href="/xv6-4-lock/"/>
      <url>/xv6-4-lock/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Race-conditions"><a href="#Race-conditions" class="headerlink" title="Race conditions"></a>Race conditions</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> list<span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> list <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> list <span class="token operator">*</span>list <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> list <span class="token operator">*</span>l<span class="token punctuation">;</span>    l <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span> <span class="token operator">*</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    l<span class="token operator">-></span>next <span class="token operator">=</span> list<span class="token punctuation">;</span>    list <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.imgur.com/T6893f9.png" alt="" title="Example race"></p><p>假設現在有兩個 process 同時在不同的 CPU 上執行上述程式碼，當兩個 process 都執行到 14 行，則兩條鏈結的 <code>next</code> 都設置為 <code>list</code>；接著，先執行的 process A 將 list 設定為自己的鏈結，後執行的 process B 也將 list 設為自己的鏈結。</p><p><strong>問題</strong>：此時 list 上將會遺失原本 process A <code>insert</code> 的節點。</p><h3 id="圖解"><a href="#圖解" class="headerlink" title="圖解"></a>圖解</h3><ul><li>一開始的 list</li></ul><p><img src="https://i.imgur.com/2eXmAxp.png" alt=""></p><ul><li>假設 pocess A 及 B 同時將自己的資料插在 list 的第一顆<br><img src="https://i.imgur.com/h95r477.png" alt=""></li><li>接著 process A 以些微的差距先將 list 設為 l（自己的鏈結），此時 list 的第一顆為 A 的資料<br><img src="https://i.imgur.com/u0udl7M.png" alt=""></li><li>最後 process B 也將 list 設為 l，此時 list 上的第一顆為 B 的資料，且 A 的資料遺失了。<br><img src="https://i.imgur.com/B659a3t.png" alt=""></li></ul><h3 id="使用鎖"><a href="#使用鎖" class="headerlink" title="使用鎖"></a>使用鎖</h3><pre class="line-numbers language-diff"><code class="language-diff">struct list *list = 0;struct lock listlock;voidinsert(int data){    struct list *l;<span class="token inserted">+    acquire(&amp;listlock);</span>    l = malloc(sizeof *l);    l->data = data;    l->next = list;    list = l;<span class="token inserted">+    release(&amp;listlock);</span>}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Code-鎖"><a href="#Code-鎖" class="headerlink" title="Code: 鎖"></a>Code: 鎖</h2><ul><li>XV6 使用 <code>struct spinlock</code>，其中以 locked 作為標記。<ul><li>為 0 時，此鎖無人使用，可以被取用</li><li><strong>非</strong> 0 時，此鎖有人在使用，無法被取用</li></ul></li></ul><h3 id="File-spinlock-h"><a href="#File-spinlock-h" class="headerlink" title="File: spinlock.h"></a>File: spinlock.h</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Mutual exclusion lock.</span><span class="token keyword">struct</span> spinlock <span class="token punctuation">{</span>  uint locked<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// Is the lock held?</span>  <span class="token comment" spellcheck="true">// For debugging:</span>  <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Name of lock.</span>  <span class="token keyword">struct</span> cpu <span class="token operator">*</span>cpu<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// The cpu holding the lock.</span>  uint pcs<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// The call stack (an array of program counters)</span>                     <span class="token comment" spellcheck="true">// that locked the lock.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>邏輯上，<code>acquire</code> 應該長這樣：</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">struct</span> spinlock <span class="token operator">*</span>lk<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>lk<span class="token operator">-></span>locked<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lk<span class="token operator">-></span>locked <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>但是我們發現，可能會有多個 CPU 執行至第五行，發現 <code>lk-&gt;locked</code> 為 <code>0</code>，接著都拿到了鎖，即違反了互斥</li><li>XV6 使用 x86 的特殊指令 <code>xchg</code> 來完成動作。</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>acquire</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求鎖</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*lk</code></th></tr></thead><tbody><tr><td>欲要求的鎖</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Acquire the lock.</span><span class="token comment" spellcheck="true">// Loops (spins) until the lock is acquired.</span><span class="token comment" spellcheck="true">// Holding a lock for a long time may cause</span><span class="token comment" spellcheck="true">// other CPUs to waste time spinning to acquire it.</span><span class="token keyword">void</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">struct</span> spinlock <span class="token operator">*</span>lk<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">pushcli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// disable interrupts to avoid deadlock.</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">holding</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"acquire"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The xchg is atomic.</span>  <span class="token comment" spellcheck="true">// It also serializes, so that reads after acquire are not</span>  <span class="token comment" spellcheck="true">// reordered before it. </span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">xchg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lk<span class="token operator">-></span>locked<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Record info about lock acquisition for debugging.</span>  lk<span class="token operator">-></span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>  <span class="token function">getcallerpcs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lk<span class="token punctuation">,</span> lk<span class="token operator">-></span>pcs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>release</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>還鎖</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*lk</code></th></tr></thead><tbody><tr><td>欲還的鎖</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Release the lock.</span><span class="token keyword">void</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> spinlock <span class="token operator">*</span>lk<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">holding</span><span class="token punctuation">(</span>lk<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"release"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  lk<span class="token operator">-></span>pcs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  lk<span class="token operator">-></span>cpu <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The xchg serializes, so that reads before release are </span>  <span class="token comment" spellcheck="true">// not reordered after it.  The 1996 PentiumPro manual (Volume 3,</span>  <span class="token comment" spellcheck="true">// 7.2) says reads can be carried out speculatively and in</span>  <span class="token comment" spellcheck="true">// any order, which implies we need to serialize here.</span>  <span class="token comment" spellcheck="true">// But the 2007 Intel 64 Architecture Memory Ordering White</span>  <span class="token comment" spellcheck="true">// Paper says that Intel 64 and IA-32 will not move a load</span>  <span class="token comment" spellcheck="true">// after a store. So lock->locked = 0 would work here.</span>  <span class="token comment" spellcheck="true">// The xchg being asm volatile ensures gcc emits it after</span>  <span class="token comment" spellcheck="true">// the above assignments (and after the critical section).</span>  <span class="token function">xchg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lk<span class="token operator">-></span>locked<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">popcli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>xchg</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>交換值（x86特殊指令）</td><td>結果</td></tr></tbody></table><table><thead><tr><th><code>*addr</code></th><th><code>newval</code></th></tr></thead><tbody><tr><td>欲交換值得目標</td><td>欲填的值</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> uint<span class="token function">xchg</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> uint <span class="token operator">*</span>addr<span class="token punctuation">,</span> uint newval<span class="token punctuation">)</span><span class="token punctuation">{</span>  uint result<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// The + in "+m" denotes a read-modify-write operand.</span>  <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span><span class="token string">"lock; xchgl %0, %1"</span> <span class="token punctuation">:</span>               <span class="token string">"+m"</span> <span class="token punctuation">(</span><span class="token operator">*</span>addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=a"</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">:</span>               <span class="token string">"1"</span> <span class="token punctuation">(</span>newval<span class="token punctuation">)</span> <span class="token punctuation">:</span>               <span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> XV6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XV6 </tag>
            
            <tag> kernel </tag>
            
            <tag> lock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XV6 Ch3 Trap、中斷及驅動程式</title>
      <link href="/xv6-3-trap/"/>
      <url>/xv6-3-trap/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>CPU 執行一個 process 時，是不斷的進行：讀取指令、增加程式計數器、執行指令的迴圈；但有時候一個程式需要進入 kernel，而不是執行下一行指令；包括：設備信號的發出、使用者程式做一些非法的事或是呼叫一個 system call。</p></blockquote><ul><li>處理上述情況有三大挑戰：<ol><li>Kernel 需使處理器能夠從 user mode 轉至 kernel mode（再轉回來）。</li><li>Kernel 及設備須協調好他們平行的活動。</li><li>Kernel 需了解設備的介面。</li></ol></li></ul><h2 id="System-call，例外及中斷"><a href="#System-call，例外及中斷" class="headerlink" title="System call，例外及中斷"></a>System call，例外及中斷</h2><ul><li>有三種情況須從 user 轉至 kernel：<ol><li>system call：使用者程式要求 OS 服務。</li><li>例外 exception：程式執行非法動作（如除零）。</li><li>中斷 interrupt：設備發出一個信號來引起 OS 注意。</li></ol></li><li>所有中斷由 kernel 管理。</li><li>OS 必須在此三種情況保證以下事情：<ol><li>保存暫存器以備將來的狀態回復。</li><li>系統需準備好在 kernel 中執行。</li><li>選擇一個 kernel 開始的位置。</li><li>Kernel 能夠取得此事件的資訊。</li><li>保證安全性（獨立）。</li></ol></li><li>XV6 使用的方法概述：<ol><li>一個中斷停止了處理器的迴圈，並開始執行 interrupt handler。</li><li>在開始執行 interrupt handler 之前，處理器儲存他的暫存器。</li></ol></li><li>Trap：當前 process 引起</li><li>中斷：由設備引起</li></ul><blockquote><p>XV6 用 trap 來表示中斷，這是因為此術語被 PDP11/40 使用，也是 UNIX 的傳統術語。</p></blockquote><hr><h2 id="X86-的保護機制"><a href="#X86-的保護機制" class="headerlink" title="X86 的保護機制"></a>X86 的保護機制</h2><ul><li>x86 有 4 個 protection level，0（最高）至 3（最低）。</li><li>實際上大部分只使用兩個層級：0（kernel mode）及 3（user mode）；當前的層級儲存在 <code>%cs</code> 的 CPL 中。</li><li>Interrupt handler 在 IDT 中被定義。</li><li>IDT interrupt descriptor table：有 256 格，每一格都提供了相對應的 <code>%cs</code> 及 <code>%eip</code>。</li><li>呼叫一個 system call 需要呼叫一個 <code>int n</code> 指令，n 為 IDT 的索引；<code>int n</code> 進行下面步驟：<ol><li>從 IDT 獲得第 n 個描述符</li><li>檢查 <code>%cs</code> 中的 CPL 是否 &lt;= DPL，DPL 為描述符的層級</li><li>如果目標的段選擇器的 PL &lt; CPL，儲存 CPU 內部的 <code>%esp</code> 及 <code>%ss</code></li><li>讀取 task segment descriptor 的 <code>%ss</code> 及 <code>%esp</code> </li><li>Push <code>%ss</code>、<code>%esp</code>、<code>%eflags</code>、<code>%cs</code> 及 <code>%eip</code></li><li>清除 <code>%eflags</code> 的 IF bit</li></ol></li></ul><p><img src="https://i.imgur.com/Syfs25x.png" alt="kstack" title="Kernel stack after an int instruction."></p><hr><h2 id="Code-第一個-system-call"><a href="#Code-第一個-system-call" class="headerlink" title="Code: 第一個 system call"></a>Code: 第一個 system call</h2><h3 id="File-initcode-S"><a href="#File-initcode-S" class="headerlink" title="File: initcode.S"></a>File: initcode.S</h3><pre class="line-numbers language-x86asm"><code class="language-x86asm">.globl startstart:  pushl $argv  pushl $init  pushl $0  // where caller pc would be  movl $SYS_exec, %eax  int $T_SYSCALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Process 將<code>exec</code> 的參數 push 進堆疊，並將 system call number 放進 <code>%eax</code>。</li><li><code>SYS_exec</code> 即為 system call number，對應到 syscalls 的陣列索引（syscall.c 中），一個函數指標陣列。</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>syscalls<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>SYS_fork<span class="token punctuation">]</span>    sys_fork<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exit<span class="token punctuation">]</span>    sys_exit<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_wait<span class="token punctuation">]</span>    sys_wait<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_pipe<span class="token punctuation">]</span>    sys_pipe<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_read<span class="token punctuation">]</span>    sys_read<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_kill<span class="token punctuation">]</span>    sys_kill<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exec<span class="token punctuation">]</span>    sys_exec<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_fstat<span class="token punctuation">]</span>   sys_fstat<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_chdir<span class="token punctuation">]</span>   sys_chdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_dup<span class="token punctuation">]</span>     sys_dup<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_getpid<span class="token punctuation">]</span>  sys_getpid<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sbrk<span class="token punctuation">]</span>    sys_sbrk<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sleep<span class="token punctuation">]</span>   sys_sleep<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_uptime<span class="token punctuation">]</span>  sys_uptime<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_open<span class="token punctuation">]</span>    sys_open<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_write<span class="token punctuation">]</span>   sys_write<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mknod<span class="token punctuation">]</span>   sys_mknod<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_unlink<span class="token punctuation">]</span>  sys_unlink<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_link<span class="token punctuation">]</span>    sys_link<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mkdir<span class="token punctuation">]</span>   sys_mkdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_close<span class="token punctuation">]</span>   sys_close<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Code-Assembly-trap-handler"><a href="#Code-Assembly-trap-handler" class="headerlink" title="Code: Assembly trap handler"></a>Code: Assembly trap handler</h2><ul><li>x86 提供 256 種中斷，0-31 為軟體異常。</li><li>XV6 將 32-63 給硬體中斷，64 作為 system call。</li><li>Main 呼叫 <code>tvinit</code>。</li></ul><blockquote><p>File: trap.c</p></blockquote><p><i class="fa fa-code"></i> Code: <code>tvinit</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 trap handler</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">tvinit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Tvinit</code> 設置 <code>idt</code> 表的 256 項。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">SETGATE</span><span class="token punctuation">(</span>idt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> SEG_KCODE<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">,</span> vectors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>接著執行 <code>T_SYSCALL</code>，user 會呼叫 <code>trap</code>（將 <code>1</code> 傳入 <code>SETGATE</code> 的第二變數來指定為 trap gate）。</li><li>Trap gate 不會清除 IF bit。</li><li>並將 system call 的權限設為 <code>DPL_USER</code>，允許使用者程式使用 <code>int</code> 指令產生 <code>trap</code>；XV6 不允許 process 用 <code>int</code> 產生其他中斷，如果這麼做會拋出錯誤並產生 13 號中斷。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token function">SETGATE</span><span class="token punctuation">(</span>idt<span class="token punctuation">[</span>T_SYSCALL<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> SEG_KCODE<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">,</span> vectors<span class="token punctuation">[</span>T_SYSCALL<span class="token punctuation">]</span><span class="token punctuation">,</span> DPL_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">initlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tickslock<span class="token punctuation">,</span> <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> SETGATE(gate, istrap, sel, off, d)                \{                                                         \  (gate).off_15_0 = (uint)(off) &amp; 0xffff;                 \  (gate).cs = (sel);                                      \  (gate).args = 0;                                        \  (gate).rsv1 = 0;                                        \  (gate).type = (istrap) ? STS_TG32 : STS_IG32;           \  (gate).s = 0;                                           \  (gate).dpl = (d);                                       \  (gate).p = 1;                                           \  (gate).off_31_16 = (uint)(off) >> 16;                   \}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> STS_IG32    0xE     </span><span class="token comment" spellcheck="true">// 32-bit Interrupt Gate</span><span class="token macro property">#<span class="token directive keyword">define</span> STS_TG32    0xF     </span><span class="token comment" spellcheck="true">// 32-bit Trap Gate</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Trap-發生時"><a href="#Trap-發生時" class="headerlink" title="Trap 發生時"></a>Trap 發生時</h3><ul><li>user mode：從 task segment descriptor 讀取 <code>%esp</code>、<code>%ss</code>， 接著 push 舊的 <code>%ss</code>、<code>%esp</code> 進新的堆疊。</li><li>kernel mode：不用上述動作。</li><li>接著 push <code>%eflags</code>、<code>%cs</code>、<code>%eip</code>。</li><li>從對應的 IDT 讀取 <code>%eip</code>、<code>%cs</code>。</li></ul><h4 id="File-vector-pl"><a href="#File-vector-pl" class="headerlink" title="File: vector.pl"></a>File: vector.pl</h4><pre class="line-numbers language-pl"><code class="language-pl">#!/usr/bin/perl -w# Generate vectors.S, the trap/interrupt entry points.# There has to be one entry point per interrupt number# since otherwise there's no way for trap() to discover# the interrupt number.print "# generated by vectors.pl - do not edit\n";print "# handlers\n";print ".globl alltraps\n";for(my $i = 0; $i < 256; $i++){    print ".globl vector$i\n";    print "vector$i:\n";    if(!($i == 8 || ($i >= 10 && $i <= 14) || $i == 17)){        print "  pushl \$0\n";    }    print "  pushl \$$i\n";    print "  jmp alltraps\n";}print "\n# vector table\n";print ".data\n";print ".globl vectors\n";print "vectors:\n";for(my $i = 0; $i < 256; $i++){    print "  .long vector$i\n";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>XV6 用 Perl 腳本來生成 IDT 的進入點（<code>vector[]</code>）。</li><li>如果處理器沒有 push 錯誤碼，則在其項 push。</li><li>Push 中斷號碼，跳至 <code>alltraps</code>。</li></ul><h4 id="File-trapret-S"><a href="#File-trapret-S" class="headerlink" title="File: trapret.S"></a>File: trapret.S</h4><pre class="line-numbers language-x86asm"><code class="language-x86asm">#include "mmu.h"  # vectors.S sends all traps here..globl alltrapsalltraps:  # Build trap frame.  pushl %ds  pushl %es  pushl %fs  pushl %gs  pushal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著繼續 push <code>%ds</code>、<code>%es</code>、<code>%fs</code>、<code>%gs</code> 及通用暫存器，現在 kernel stack 包含一個 <code>struct trapframe</code>。</li></ul><p><img src="https://i.imgur.com/fKFlWjq.jpg" alt="trapframe" title="Layout of trapframe"></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//  (150)</span><span class="token keyword">struct</span> trapframe <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// registers as pushed by pusha</span>  uint edi<span class="token punctuation">;</span>  uint esi<span class="token punctuation">;</span>  uint ebp<span class="token punctuation">;</span>  uint oesp<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// useless &amp; ignored</span>  uint ebx<span class="token punctuation">;</span>  uint edx<span class="token punctuation">;</span>  uint ecx<span class="token punctuation">;</span>  uint eax<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// rest of trap frame</span>  ushort gs<span class="token punctuation">;</span>  ushort padding1<span class="token punctuation">;</span>  ushort fs<span class="token punctuation">;</span>  ushort padding2<span class="token punctuation">;</span>  ushort es<span class="token punctuation">;</span>  ushort padding3<span class="token punctuation">;</span>  ushort ds<span class="token punctuation">;</span>  ushort padding4<span class="token punctuation">;</span>  uint trapno<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// below here defined by x86 hardware</span>  uint err<span class="token punctuation">;</span>  uint eip<span class="token punctuation">;</span>  ushort cs<span class="token punctuation">;</span>  ushort padding5<span class="token punctuation">;</span>  uint eflags<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// below here only when crossing rings, such as from user to kernel</span>  uint esp<span class="token punctuation">;</span>  ushort ss<span class="token punctuation">;</span>  ushort padding6<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c">  <span class="token macro property"># Set up data and per-cpu segments.</span>  movw $<span class="token punctuation">(</span>SEG_KDATA<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>ax  movw <span class="token operator">%</span>ax<span class="token punctuation">,</span> <span class="token operator">%</span>ds  movw <span class="token operator">%</span>ax<span class="token punctuation">,</span> <span class="token operator">%</span>es  movw $<span class="token punctuation">(</span>SEG_KCPU<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>ax  movw <span class="token operator">%</span>ax<span class="token punctuation">,</span> <span class="token operator">%</span>fs  movw <span class="token operator">%</span>ax<span class="token punctuation">,</span> <span class="token operator">%</span>gs  <span class="token macro property"># Call trap(tf), where tf=%esp</span>  pushl <span class="token operator">%</span>esp  call trap  addl $<span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">%</span>esp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>push <code>%esp</code>（trap frame），呼叫 <em>trap</em>。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token macro property"># Return falls through to trapret...</span><span class="token punctuation">.</span>globl traprettrapret<span class="token punctuation">:</span>  popal  popl <span class="token operator">%</span>gs  popl <span class="token operator">%</span>fs  popl <span class="token operator">%</span>es  popl <span class="token operator">%</span>ds  addl $<span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token operator">%</span>esp  # trapno and errcode  iret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>trap return 後跳回 user space。</li></ul><hr><h2 id="Code-C-trap-handler"><a href="#Code-C-trap-handler" class="headerlink" title="Code: C trap handler"></a>Code: C trap handler</h2><h3 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>執行 trap</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*tf</code></th></tr></thead><tbody><tr><td>trapframe</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">trap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> trapframe <span class="token operator">*</span>tf<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>tf<span class="token operator">-></span>trapno <span class="token operator">==</span> T_SYSCALL<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>proc<span class="token operator">-></span>killed<span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    proc<span class="token operator">-></span>tf <span class="token operator">=</span> tf<span class="token punctuation">;</span>    <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>proc<span class="token operator">-></span>killed<span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果是 <code>TY_SYSCALL</code>，呼叫 syscall()。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">switch</span><span class="token punctuation">(</span>tf<span class="token operator">-></span>trapno<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_TIMER<span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cpu<span class="token operator">-></span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tickslock<span class="token punctuation">)</span><span class="token punctuation">;</span>      ticks<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ticks<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tickslock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_IDE<span class="token punctuation">:</span>    <span class="token function">ideintr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_IDE<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// Bochs generates spurious IDE1 interrupts.</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_KBD<span class="token punctuation">:</span>    <span class="token function">kbdintr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_COM1<span class="token punctuation">:</span>    <span class="token function">uartintr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">:</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_SPURIOUS<span class="token punctuation">:</span>    <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"cpu%d: spurious interrupt at %x:%x\n"</span><span class="token punctuation">,</span>            cpu<span class="token operator">-></span>id<span class="token punctuation">,</span> tf<span class="token operator">-></span>cs<span class="token punctuation">,</span> tf<span class="token operator">-></span>eip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>檢查是否為硬體中斷</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">//PAGEBREAK: 13</span>  <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>proc <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>tf<span class="token operator">-></span>cs<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// In kernel, it must be our mistake.</span>      <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n"</span><span class="token punctuation">,</span>              tf<span class="token operator">-></span>trapno<span class="token punctuation">,</span> cpu<span class="token operator">-></span>id<span class="token punctuation">,</span> tf<span class="token operator">-></span>eip<span class="token punctuation">,</span> <span class="token function">rcr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"trap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// In user space, assume process misbehaved.</span>    <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"pid %d %s: trap %d err %d on cpu %d "</span>            <span class="token string">"eip 0x%x addr 0x%x--kill proc\n"</span><span class="token punctuation">,</span>            proc<span class="token operator">-></span>pid<span class="token punctuation">,</span> proc<span class="token operator">-></span>name<span class="token punctuation">,</span> tf<span class="token operator">-></span>trapno<span class="token punctuation">,</span> tf<span class="token operator">-></span>err<span class="token punctuation">,</span> cpu<span class="token operator">-></span>id<span class="token punctuation">,</span> tf<span class="token operator">-></span>eip<span class="token punctuation">,</span>             <span class="token function">rcr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    proc<span class="token operator">-></span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Force process exit if it has been killed and is in user space.</span>  <span class="token comment" spellcheck="true">// (If it is still executing in the kernel, let it keep running </span>  <span class="token comment" spellcheck="true">// until it gets to the regular system call return.)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>proc <span class="token operator">&amp;&amp;</span> proc<span class="token operator">-></span>killed <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tf<span class="token operator">-></span>cs<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> DPL_USER<span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Force process to give up CPU on clock tick.</span>  <span class="token comment" spellcheck="true">// If interrupts were on while locks held, would need to check nlock.</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>proc <span class="token operator">&amp;&amp;</span> proc<span class="token operator">-></span>state <span class="token operator">==</span> RUNNING <span class="token operator">&amp;&amp;</span> tf<span class="token operator">-></span>trapno <span class="token operator">==</span> T_IRQ0<span class="token operator">+</span>IRQ_TIMER<span class="token punctuation">)</span>    <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Check if the process has been killed since we yielded</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>proc <span class="token operator">&amp;&amp;</span> proc<span class="token operator">-></span>killed <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>tf<span class="token operator">-></span>cs<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> DPL_USER<span class="token punctuation">)</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果非 system call 或硬體中斷，trap 就認定為一個錯誤：<ul><li>user：cp-&gt;killed (ch5)</li><li>kernel：panic</li></ul></li></ul><hr><h2 id="Code-System-calls（機制）"><a href="#Code-System-calls（機制）" class="headerlink" title="Code: System calls（機制）"></a>Code: System calls（機制）</h2><blockquote><p>File: syscall.c</p></blockquote><ul><li>從 trap frame 中的 <code>%eax</code> 讀取 system call 號碼，及對應 syscall table 的索引。</li><li>如果 system call 號碼是非法的，<code>return -1</code>。</li></ul><h3 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>執行 system call</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">syscall</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num<span class="token punctuation">;</span>  num <span class="token operator">=</span> proc<span class="token operator">-></span>tf<span class="token operator">-></span>eax<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>syscalls<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> syscalls<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    proc<span class="token operator">-></span>tf<span class="token operator">-></span>eax <span class="token operator">=</span> syscalls<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"%d %s: unknown sys call %d\n"</span><span class="token punctuation">,</span>            proc<span class="token operator">-></span>pid<span class="token punctuation">,</span> proc<span class="token operator">-></span>name<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    proc<span class="token operator">-></span>tf<span class="token operator">-></span>eax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>syscalls<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>SYS_fork<span class="token punctuation">]</span>    sys_fork<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exit<span class="token punctuation">]</span>    sys_exit<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_wait<span class="token punctuation">]</span>    sys_wait<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_pipe<span class="token punctuation">]</span>    sys_pipe<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_read<span class="token punctuation">]</span>    sys_read<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_kill<span class="token punctuation">]</span>    sys_kill<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exec<span class="token punctuation">]</span>    sys_exec<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_fstat<span class="token punctuation">]</span>   sys_fstat<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_chdir<span class="token punctuation">]</span>   sys_chdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_dup<span class="token punctuation">]</span>     sys_dup<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_getpid<span class="token punctuation">]</span>  sys_getpid<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sbrk<span class="token punctuation">]</span>    sys_sbrk<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sleep<span class="token punctuation">]</span>   sys_sleep<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_uptime<span class="token punctuation">]</span>  sys_uptime<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_open<span class="token punctuation">]</span>    sys_open<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_write<span class="token punctuation">]</span>   sys_write<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mknod<span class="token punctuation">]</span>   sys_mknod<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_unlink<span class="token punctuation">]</span>  sys_unlink<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_link<span class="token punctuation">]</span>    sys_link<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mkdir<span class="token punctuation">]</span>   sys_mkdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_close<span class="token punctuation">]</span>   sys_close<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// System call numbers</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_fork    1</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_exit    2</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_wait    3</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_pipe    4</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_read    5</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_kill    6</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_exec    7</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_fstat   8</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_chdir   9</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_dup    10</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_getpid 11</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_sbrk   12</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_sleep  13</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_uptime 14</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_open   15</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_write  16</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_mknod  17</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_unlink 18</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_link   19</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_mkdir  20</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_close  21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取得 system call 參數：<ul><li><code>argint</code>：整數</li><li><code>argptr</code>：指標</li><li><code>argstr</code>：字串</li><li><code>argfd</code>：檔案描述符</li></ul></li></ul><hr><h2 id="Code-interrupts"><a href="#Code-interrupts" class="headerlink" title="Code: interrupts"></a>Code: interrupts</h2><h3 id="PIC"><a href="#PIC" class="headerlink" title="PIC"></a>PIC</h3><ul><li>早期主機板（單核心）上有一塊 PIC，code: picirq.c</li><li>多核心主機板的每顆 CPU 都需要一個 PIC，需要一個方法來分發中斷，操作方式分為兩部份：<ul><li>IO APIC (ioapic.c)：於 I/O 系統上</li><li>Local APIC (lapic.c)：與每個 CPU 有關</li></ul></li><li>IO APIC 包含一張表，處理器可以通過記憶體映射 I/O 來寫其中的一項。</li><li>在初始化時，XV6 將 0 中斷映射到 CR0，以此類推，但將其關閉。</li><li>不同的設備自己開啟自己的中斷，同時指定接收中斷的處理器。</li><li><code>%eflags</code> 的 IF bit 是處理器用來控制是否要接收中斷，<code>cli</code> 清除 IF 來關閉中斷，<code>sti</code> 打開。</li></ul><hr><h2 id="Code-硬碟驅動程式"><a href="#Code-硬碟驅動程式" class="headerlink" title="Code: 硬碟驅動程式"></a>Code: 硬碟驅動程式</h2><ul><li>硬碟驅動程式用 <code>struct buf</code> 來表示一個磁碟區</li></ul><h3 id="File-buf-h"><a href="#File-buf-h" class="headerlink" title="File: buf.h"></a>File: buf.h</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> buf <span class="token punctuation">{</span>  <span class="token keyword">int</span> flags<span class="token punctuation">;</span>  uint dev<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// device number</span>  uint sector<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// sector number</span>  <span class="token keyword">struct</span> buf <span class="token operator">*</span>prev<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// LRU cache list</span>  <span class="token keyword">struct</span> buf <span class="token operator">*</span>next<span class="token punctuation">;</span>  <span class="token keyword">struct</span> buf <span class="token operator">*</span>qnext<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// disk queue</span>  uchar data<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// copy of the disk sector</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> B_BUSY  0x1  </span><span class="token comment" spellcheck="true">// buffer is locked by some process</span><span class="token macro property">#<span class="token directive keyword">define</span> B_VALID 0x2  </span><span class="token comment" spellcheck="true">// buffer has been read from disk</span><span class="token macro property">#<span class="token directive keyword">define</span> B_DIRTY 0x4  </span><span class="token comment" spellcheck="true">// buffer needs to be written to disk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>flags</code> 紀錄記憶體與硬碟的關係：<ul><li><code>B_VALID</code> 表示已被讀入</li><li><code>B_DIRTY</code> 表示資料須被寫出</li><li><code>B_BUSY</code> 為一個鎖，代表別的 process 正在使用此 buf</li></ul></li><li>main 呼叫 ideinit 初始化硬碟驅動程式</li></ul><hr><blockquote><p>File: ide.c</p></blockquote><p><i class="fa fa-code"></i> Code: <code>ideinit</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 IDE</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">ideinit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token function">initlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>idelock<span class="token punctuation">,</span> <span class="token string">"ide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">picenable</span><span class="token punctuation">(</span>IRQ_IDE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">ioapicenable</span><span class="token punctuation">(</span>IRQ_IDE<span class="token punctuation">,</span> ncpu <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>呼叫 <code>picenable</code> 打開單處理器的中斷</li><li>呼叫 <code>ioapicenable</code> 打開多處理器的中斷（只打開最後一個 CPU）</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token function">idewait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>idewait</code> 等待硬碟接受命令，直到 busy 位（<code>IDE_BUSY</code>）被清除，ready 位（<code>IDE_DRDY</code>）被設置。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Check if disk 1 is present</span>  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1f6</span><span class="token punctuation">,</span> <span class="token number">0xe0</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">inb</span><span class="token punctuation">(</span><span class="token number">0x1f7</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      havedisk1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Switch back to disk 0.</span>  <span class="token function">outb</span><span class="token punctuation">(</span><span class="token number">0x1f6</span><span class="token punctuation">,</span> <span class="token number">0xe0</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設置完成後，只能通過 buffer cache 調用 <code>iderw</code>，<code>iderw</code> 根據 <code>flags</code> 值更新一個鎖著的 buf:<ul><li>B_DIRTY：將 buf 寫回硬碟</li><li>若 B_VALID 未設置：從硬碟讀資料進 buf</li></ul></li></ul><hr><p><i class="fa fa-code"></i> Code: <code>idewait</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>等待 IDE</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>checkerr</code></th></tr></thead><tbody><tr><td>錯誤碼</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Wait for IDE disk to become ready.</span><span class="token keyword">static</span> <span class="token keyword">int</span><span class="token function">idewait</span><span class="token punctuation">(</span><span class="token keyword">int</span> checkerr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> r<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token function">inb</span><span class="token punctuation">(</span><span class="token number">0x1f7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>IDE_BSY<span class="token operator">|</span>IDE_DRDY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> IDE_DRDY<span class="token punctuation">)</span>     <span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>checkerr <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token punctuation">(</span>IDE_DF<span class="token operator">|</span>IDE_ERR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>iderw</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>讀寫 IDE</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*b</code></th></tr></thead><tbody><tr><td>欲寫入或讀取的 buffer</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">iderw</span><span class="token punctuation">(</span><span class="token keyword">struct</span> buf <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> buf <span class="token operator">*</span><span class="token operator">*</span>pp<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>b<span class="token operator">-></span>flags <span class="token operator">&amp;</span> B_BUSY<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"iderw: buf not busy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">-></span>flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>B_VALID<span class="token operator">|</span>B_DIRTY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> B_VALID<span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"iderw: nothing to do"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">-></span>dev <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>havedisk1<span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"iderw: ide disk 1 not present"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>idelock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//DOC:acquire-lock</span>  <span class="token comment" spellcheck="true">// Append b to idequeue.</span>  b<span class="token operator">-></span>qnext <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>pp<span class="token operator">=</span><span class="token operator">&amp;</span>idequeue<span class="token punctuation">;</span> <span class="token operator">*</span>pp<span class="token punctuation">;</span> pp<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>pp<span class="token punctuation">)</span><span class="token operator">-></span>qnext<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//DOC:insert-queue</span>    <span class="token punctuation">;</span>  <span class="token operator">*</span>pp <span class="token operator">=</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>把 buf b 放置隊伍的末端</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Start disk if necessary.</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>idequeue <span class="token operator">==</span> b<span class="token punctuation">)</span>    <span class="token function">idestart</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果此 buf 在隊首，呼叫 <code>idestart</code> 將其送到硬碟。</li><li>其他情況需等上一個處理完畢時才處理。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Wait for request to finish.</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token operator">-></span>flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>B_VALID<span class="token operator">|</span>B_DIRTY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> B_VALID<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sleep</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>idelock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>idelock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>iderw</code> 將請求加入的隊伍裡，並睡眠，等待 interrupt handler 處理完後更新其 flags。</li><li>最後，硬碟完成其工作並觸發一個中斷，trap 呼叫 <code>ideintr</code> 來處理。</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>ideintr</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>IDE trap</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">ideintr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> buf <span class="token operator">*</span>b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// First queued buffer is the active request.</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>idelock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">=</span> idequeue<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>idelock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// cprintf("spurious IDE interrupt\n");</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  idequeue <span class="token operator">=</span> b<span class="token operator">-></span>qnext<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Read data if needed.</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>b<span class="token operator">-></span>flags <span class="token operator">&amp;</span> B_DIRTY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">idewait</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">insl</span><span class="token punctuation">(</span><span class="token number">0x1f0</span><span class="token punctuation">,</span> b<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token number">512</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查詢隊首的 buf，如果正在被寫入，且 IDE 有資料在等待，呼叫 <code>insl</code> 將資料寫入。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Wake process waiting for this buf.</span>  b<span class="token operator">-></span>flags <span class="token operator">|</span><span class="token operator">=</span> B_VALID<span class="token punctuation">;</span>  b<span class="token operator">-></span>flags <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>B_DIRTY<span class="token punctuation">;</span>  <span class="token function">wakeup</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設置 <code>B_VALID</code>，清除 <code>B_DIRTY</code>。</li><li>喚醒 <code>b</code></li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Start disk on next buf in queue.</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>idequeue <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">idestart</span><span class="token punctuation">(</span>idequeue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>idelock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後將下一個 buf 傳給硬碟。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> XV6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XV6 </tag>
            
            <tag> kernel </tag>
            
            <tag> interrupt </tag>
            
            <tag> trap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XV6 Ch2 Page tables</title>
      <link href="/xv6-2-mem/"/>
      <url>/xv6-2-mem/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: vm.c</p></blockquote><h2 id="分頁硬體"><a href="#分頁硬體" class="headerlink" title="分頁硬體"></a>分頁硬體</h2><ul><li>PTE：Page table entry，包含 20-bit PPN 及 flags</li><li>PPN：Physical Page number</li><li>x86的頁表：$2^{20}$ 條 PTE。</li></ul><h3 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h3><blockquote><p>分頁硬體使用虛擬位址找到對應的 PTE，接著把高 20-bit 替換為 PTE 的 PPN，低 12-bit 直接沿用，即完成轉譯的動作。</p></blockquote><h3 id="XV6-頁表"><a href="#XV6-頁表" class="headerlink" title="XV6 頁表"></a>XV6 頁表</h3><p><img src="https://i.imgur.com/Jj4vbJt.png" alt="" title="x86 page table hardware."></p><ul><li>一個頁表在物理記憶體中為一顆兩層的樹<ul><li>樹根為一個 4096 字節的目錄（page dir），包含 1024 個類 PTE，分別指向不同的頁表頁（page table page）。</li><li>每頁包含 1024 個 32-bit PTE。</li></ul></li><li>轉譯過程<ol><li>分頁硬體用虛擬地址的高 10-bit 找到指定的頁。</li><li>如果指向的頁存在的話，繼續使用接著的 10-bit 來找到指定的 PTE。</li><li>不存在的話，拋出錯誤。</li></ol></li></ul><h3 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h3><table><thead><tr><th style="text-align:center">flags</th><th>name</th><th>為 1 時</th><th>為 0 時 </th></tr></thead><tbody><tr><td style="text-align:center">P</td><td>Present</td><td>表示頁存在</td><td>不存在</td></tr><tr><td style="text-align:center">W</td><td>Writable</td><td>可以寫入</td><td>只能讀/取</td></tr><tr><td style="text-align:center">U</td><td>User</td><td>user 能使用此頁</td><td>只有 kernel 能使用</td></tr><tr><td style="text-align:center">WT</td><td>-</td><td>Write-through</td><td>Write-back</td></tr><tr><td style="text-align:center">CD</td><td>Cache Disable</td><td>不會對此頁進行 cache</td><td>進行 cache</td></tr><tr><td style="text-align:center">A</td><td>Accessed</td><td>為 0 時被存取， 處理器會將此位設為 1</td><td>-</td></tr><tr><td style="text-align:center">D</td><td>Dirty</td><td>為 0 時寫入此頁， 處理器會將此位設為 1</td><td>-</td></tr><tr><td style="text-align:center">AVL</td><td>Available for system use</td><td>-</td><td>-</td></tr></tbody></table><p><strong>註：</strong>只有軟體可以將 A、D 清 0。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[記憶體管理／分頁架構](https://www.csie.ntu.edu.tw/~wcchen/asm98/asm/proj/b85506061/chap2/paging.html)">[1]</span></a></sup></p><h3 id="名詞解釋"><a href="#名詞解釋" class="headerlink" title="名詞解釋"></a>名詞解釋</h3><ul><li>物理記憶體：DRAM</li><li>物理地址：DRAM 的位址</li></ul><hr><h2 id="Process-address-space"><a href="#Process-address-space" class="headerlink" title="Process address space"></a>Process address space</h2><ul><li><code>main</code> 呼叫 <code>kvmalloc</code> 跳到新的頁表，重新映射至記憶體。<br><img src="https://i.imgur.com/xq8Po1n.png" alt="" title="Layout of the virtual address space of a process and physical address space."></li><li>每個 process 都有自己的頁表，在切換 process 時也會切換頁表。</li><li>process 的頁表從 0 開始，最多至 <code>KERNBASE</code>，限制 process 最多使用 2GB。</li><li>如果需要更多記憶體時：<ol><li>XV6 先找到一個空的頁</li><li>將對應的 PTE 加入 process 的頁表裡</li></ol></li><li>每個 process 的頁表都有包含對應的 kernel 映射（ <code>KERNBASE</code> 之上），這樣當發生中斷時就不需要切換頁表。</li><li><code>KERNBASE</code> 之上的頁對應的 PTE，PTE_U 均設為 0。</li></ul><hr><h2 id="Code-建立-address-space"><a href="#Code-建立-address-space" class="headerlink" title="Code: 建立 address space"></a>Code: 建立 address space</h2><ul><li><code>main</code> 呼叫 <code>kvmalloc</code> 來建立 <code>KERNBASE</code> 之上的頁表</li></ul><h3 id="kvmalloc"><a href="#kvmalloc" class="headerlink" title="kvmalloc"></a>kvmalloc</h3><p id="kvmalloc"></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 kernel page</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Allocate one page table for the machine for the kernel address</span><span class="token comment" spellcheck="true">// space for scheduler processes.</span><span class="token keyword">void</span><span class="token function">kvmalloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  kpgdir <span class="token operator">=</span> <span class="token function">setupkvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">switchkvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建立頁表的工作由 <code>setupkvm</code> 完成</li></ul><h3 id="setupkvm"><a href="#setupkvm" class="headerlink" title="setupkvm"></a>setupkvm</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 kernel page</td><td>PDE</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Set up kernel part of a page table.</span>pde_t<span class="token operator">*</span><span class="token function">setupkvm</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  pde_t <span class="token operator">*</span>pgdir<span class="token punctuation">;</span>  <span class="token keyword">struct</span> kmap <span class="token operator">*</span>k<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pgdir <span class="token operator">=</span> <span class="token punctuation">(</span>pde_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先分配一頁來存放目錄</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token function">memset</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">p2v</span><span class="token punctuation">(</span>PHYSTOP<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>DEVSPACE<span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"PHYSTOP too high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> kmap<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>kmap<span class="token punctuation">[</span><span class="token function">NELEM</span><span class="token punctuation">(</span>kmap<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mappages</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> k<span class="token operator">-></span>virt<span class="token punctuation">,</span> k<span class="token operator">-></span>phys_end <span class="token operator">-</span> k<span class="token operator">-></span>phys_start<span class="token punctuation">,</span>                 <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>k<span class="token operator">-></span>phys_start<span class="token punctuation">,</span> k<span class="token operator">-></span>perm<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> pgdir<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著呼叫 <code>mappages</code> 來建立 kernel 所需的映射。</li><li>映射存放在 kmap 裡</li></ul><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// This table defines the kernel's mappings, which are present in</span><span class="token comment" spellcheck="true">// every process's page table.</span><span class="token keyword">static</span> <span class="token keyword">struct</span> kmap <span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token operator">*</span>virt<span class="token punctuation">;</span>  uint phys_start<span class="token punctuation">;</span>  uint phys_end<span class="token punctuation">;</span>  <span class="token keyword">int</span> perm<span class="token punctuation">;</span><span class="token punctuation">}</span> kmap<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>KERNBASE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>             EXTMEM<span class="token punctuation">,</span>    PTE_W<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// I/O space</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>KERNLINK<span class="token punctuation">,</span> <span class="token function">V2P</span><span class="token punctuation">(</span>KERNLINK<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">V2P</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// kern text+rodata</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span>     <span class="token function">V2P</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>     PHYSTOP<span class="token punctuation">,</span>   PTE_W<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// kern data+memory</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>DEVSPACE<span class="token punctuation">,</span> DEVSPACE<span class="token punctuation">,</span>      <span class="token number">0</span><span class="token punctuation">,</span>         PTE_W<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// more devices</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>kmap 包含 kernel 的資料及指令、<code>PHYTOP</code>以下的物理記憶體、及 I/O 設備的記憶體。</li><li>這裡不會建立有關 user 的映射</li></ul><h3 id="mappages"><a href="#mappages" class="headerlink" title="mappages"></a>mappages</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 PTE</td><td>0 (ok) / -1 (err)</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Create PTEs for virtual addresses starting at va that refer to</span><span class="token comment" spellcheck="true">// physical addresses starting at pa. va and size might not</span><span class="token comment" spellcheck="true">// be page-aligned.</span><span class="token keyword">static</span> <span class="token keyword">int</span><span class="token function">mappages</span><span class="token punctuation">(</span>pde_t <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>va<span class="token punctuation">,</span> uint size<span class="token punctuation">,</span> uint pa<span class="token punctuation">,</span> <span class="token keyword">int</span> perm<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>last<span class="token punctuation">;</span>  pte_t <span class="token operator">*</span>pte<span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PGROUNDDOWN</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>va<span class="token punctuation">)</span><span class="token punctuation">;</span>  last <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PGROUNDDOWN</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>va<span class="token punctuation">)</span> <span class="token operator">+</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pte <span class="token operator">=</span> <span class="token function">walkpgdir</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先呼叫 <code>walkpgdir</code> 來找到對應的 PTE</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_P<span class="token punctuation">)</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"remap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>接著確認 PTE_P flags</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token operator">*</span>pte <span class="token operator">=</span> pa <span class="token operator">|</span> perm <span class="token operator">|</span> PTE_P<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> last<span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    a <span class="token operator">+</span><span class="token operator">=</span> PGSIZE<span class="token punctuation">;</span>    pa <span class="token operator">+</span><span class="token operator">=</span> PGSIZE<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後初始化 PTE。</li><li>問題：如何初始化</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>walkpgdir</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>從目錄尋找對應的 PTE</td><td>PTE</td></tr></tbody></table><table><thead><tr><th><code>*pgdir</code></th><th><code>*va</code></th><th><code>alloc</code></th></tr></thead><tbody><tr><td>目標目錄</td><td>目標虛擬地址</td><td>是否有 alloc</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Return the address of the PTE in page table pgdir</span><span class="token comment" spellcheck="true">// that corresponds to virtual address va.  If alloc!=0,</span><span class="token comment" spellcheck="true">// create any required page table pages.</span><span class="token keyword">static</span> pte_t <span class="token operator">*</span><span class="token function">walkpgdir</span><span class="token punctuation">(</span>pde_t <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>va<span class="token punctuation">,</span> <span class="token keyword">int</span> alloc<span class="token punctuation">)</span><span class="token punctuation">{</span>  pde_t <span class="token operator">*</span>pde<span class="token punctuation">;</span>  pte_t <span class="token operator">*</span>pgtab<span class="token punctuation">;</span>  pde <span class="token operator">=</span> <span class="token operator">&amp;</span>pgdir<span class="token punctuation">[</span><span class="token function">PDX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>pde <span class="token operator">&amp;</span> PTE_P<span class="token punctuation">)</span><span class="token punctuation">{</span>    pgtab <span class="token operator">=</span> <span class="token punctuation">(</span>pte_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">p2v</span><span class="token punctuation">(</span><span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pde<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>alloc <span class="token operator">||</span> <span class="token punctuation">(</span>pgtab <span class="token operator">=</span> <span class="token punctuation">(</span>pte_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Make sure all those PTE_P bits are zero.</span>    <span class="token function">memset</span><span class="token punctuation">(</span>pgtab<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// The permissions here are overly generous, but they can</span>    <span class="token comment" spellcheck="true">// be further restricted by the permissions in the page table </span>    <span class="token comment" spellcheck="true">// entries, if necessary.</span>    <span class="token operator">*</span>pde <span class="token operator">=</span> <span class="token function">v2p</span><span class="token punctuation">(</span>pgtab<span class="token punctuation">)</span> <span class="token operator">|</span> PTE_P <span class="token operator">|</span> PTE_W <span class="token operator">|</span> PTE_U<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>pgtab<span class="token punctuation">[</span><span class="token function">PTX</span><span class="token punctuation">(</span>va<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">switchkvm</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">lcr3</span><span class="token punctuation">(</span><span class="token function">v2p</span><span class="token punctuation">(</span>kpgdir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// switch to the kernel page table</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="分配物理記憶體"><a href="#分配物理記憶體" class="headerlink" title="分配物理記憶體"></a>分配物理記憶體</h2><p>kernel 在運行時須為以下物件分配物理記憶體：</p><ul><li>Page table</li><li>Process 的 user 記憶體</li><li>kernel stack</li><li>Pipe buffers</li></ul><h2 id="Code-物理記憶體分配器"><a href="#Code-物理記憶體分配器" class="headerlink" title="Code: 物理記憶體分配器"></a>Code: 物理記憶體分配器</h2><blockquote><p>File: kalloc.c</p></blockquote><ul><li>分配器為一個可分配的記憶體頁所構成的 <strong>free list</strong></li><li><code>main</code> 呼叫 <code>kinit1(end, P2V(4*1024*1024))</code> 及 <code>kinit2(P2V(4*1024*1024), P2V(PHYSTOP))</code> 初始化分配器</li></ul><p id="kinit"></p><h3 id="kinit1-2"><a href="#kinit1-2" class="headerlink" title="kinit1 / 2"></a>kinit1 / 2</h3><p><i class="fa fa-code"></i> Code: <code>kinit1</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化物理記憶體分配器</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*vstart</code></th><th><code>*vend</code></th></tr></thead><tbody><tr><td>起始位址</td><td>結束位址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">kinit1</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>vstart<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>vend<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">initlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmem<span class="token punctuation">.</span>lock<span class="token punctuation">,</span> <span class="token string">"kmem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  kmem<span class="token punctuation">.</span>use_lock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">freerange</span><span class="token punctuation">(</span>vstart<span class="token punctuation">,</span> vend<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>kinit2</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化物理記憶體分配器</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*vstart</code></th><th><code>*vend</code></th></tr></thead><tbody><tr><td>起始位址</td><td>結束位址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">kinit2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>vstart<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>vend<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">freerange</span><span class="token punctuation">(</span>vstart<span class="token punctuation">,</span> vend<span class="token punctuation">)</span><span class="token punctuation">;</span>  kmem<span class="token punctuation">.</span>use_lock <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>kinit1 / 2</code> 呼叫 <code>freerange</code> 將記憶體加入 free list</li></ul><h3 id="freerange"><a href="#freerange" class="headerlink" title="freerange"></a>freerange</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放一段記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*vstart</code></th><th><code>*vend</code></th></tr></thead><tbody><tr><td>起始位址</td><td>結束位址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">freerange</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>vstart<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>vend<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>  p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PGROUNDUP</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>vstart<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> p <span class="token operator">+</span> PGSIZE <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>vend<span class="token punctuation">;</span> p <span class="token operator">+</span><span class="token operator">=</span> PGSIZE<span class="token punctuation">)</span>    <span class="token function">kfree</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>freerange</code> 呼叫 <code>kfree</code> 來完成工作</li></ul><h3 id="kfree"><a href="#kfree" class="headerlink" title="kfree"></a>kfree</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*v</code></th></tr></thead><tbody><tr><td>欲 free 的虛擬地址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//PAGEBREAK: 21</span><span class="token comment" spellcheck="true">// Free the page of physical memory pointed at by v,</span><span class="token comment" spellcheck="true">// which normally should have been returned by a</span><span class="token comment" spellcheck="true">// call to kalloc().  (The exception is when</span><span class="token comment" spellcheck="true">// initializing the allocator; see kinit above.)</span><span class="token keyword">void</span><span class="token function">kfree</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> run <span class="token operator">*</span>r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint<span class="token punctuation">)</span>v <span class="token operator">%</span> PGSIZE <span class="token operator">||</span> v <span class="token operator">&lt;</span> end <span class="token operator">||</span> <span class="token function">v2p</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">>=</span> PHYSTOP<span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"kfree"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Fill with junk to catch dangling refs.</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先將每個字節設為 1</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">if</span><span class="token punctuation">(</span>kmem<span class="token punctuation">.</span>use_lock<span class="token punctuation">)</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmem<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> run<span class="token operator">*</span><span class="token punctuation">)</span>v<span class="token punctuation">;</span>  r<span class="token operator">-></span>next <span class="token operator">=</span> kmem<span class="token punctuation">.</span>freelist<span class="token punctuation">;</span>  kmem<span class="token punctuation">.</span>freelist <span class="token operator">=</span> r<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>kmem<span class="token punctuation">.</span>use_lock<span class="token punctuation">)</span>    <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kmem<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著把 v 轉為 <code>struct run</code> 的指標，插在 free list 的第一顆。</li></ul><hr><h2 id="User-part-of-an-address-space"><a href="#User-part-of-an-address-space" class="headerlink" title="User part of an address space"></a>User part of an address space</h2><p><img src="https://i.imgur.com/sZaPwda.png" alt="" title="Memory layout of a user process with its initial stack"></p><h2 id="Code-sbrk"><a href="#Code-sbrk" class="headerlink" title="Code: sbrk"></a>Code: sbrk</h2><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>增長/收縮 process 的記憶體</td><td>記憶體大小（結果）</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">sys_sbrk</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> addr<span class="token punctuation">;</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  addr <span class="token operator">=</span> proc<span class="token operator">-></span>sz<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">growproc</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>sbrk</code> 透過呼叫 <code>growproc</code> 來完成工作。</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>growproc</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>增長/收縮 process 的記憶體</td><td>0 (ok) / -1 (err)</td></tr></tbody></table><table><thead><tr><th><code>n</code></th></tr></thead><tbody><tr><td>增長/收縮大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Grow current process's memory by n bytes.</span><span class="token comment" spellcheck="true">// Return 0 on success, -1 on failure.</span><span class="token keyword">int</span><span class="token function">growproc</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  uint sz<span class="token punctuation">;</span>  sz <span class="token operator">=</span> proc<span class="token operator">-></span>sz<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sz <span class="token operator">=</span> <span class="token function">allocuvm</span><span class="token punctuation">(</span>proc<span class="token operator">-></span>pgdir<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> sz <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sz <span class="token operator">=</span> <span class="token function">deallocuvm</span><span class="token punctuation">(</span>proc<span class="token operator">-></span>pgdir<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> sz <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  proc<span class="token operator">-></span>sz <span class="token operator">=</span> sz<span class="token punctuation">;</span>  <span class="token function">switchuvm</span><span class="token punctuation">(</span>proc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 n&gt;0：<code>allocuvm</code></li><li>如果 n&lt;0：<code>deallocuvm</code></li></ul><hr><h3 id="allocuvm、deallocuvm"><a href="#allocuvm、deallocuvm" class="headerlink" title="allocuvm、deallocuvm"></a>allocuvm、deallocuvm</h3><p><i class="fa fa-code"></i> Code: <code>allocuvm</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>增長記憶體</td><td>記憶體大小（結果）</td></tr></tbody></table><table><thead><tr><th><code>*pgdir</code></th><th><code>oldsz</code></th><th><code>newsz</code></th></tr></thead><tbody><tr><td>從該目錄尋找可用記憶體</td><td>舊的大小</td><td>新的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Allocate page tables and physical memory to grow process from oldsz to</span><span class="token comment" spellcheck="true">// newsz, which need not be page aligned.  Returns new size or 0 on error.</span><span class="token keyword">int</span><span class="token function">allocuvm</span><span class="token punctuation">(</span>pde_t <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> uint oldsz<span class="token punctuation">,</span> uint newsz<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>mem<span class="token punctuation">;</span>  uint a<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>newsz <span class="token operator">>=</span> KERNBASE<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>newsz <span class="token operator">&lt;</span> oldsz<span class="token punctuation">)</span>    <span class="token keyword">return</span> oldsz<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先檢查是否有要超過大小，及動作是否合法。</li></ul><pre class="line-numbers language-c"><code class="language-c">  a <span class="token operator">=</span> <span class="token function">PGROUNDUP</span><span class="token punctuation">(</span>oldsz<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> newsz<span class="token punctuation">;</span> a <span class="token operator">+</span><span class="token operator">=</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">{</span>    mem <span class="token operator">=</span> <span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mem <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"allocuvm out of memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">deallocuvm</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> newsz<span class="token punctuation">,</span> oldsz<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mappages</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> PGSIZE<span class="token punctuation">,</span> <span class="token function">v2p</span><span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">,</span> PTE_W<span class="token operator">|</span>PTE_U<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newsz<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著透過 <code>kalloc()</code> 來要記憶體，並將要到的記憶體清空</li><li>最後回傳 process 目前總共的大小</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>deallocuvm</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>縮減記憶體</td><td>記憶體大小（結果）</td></tr></tbody></table><table><thead><tr><th><code>*pgdir</code></th><th><code>oldsz</code></th><th><code>newsz</code></th></tr></thead><tbody><tr><td>從該目錄釋放記憶體</td><td>舊的大小</td><td>新的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Deallocate user pages to bring the process size from oldsz to</span><span class="token comment" spellcheck="true">// newsz.  oldsz and newsz need not be page-aligned, nor does newsz</span><span class="token comment" spellcheck="true">// need to be less than oldsz.  oldsz can be larger than the actual</span><span class="token comment" spellcheck="true">// process size.  Returns the new process size.</span><span class="token keyword">int</span><span class="token function">deallocuvm</span><span class="token punctuation">(</span>pde_t <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> uint oldsz<span class="token punctuation">,</span> uint newsz<span class="token punctuation">)</span><span class="token punctuation">{</span>  pte_t <span class="token operator">*</span>pte<span class="token punctuation">;</span>  uint a<span class="token punctuation">,</span> pa<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>newsz <span class="token operator">>=</span> oldsz<span class="token punctuation">)</span>    <span class="token keyword">return</span> oldsz<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一樣先檢查動作是否合法</li></ul><pre class="line-numbers language-c"><code class="language-c">  a <span class="token operator">=</span> <span class="token function">PGROUNDUP</span><span class="token punctuation">(</span>newsz<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> a  <span class="token operator">&lt;</span> oldsz<span class="token punctuation">;</span> a <span class="token operator">+</span><span class="token operator">=</span> PGSIZE<span class="token punctuation">)</span><span class="token punctuation">{</span>    pte <span class="token operator">=</span> <span class="token function">walkpgdir</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pte<span class="token punctuation">)</span>      a <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>NPTENTRIES <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> PGSIZE<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>pte <span class="token operator">&amp;</span> PTE_P<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      pa <span class="token operator">=</span> <span class="token function">PTE_ADDR</span><span class="token punctuation">(</span><span class="token operator">*</span>pte<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>pa <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"kfree"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">char</span> <span class="token operator">*</span>v <span class="token operator">=</span> <span class="token function">p2v</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">kfree</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span>pte <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newsz<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著一個一個 pte free，先將 flags 歸0，再透過 <code>kfree</code> 完成工作。</li></ul><hr><h2 id="Code-exec"><a href="#Code-exec" class="headerlink" title="Code: exec"></a>Code: exec</h2><ul><li>功用：創建 user part address space</li><li>概觀：打開及讀取 ELF 文件來初始化 user part</li></ul><h3 id="struct-elfhdr"><a href="#struct-elfhdr" class="headerlink" title="struct elfhdr"></a>struct elfhdr</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// File header</span><span class="token keyword">struct</span> elfhdr <span class="token punctuation">{</span>  uint magic<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// must equal ELF_MAGIC</span>  uchar elf<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  ushort type<span class="token punctuation">;</span>  ushort machine<span class="token punctuation">;</span>  uint version<span class="token punctuation">;</span>  uint entry<span class="token punctuation">;</span>  uint phoff<span class="token punctuation">;</span>  uint shoff<span class="token punctuation">;</span>  uint flags<span class="token punctuation">;</span>  ushort ehsize<span class="token punctuation">;</span>  ushort phentsize<span class="token punctuation">;</span>  ushort phnum<span class="token punctuation">;</span>  ushort shentsize<span class="token punctuation">;</span>  ushort shnum<span class="token punctuation">;</span>  ushort shstrndx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一個 ELF 文件包含一個 elfhdr、program setion hdr(struct proghdr)</li></ul><h3 id="struct-proghdr"><a href="#struct-proghdr" class="headerlink" title="struct proghdr"></a>struct proghdr</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Program section header</span><span class="token keyword">struct</span> proghdr <span class="token punctuation">{</span>  uint type<span class="token punctuation">;</span>  uint off<span class="token punctuation">;</span>  uint vaddr<span class="token punctuation">;</span>  uint paddr<span class="token punctuation">;</span>  uint filesz<span class="token punctuation">;</span>  uint memsz<span class="token punctuation">;</span>  uint flags<span class="token punctuation">;</span>  uint align<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一個 proghdr 描述了須載入至記憶體的 program section</li></ul><blockquote><p>XV6 的 program 只有一個 section，其他 OS 可能會有多個。</p></blockquote><h3 id="File-exec-c"><a href="#File-exec-c" class="headerlink" title="File: exec.c"></a>File: exec.c</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"types.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"param.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"memlayout.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"mmu.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"proc.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"defs.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"x86.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"elf.h"</span></span><span class="token keyword">int</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>last<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> off<span class="token punctuation">;</span>  uint argc<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> sp<span class="token punctuation">,</span> ustack<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">+</span>MAXARG<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> elfhdr elf<span class="token punctuation">;</span>  <span class="token keyword">struct</span> inode <span class="token operator">*</span>ip<span class="token punctuation">;</span>  <span class="token keyword">struct</span> proghdr ph<span class="token punctuation">;</span>  pde_t <span class="token operator">*</span>pgdir<span class="token punctuation">,</span> <span class="token operator">*</span>oldpgdir<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ip <span class="token operator">=</span> <span class="token function">namei</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>用 <code>namei</code> 打開二進制文件（ch6 會說明）</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token function">ilock</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>  pgdir <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Check ELF header</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">readi</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>elf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>elf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>elf<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">goto</span> bad<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>magic <span class="token operator">!=</span> ELF_MAGIC<span class="token punctuation">)</span>    <span class="token keyword">goto</span> bad<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著確認 ELF 是否正確（藉由 ELF_magic）</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pgdir <span class="token operator">=</span> <span class="token function">setupkvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">goto</span> bad<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Load program into memory.</span>  sz <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> off<span class="token operator">=</span>elf<span class="token punctuation">.</span>phoff<span class="token punctuation">;</span> i<span class="token operator">&lt;</span>elf<span class="token punctuation">.</span>phnum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> off<span class="token operator">+</span><span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">readi</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ph<span class="token punctuation">,</span> off<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ph<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ph<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">goto</span> bad<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ph<span class="token punctuation">.</span>type <span class="token operator">!=</span> ELF_PROG_LOAD<span class="token punctuation">)</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ph<span class="token punctuation">.</span>memsz <span class="token operator">&lt;</span> ph<span class="token punctuation">.</span>filesz<span class="token punctuation">)</span>      <span class="token keyword">goto</span> bad<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sz <span class="token operator">=</span> <span class="token function">allocuvm</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> ph<span class="token punctuation">.</span>vaddr <span class="token operator">+</span> ph<span class="token punctuation">.</span>memsz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">goto</span> bad<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">loaduvm</span><span class="token punctuation">(</span>pgdir<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>ph<span class="token punctuation">.</span>vaddr<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> ph<span class="token punctuation">.</span>off<span class="token punctuation">,</span> ph<span class="token punctuation">.</span>filesz<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">goto</span> bad<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">iunlockput</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>  ip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>setupkvm</code> 分配一個沒有 user part 的頁</li><li><code>allocuvm</code> 分配給每個 ELF 的 program section 記憶體。</li><li><code>loaduvm</code> 將 section 載入至記憶體</li></ol><p><code>`</code>c<br>  // Allocate two pages at the next page boundary.<br>  // Make the first inaccessible.  Use the second as the user stack.<br>  sz = PGROUNDUP(sz);<br>  if((sz = allocuvm(pgdir, sz, sz + 2<em>PGSIZE)) == 0)<br>    goto bad;<br>  clearpteu(pgdir, (char</em>)(sz - 2*PGSIZE));<br>  sp = sz;</p><p>  // Push argument strings, prepare rest of stack in ustack.<br>  for(argc = 0; argv[argc]; argc++) {<br>    if(argc &gt;= MAXARG)<br>      goto bad;<br>    sp = (sp - (strlen(argv[argc]) + 1)) &amp; ~3;<br>    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) &lt; 0)<br>      goto bad;<br>    ustack[3+argc] = sp;<br>  }<br>  ustack[3+argc] = 0;</p><p>  ustack[0] = 0xffffffff;  // fake return PC<br>  ustack[1] = argc;<br>  ustack[2] = sp - (argc+1)*4;  // argv pointer</p><p>  sp -= (3+argc+1) <em> 4;<br>  if(copyout(pgdir, sp, ustack, (3+argc+1)</em>4) &lt; 0)<br>    goto bad;</p><p>  // Save program name for debugging.<br>  for(last=s=path; <em>s; s++)<br>    if(</em>s == ‘/‘)<br>      last = s+1;<br>  safestrcpy(proc-&gt;name, last, sizeof(proc-&gt;name));</p><p>  // Commit to the user image.<br>  oldpgdir = proc-&gt;pgdir;<br>  proc-&gt;pgdir = pgdir;<br>  proc-&gt;sz = sz;<br>  proc-&gt;tf-&gt;eip = elf.entry;  // main<br>  proc-&gt;tf-&gt;esp = sp;<br>  switchuvm(proc);<br>  freevm(oldpgdir);<br>  return 0;</p><p> bad:<br>  if(pgdir)<br>    freevm(pgdir);<br>  if(ip)<br>    iunlockput(ip);<br>  return -1;<br>}<br><code>`</code></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.csie.ntu.edu.tw/~wcchen/asm98/asm/proj/b85506061/chap2/paging.html" target="_blank" rel="noopener">記憶體管理／分頁架構</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><p></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> XV6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XV6 </tag>
            
            <tag> kernel </tag>
            
            <tag> 分頁 </tag>
            
            <tag> 記憶體管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XV6 Ch1 OS 組織</title>
      <link href="/xv6-1-process/"/>
      <url>/xv6-1-process/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>OS 必須具備三項技能：多工、獨立及交流。</p></blockquote><h2 id="kernel-組織"><a href="#kernel-組織" class="headerlink" title="kernel 組織"></a>kernel 組織</h2><ul><li><strong>Monolithic kernel</strong>：整個 OS 都位於 kernel 中，如此一來所有 system calls 都會在 kernel 中執行（XV6）。<ul><li>好處<ol><li>設計者不須決定 OS 的哪些部份不需要完整的硬體特權。</li><li>更方便的讓不同部份的 OS 去合作。</li></ol></li><li>壞處<ol><li>通常在不同部份的 OS 中的介面是複雜的。</li><li>這會容易讓開發者出錯。</li></ol></li></ul></li><li><strong>Microkernel</strong>：為了減少 kernel 出錯的風險，設計者可以將 kernel mode 上執行的 OS 程式碼最小化，並大讓OS 在 user mode 中執行。</li></ul><p><img src="https://i.imgur.com/lCf7yfw.png" alt="microkernel" title="A mkernel with a file system server"></p><hr><h2 id="Process-概觀"><a href="#Process-概觀" class="headerlink" title="Process 概觀"></a>Process 概觀</h2><ul><li>為 UNIX（XV6） 中的一個獨立單元。</li><li>確保一個 process 不會破壞或是竊取另一程序的記憶體、CPU、檔案描述符等等。</li><li>亦確保 kernel 不會被破壞。</li><li>Process 為抽象的，這讓一個程式可以假設它佔有一台虛擬機器，即一個接近私有的記憶體或是 address space，其他的 process 不可以 r/w。</li><li>私有的 adderss space 由不同的 page table 實做，即一個 process 有一個 page table</li><li>每個 process 的 page 都分為 kernel 及 user（如上圖），因此當 process 呼叫一個 system call 時，會直接在自己的 kernel 映射（mapping）中執行。</li><li>Thread：用來執行指令，可以被暫緩，稍後再恢復運作。</li><li>大部分 thread 的狀態（區域變數等）被保存在 thread 的堆疊上，每個 process 有兩個堆疊：user/kernel 堆疊。<ul><li>user 指令執行時，只會用到 user 堆疊，此時 kernel 堆疊為空。</li><li>kernel 指令執行時，user 堆疊的資料不會清空，也不會使用到。</li></ul></li><li><code>p-&gt;state</code> 指 process 的狀態：新建、準備執行、執行中、等待I/O及退出。</li><li><code>p-&gt;pgdir</code>：保存 process 的 page table。</li></ul><p><img src="https://i.imgur.com/AQ9pMhW.png" alt="address space" title="Layout of a virtual address space"></p><hr><h2 id="Code-第一個-address-space"><a href="#Code-第一個-address-space" class="headerlink" title="Code: 第一個 address space"></a>Code: 第一個 address space</h2><ul><li><p>XV6 為 kernel 建立第一個 address space 的流程：</p><ol><li>開機</li><li>初始化自己</li><li>從硬碟中讀取 boot loader 至記憶體中執行。</li><li>Boot loader 從硬碟讀取 kernel 並從 <em>entry.s</em> 開始執行。</li><li>Boot loader 會把 XV6 的 kernel 載入實體位址 0x100000。</li><li>為了讓剩下的 kernel 能夠執行，設置一個 page table，將虛擬位址 0x80000000（KERNBASE）映射到實體位址 0x0。將兩個虛擬位址映射到同一個實體位址是 page 的常見手法。</li><li><p>跳到 kernel 的 c code，並在高位址上執行：</p><ul><li><code>%esp</code> 指向高位址的 stack 記憶體。</li><li>跳到高位址的 <em>main</em>。</li></ul><p><img src="https://i.imgur.com/aks2sld.png" alt="address space" title="Layout of a virtual address space"></p></li></ol></li></ul><blockquote><p>File: entry.s</p></blockquote><pre class="line-numbers language-x86asm"><code class="language-x86asm">_start = V2P_WO(entry)# Entering XV6 on boot processor, with paging off..globl entryentry:    # Turn on page size extension for 4Mbyte pages    movl    %cr4, %eax    orl     $(CR4_PSE), %eax    movl    %eax, %cr4    # Set page directory    movl    $(V2P_WO(entrypgdir)), %eax    movl    %eax, %cr3    # Turn on paging.    movl    %cr0, %eax    orl     $(CR0_PG|CR0_WP), %eax    movl    %eax, %cr0    # Set up the stack pointer.    movl $(stack + KSTACKSIZE), %esp    # Jump to main(), and switch to executing at    # high addresses. The indirect call is needed because    # the assembler produces a PC-relative instruction    # for a direct jump.    mov $main, %eax    jmp *%eax.comm stack, KSTACKSIZE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Code-建立第一個-process"><a href="#Code-建立第一個-process" class="headerlink" title="Code: 建立第一個 process"></a>Code: 建立第一個 process</h2><blockquote><p>File: proc.c</p></blockquote><ul><li>呼叫 <code>userinit()</code> 來建立第一個 process（只有在第一個process時會呼叫）。</li><li>呼叫 <code>allocproc()</code>（每個 process 都會呼叫）。</li><li><code>Allocproc</code> 在 process table 中分配一個 slot（<code>struct proc</code>），並初始化有關 kernel thread 的 process 片段。</li><li><code>Allocproc</code> 掃描 proc tabel，找到 <code>p-&gt;state</code> 是 <code>UNUSED</code>，接著設定為 <code>EMBRYO</code> 來標示被使用，並給予一組唯一的 pid。</li></ul><h3 id="allocproc"><a href="#allocproc" class="headerlink" title="allocproc"></a>allocproc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立一個 process</td><td>process 結構</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Look in the process table for an UNUSED proc.</span><span class="token comment" spellcheck="true">// If found, change state to EMBRYO and initialize</span><span class="token comment" spellcheck="true">// state required to run in the kernel.</span><span class="token comment" spellcheck="true">// Otherwise return 0.</span><span class="token keyword">static</span> <span class="token keyword">struct</span> proc<span class="token operator">*</span><span class="token function">allocproc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>sp<span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ptable<span class="token punctuation">.</span>proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>state <span class="token operator">==</span> UNUSED<span class="token punctuation">)</span>      <span class="token keyword">goto</span> found<span class="token punctuation">;</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>found<span class="token punctuation">:</span>  p<span class="token operator">-></span>state <span class="token operator">=</span> EMBRYO<span class="token punctuation">;</span>  p<span class="token operator">-></span>pid <span class="token operator">=</span> nextpid<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著嘗試請求分配一個 kernel stack，如果失敗，把 <code>p-&gt;state</code> 改回 <code>UNUSED</code>。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Allocate kernel stack.</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span>kstack <span class="token operator">=</span> <span class="token function">kalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    p<span class="token operator">-></span>state <span class="token operator">=</span> UNUSED<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  sp <span class="token operator">=</span> p<span class="token operator">-></span>kstack <span class="token operator">+</span> KSTACKSIZE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Leave room for trap frame.</span>  sp <span class="token operator">-</span><span class="token operator">=</span> <span class="token keyword">sizeof</span> <span class="token operator">*</span>p<span class="token operator">-></span>tf<span class="token punctuation">;</span>  p<span class="token operator">-></span>tf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> trapframe<span class="token operator">*</span><span class="token punctuation">)</span>sp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.imgur.com/Q2wSVQX.png" alt="kstack" title="A new kernel stack."></p><ul><li>Allocproc 通過設定返回程式計數器的值來導致新 process 的 kernel thread 會先在 forkret 中執行，再回到 trapret。</li><li>Kernel thread 從 p-&gt;context 的拷貝開始執行，因此設定 p-&gt;context-&gt;eip 指向 forkret 會導致 kernel thread 從 forkret 的開頭開始執行。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token comment" spellcheck="true">// Set up new context to start executing at forkret,</span>  <span class="token comment" spellcheck="true">// which returns to trapret.</span>  sp <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>uint<span class="token operator">*</span><span class="token punctuation">)</span>sp <span class="token operator">=</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>trapret<span class="token punctuation">;</span>  sp <span class="token operator">-</span><span class="token operator">=</span> <span class="token keyword">sizeof</span> <span class="token operator">*</span>p<span class="token operator">-></span>context<span class="token punctuation">;</span>  p<span class="token operator">-></span>context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> context<span class="token operator">*</span><span class="token punctuation">)</span>sp<span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token operator">-></span>context<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token operator">*</span>p<span class="token operator">-></span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token operator">-></span>context<span class="token operator">-></span>eip <span class="token operator">=</span> <span class="token punctuation">(</span>uint<span class="token punctuation">)</span>forkret<span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Forkret</code> return 堆疊（<code>p-&gt;context-&gt;eip</code>）底。</li><li><code>Allocate</code> 將 <code>trapret</code> 放在 <code>eip</code> 的上方，即 <code>forkret</code> return 的位置。</li><li><code>Trapret</code> 從 kernel 堆疊頂恢復 user 的暫存器並跳至程序。</li></ul><hr><ul><li>第一個 process 會運行一個小程式 <em>initcode.s</em>。</li><li>Process 需要實體記憶體來保存此程式。</li><li>Process 需要被拷貝到記憶體中，也需要 page table 來指向此位址。</li><li><code>Userinit</code> 呼叫 <code>setupkvm</code> 來建立 page table 只映射到 kernel 會用到的記憶體。</li><li><i id="userinit" class="fa fa-code"></i> Code: <code>userinit</code></li></ul><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立系統的初始 process</td><td>void</td></tr></tbody></table><h3 id="userinit"><a href="#userinit" class="headerlink" title="userinit"></a>userinit</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token function">userinit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token keyword">extern</span> <span class="token keyword">char</span> _binary_initcode_start<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> _binary_initcode_size<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  p <span class="token operator">=</span> <span class="token function">allocproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  initproc <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span>pgdir <span class="token operator">=</span> <span class="token function">setupkvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"userinit: out of memory?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>inituvm</code> 請求一個 page 大小的實體記憶體，將虛擬記憶體 0 映射到此記憶體，並將 <code>_binary_initcode_start_</code> 及 <code>_binary_initcode_size_</code> 拷貝到 page。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token function">inituvm</span><span class="token punctuation">(</span>p<span class="token operator">-></span>pgdir<span class="token punctuation">,</span> _binary_initcode_start<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>_binary_initcode_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>把 trap frame 設定為初始使用者模式。</li></ul><pre class="line-numbers language-c"><code class="language-c">  p<span class="token operator">-></span>sz <span class="token operator">=</span> PGSIZE<span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token operator">-></span>tf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token operator">-></span>tf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token operator">-></span>tf<span class="token operator">-></span>cs <span class="token operator">=</span> <span class="token punctuation">(</span>SEG_UCODE <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">|</span> DPL_USER<span class="token punctuation">;</span>  p<span class="token operator">-></span>tf<span class="token operator">-></span>ds <span class="token operator">=</span> <span class="token punctuation">(</span>SEG_UDATA <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">|</span> DPL_USER<span class="token punctuation">;</span>  p<span class="token operator">-></span>tf<span class="token operator">-></span>es <span class="token operator">=</span> p<span class="token operator">-></span>tf<span class="token operator">-></span>ds<span class="token punctuation">;</span>  p<span class="token operator">-></span>tf<span class="token operator">-></span>ss <span class="token operator">=</span> p<span class="token operator">-></span>tf<span class="token operator">-></span>ds<span class="token punctuation">;</span>  p<span class="token operator">-></span>tf<span class="token operator">-></span>eflags <span class="token operator">=</span> FL_IF<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//allow hardware interrupt</span>  p<span class="token operator">-></span>tf<span class="token operator">-></span>esp <span class="token operator">=</span> PGSIZE<span class="token punctuation">;</span>  p<span class="token operator">-></span>tf<span class="token operator">-></span>eip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// beginning of initcode.S</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>p-&gt;name</code> 設為 <code>"initcode"</code> 是為了 debug，<code>p-&gt;cwd</code> 設在 process 的現在目錄。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token function">safestrcpy</span><span class="token punctuation">(</span>p<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token string">"initcode"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token operator">-></span>cwd <span class="token operator">=</span> <span class="token function">namei</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>設定 <code>p-&gt;state</code> 為 <code>RUNNABLE</code>。</li></ul><pre class="line-numbers language-c"><code class="language-c">  p<span class="token operator">-></span>state <span class="token operator">=</span> RUNNABLE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="Code-執行第一個-process"><a href="#Code-執行第一個-process" class="headerlink" title="Code: 執行第一個 process"></a>Code: 執行第一個 process</h2><ul><li>當 <em>main</em> 呼叫完 <em>userinit</em> 後，呼叫 <em>mpmain</em>，<em>mpmain</em> 接著呼叫 <em>scheduler</em> 開始運行 process。<br><i class="fa fa-code"></i> Code: <code>mpmain</code></li></ul><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>完成多核心開機程序</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Common CPU setup code.</span><span class="token keyword">static</span> <span class="token keyword">void</span><span class="token function">mpmain</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"cpu%d: starting\n"</span><span class="token punctuation">,</span> cpu<span class="token operator">-></span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">idtinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// load idt register</span>  <span class="token function">xchg</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu<span class="token operator">-></span>started<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// tell startothers() we're up</span>  <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// start running processes</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>scheduler</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>執行調度，指定執行的 process</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//PAGEBREAK: 42</span><span class="token comment" spellcheck="true">// Per-CPU process scheduler.</span><span class="token comment" spellcheck="true">// Each CPU calls scheduler() after setting itself up.</span><span class="token comment" spellcheck="true">// Scheduler never returns.  It loops, doing:</span><span class="token comment" spellcheck="true">//  - choose a process to run</span><span class="token comment" spellcheck="true">//  - swtch to start running that process</span><span class="token comment" spellcheck="true">//  - eventually that process transfers control</span><span class="token comment" spellcheck="true">//      via swtch back to the scheduler.</span><span class="token keyword">void</span><span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一行指令：<code>sti</code>，啟動處理器中斷；開機的時候在 <em>bootasm.S</em> 中將中斷禁止(<code>cli</code>)，在 XV6 準備完成後重新開啟。</li></ul><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Enable interrupts on this processor.</span>    <span class="token function">sti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><em>Scheduler</em> 找到一個<code>p-&gt;state</code>為<code>RUNNABLE</code>的 process，此時是唯一的：<code>initproc</code>。</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">// Loop over process table looking for process to run.</span>    <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ptable<span class="token punctuation">.</span>proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>state <span class="token operator">!=</span> RUNNABLE<span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著把 pre-cpu 的變量 <code>proc</code> 設為此 process。</li><li>呼叫 <code>switchuvm</code> 通知硬體開始使用目標 process 的  page table。</li></ul><pre class="line-numbers language-c"><code class="language-c">      <span class="token comment" spellcheck="true">// Switch to chosen process.  It is the process's job</span>      <span class="token comment" spellcheck="true">// to release ptable.lock and then reacquire it</span>      <span class="token comment" spellcheck="true">// before jumping back to us.</span>      proc <span class="token operator">=</span> p<span class="token punctuation">;</span>      <span class="token function">switchuvm</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著把 <code>p-&gt;state</code> 設為 <code>RUNNING</code>。</li><li>呼叫 <code>swtch</code>，context switch 到目標程序的 kernel thread。</li></ul><pre class="line-numbers language-c"><code class="language-c">      p<span class="token operator">-></span>state <span class="token operator">=</span> RUNNING<span class="token punctuation">;</span>      <span class="token function">swtch</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu<span class="token operator">-></span>scheduler<span class="token punctuation">,</span> proc<span class="token operator">-></span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">switchkvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Process is done running for now.</span>      <span class="token comment" spellcheck="true">// It should have changed its p->state before coming back.</span>      proc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="File-swtch-S"><a href="#File-swtch-S" class="headerlink" title="File: swtch.S"></a>File: swtch.S</h3><pre class="line-numbers language-x86asm"><code class="language-x86asm"># Context switch##   void swtch(struct context **old, struct context *new);# # Save current register context in old# and then load register context from new..globl swtchswtch:     movl 4(%esp), %eax     movl 8(%esp), %edx     # Save old callee-save registers     pushl %ebp     pushl %ebx     pushl %esi     pushl %edi     # Switch stacks     movl %esp, (%eax)     movl %edx, %esp     # Load new callee-save registers     popl %edi     popl %esi     popl %ebx     popl %ebp     ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>ret</code> 指令從 stack pop 目標程序的 <code>%eip</code>，結束 context switch。</li><li>現在處理器在程序 p 的 kernel stack 上執行。</li><li><code>allocproc</code> 把 <code>initproc</code> 的 <code>p-&gt;context-&gt;eip</code> 設為 <code>forkret</code>，使得 <code>ret</code> 開始執行 <code>forkret</code>。</li><li>第一次執行 <code>forkret</code> 時會呼叫一些初始化函數(<code>initlog</code>)，接著返回。</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>forkret</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>-</td><td>void</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// A fork child's very first scheduling by scheduler()</span><span class="token comment" spellcheck="true">// will swtch here.  "Return" to user space.</span><span class="token keyword">void</span><span class="token function">forkret</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Still holding ptable.lock from scheduler.</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Some initialization functions must be run in the context</span>    <span class="token comment" spellcheck="true">// of a regular process (e.g., they call sleep), and thus cannot </span>    <span class="token comment" spellcheck="true">// be run from main().</span>    first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">initlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Return to "caller", actually trapret (see allocproc).</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著位於 p-&gt;context 的是 <code>trapret</code>。</li><li><code>%esp</code> 保存著 <code>p-&gt;tf</code>。</li><li><code>trapret</code> 恢復暫存器，如同　<code>swtch</code> 進行　context switch 一樣。</li><li><code>popal</code> 恢復通用暫存器</li><li><code>popl</code> 恢復<code>%gs</code>、<code>%fs</code>、<code>%es</code>、<code>%ds</code></li><li><code>addl</code> 跳過 <code>trapno</code> 和 <code>errcode</code> 兩個數據</li><li>最後 <code>iret</code> pop <code>%gs</code>、<code>%fs</code>、<code>%es</code>、<code>%ds</code> 出堆疊。</li></ul><pre class="line-numbers language-x86asm"><code class="language-x86asm">  # Return falls through to trapret....globl traprettrapret:  popal  popl %gs  popl %fs  popl %es  popl %ds  addl $0x8, %esp  # trapno and errcode  iret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>iret</code>：interrupt return，程序返回中斷前的位址。</p><ul><li>處理器從 <code>%eip</code> 的值繼續執行，對於 <code>initproc</code> 即為虛擬地址 0，也就是 <em>initcode.S</em> 的第一條指令。</li></ul><hr><h2 id="第一個-system-call：exec"><a href="#第一個-system-call：exec" class="headerlink" title="第一個 system call：exec"></a>第一個 system call：exec</h2><ul><li><em>initcode.S</em> 第一件事是觸發 <code>exec</code> system call。</li><li><code>exec</code> 用一個新的程式代替當前 process 的記憶體及暫存器。</li><li>首先將<code>$argv</code>、<code>$init</code>、<code>$0</code> push 進堆疊，接著把 <code>%eax</code> 設為 <code>$SYS_exec</code>。</li><li>最後執行 <code>int $T_SYSCALL</code>。</li><li>這告訴 kernel 來運行 <code>exec</code>。</li><li>正常情況下，<code>exec</code> 不會返回；會運行名叫 <code>$init</code>(23) 的程式。</li><li><code>$init</code> 會 return <code>"/init\0"</code></li><li>若 <code>exec</code> 失敗了且返回，<em>initcode</em> 會不斷的呼叫一個 system call：<code>exit()</code>(17)。</li></ul><h3 id="File-initcode-S"><a href="#File-initcode-S" class="headerlink" title="File: initcode.S"></a>File: initcode.S</h3><pre class="line-numbers language-x86asm"><code class="language-x86asm"># Initial process execs /init.#include "syscall.h"#include "traps.h"# exec(init, argv).globl startstart:  pushl $argv  pushl $init  pushl $0  // where caller pc would be  movl $SYS_exec, %eax  int $T_SYSCALL# for(;;) exit();exit:  movl $SYS_exit, %eax  int $T_SYSCALL  jmp exit# char init[] = "/init\0";init:  .string "/init\0"# char *argv[] = { init, 0 };.p2align 2argv:  .long init  .long 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> XV6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XV6 </tag>
            
            <tag> kernel </tag>
            
            <tag> process </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XV6 Ch0 OS 介面</title>
      <link href="/xv6-0-intro/"/>
      <url>/xv6-0-intro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li>OS的工作：有效率的在電腦上執行數個程式。</li><li>Kernel：提供 process 服務</li><li>Process：執行中的程式，擁有記憶體存放指令、資料、及堆疊。<ul><li>指令：實現程式的運算。</li><li>資料：運算中所用到的變數。</li><li>堆疊：組織 procedure 呼叫。</li></ul></li></ul><ol><li>當一個 process 需要調用 kernel 的服務時，就會調用一個<strong>procedure 呼叫</strong>至OS介面。</li><li>procedure 即為 <strong>system call</strong></li><li>system call 進入 kernel，kernel 回傳其服務。</li></ol><p><img src="https://i.imgur.com/N2chcG4.png" alt="System call sample" title="A kernel and two user processes."> </p><ul><li>Kernel 使用 CPU 的硬體保護機制去確保 process 只會在 user space 中執行，及只存取自己的記憶體（使用特權 privilege 機制）。</li></ul><hr><h2 id="Process-及記憶體"><a href="#Process-及記憶體" class="headerlink" title="Process 及記憶體"></a>Process 及記憶體</h2><ul><li>Time-share：透明的在等待執行的 process 中切換可用的CPU。<ul><li>當一個 process未執行時，XV6 保存其 CPU 暫存器，當下次要執行時再恢復。</li><li>Kernel 將一個 process 與其 pid（process identifier）連結。</li></ul></li><li><code>fork()</code>：一個 system call 用來新增子 process。</li></ul><p>子 process 與父 porcess 擁有同樣的記憶體<strong>內容</strong>，但是在不同的記憶體及暫存器上執行，所以在其中一個process 中改變一個變數值並不會影響另一個。</p><ul><li><code>exit()</code>：用來結束子 process。</li><li><code>wait()</code>：在主 process 中使用；當子 process 結束後，才繼續執行主 process（通常搭配 <code>exit()</code> 使用）。</li></ul><hr><h2 id="I-O-及檔案描述符"><a href="#I-O-及檔案描述符" class="headerlink" title="I/O 及檔案描述符"></a>I/O 及檔案描述符</h2><ul><li>檔案描述符 file descriptor：一個小整數代表一個 process 可能會讀取或寫入的kernel-managed 物件；XV6 kernel 使用檔案描述符做為一個 pre-process table 的索引。<ul><li>0 standard input</li><li>1 standard output</li><li>2 standard error</li></ul></li><li>Shell 確保上述三個描述符每次都會被打開。</li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// read something from file descriptor to "buf"</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// write something from "buf" to file descriptor</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// both read and write will return n of how much its read/write</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Pipes"><a href="#Pipes" class="headerlink" title="Pipes"></a>Pipes</h2><ul><li>如同一條水管，pipes 的兩端連接不同的 process，其中一端寫入資料，其中一端讀取其資料。也就是說，pipes 提供使兩個不同的 process 互相溝通的方法。</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># sample of pipes</span><span class="token keyword">echo</span> hello world <span class="token operator">|</span> <span class="token function">wc</span><span class="token comment" spellcheck="true"># another way call "temporary files"</span><span class="token keyword">echo</span> hello world <span class="token operator">></span>/tmp/xyz<span class="token punctuation">;</span> <span class="token function">wc</span> <span class="token operator">&lt;</span>/tmp/xyz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>比較<ol><li>Pipes 會自我清理。</li><li>Pipes 可以任意長。</li><li>Pipes 允許同步，兩個 process 可以利用一條 pipe 進行訊息溝通。</li></ol></li></ul><hr><h2 id="檔案系統"><a href="#檔案系統" class="headerlink" title="檔案系統"></a>檔案系統</h2><ul><li>一個文件即為位元組陣列。</li><li>一個目錄中包含一些檔案或其他的目錄。</li><li>目錄的結構為樹，且有一個<strong>根目錄 /</strong>（例如：/a/b/c）。</li><li>任何不從根目錄開始的路徑稱作 process 的當前目錄。</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># create a new director</span>mkdir<span class="token punctuation">(</span><span class="token string">"/dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># open with 0_CREATE flag create a new file</span>open<span class="token punctuation">(</span><span class="token string">"/dir/file"</span>,0_CREARTE<span class="token operator">|</span>0_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>inode<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[理解inode](http://www.ruanyifeng.com/blog/2011/12/inode.html?utm_source=tool.lu)">[1]</span></a></sup>：儲存一個檔案的基本訊息，如檔案的權限、擁有者等等。</li><li>每個 inode 有一組唯一的號碼，檔案系統用此號碼來識別文件。</li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://www.ruanyifeng.com/blog/2011/12/inode.html?utm_source=tool.lu" target="_blank" rel="noopener">理解inode</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> XV6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XV6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：電腦運算的限制</title>
      <link href="/ItC-overflow/"/>
      <url>/ItC-overflow/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="硬體"><a href="#硬體" class="headerlink" title="硬體"></a>硬體</h2><p>算數上的限制</p><h3 id="整數"><a href="#整數" class="headerlink" title="整數"></a>整數</h3><p>32位元→ $-2^{31}$ ~ $2^{31}-1$</p><h3 id="實數"><a href="#實數" class="headerlink" title="實數"></a>實數</h3><ul><li>精確度：可以被表示的有效位數的最大數值。</li></ul><p>假設一個精確度為4位元，第五個位元表示指數，如：</p><pre><code>+  +  9 1 2 3 4 為 1234 * 10^9，-  -  3 1 4 4 6 為 -1446 * 10^-3↑  ↑  ↑數 指 指字 數 數的 的 值</code></pre><h3 id="表示錯誤（捨去錯誤）"><a href="#表示錯誤（捨去錯誤）" class="headerlink" title="表示錯誤（捨去錯誤）"></a>表示錯誤（捨去錯誤）</h3><ul><li>下溢位 underflow：表示為0。</li></ul><p>$$<br>\begin{equation}\begin{split}<br>4412 &amp; \times 10^{-9}\\<br>\times \ 1000 &amp; \times 10^{-8}\\<br>= 4412000 &amp; \times 10^{-17}\\<br>= 4412 &amp; \times 10^{-14}\\<br>\end{split}\end{equation}<br>$$ </p><blockquote><p>太小了無法表示</p></blockquote><ul><li>上溢位 overflow：以最大值表示</li></ul><p>$$<br>\begin{equation}\begin{split}<br>4412 &amp; \times 10^9\\<br>\times \ 1000 &amp; \times 10^8\\<br>= 4412000 &amp; \times 10^{17}\\<br>= 4412 &amp; \times 10^{20}\\<br>\end{split}\end{equation}<br>$$</p><blockquote><p>太大了無法表示<br>表示為 $9999 \times 10^9$</p></blockquote><ul><li>相消錯誤</li></ul><p>$$<br>\begin{equation}\begin{split}<br>1 + 0.00001234 - 1 &amp; = 0.00001234\\<br>100000000 \times 10^{-8}&amp;+\ 1234 \times 10^{-8}\\<br>= 100001234 \times 10^{-8} &amp;\to 1000 \times 10^{-3}\\\\<br>1000 \times 10^{-3} -  1000 &amp;\times 10^{-3}=0\\<br>\end{split}\end{equation}<br>$$</p><h3 id="溝通的限制"><a href="#溝通的限制" class="headerlink" title="溝通的限制"></a>溝通的限制</h3><h4 id="錯誤偵查編碼、錯誤修正編碼"><a href="#錯誤偵查編碼、錯誤修正編碼" class="headerlink" title="錯誤偵查編碼、錯誤修正編碼"></a>錯誤偵查編碼、錯誤修正編碼</h4><ul><li>同位元：用一個額外的位元來確保一個位元組的1的個數為基或偶數。</li><li>奇同位：如10001100，此時同位元為0，10111101，此時同位元為1。</li><li>偶同位</li><li>檢查位元：將所有位數加起來，存取總和的個位數，如 34376 總和為 23 ，儲存：34376-3。</li></ul><hr><h2 id="軟體"><a href="#軟體" class="headerlink" title="軟體"></a>軟體</h2><h3 id="軟體的複雜性"><a href="#軟體的複雜性" class="headerlink" title="軟體的複雜性"></a>軟體的複雜性</h3><h3 id="軟體工程"><a href="#軟體工程" class="headerlink" title="軟體工程"></a>軟體工程</h3><p>解決問題的步驟新增兩項，軟體需求、規格。</p><hr><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><h3 id="Big-O-分析"><a href="#Big-O-分析" class="headerlink" title="Big-O 分析"></a>Big-O 分析</h3><p>$$f(N) = N^4 + N^2 - 1 \to O(N^4)$$</p><ul><li>$O(1)$ 界線時間：如指定一個直到一個長度為N的陣列中的第i項。</li><li>$O(logN)$ 對數時間：如二元搜尋法 BST。</li><li>$O(N)$ 線性時間：如印出N筆資料。</li><li>$O(NlogN)$：如快速搜尋法。</li><li>$O(N^2)$：如簡單排序法。</li><li>$O(2^N)$ 指數時間</li><li>$O(N!)$ 階層時間</li></ul><h3 id="杜林機器（圖靈機器）"><a href="#杜林機器（圖靈機器）" class="headerlink" title="杜林機器（圖靈機器）"></a>杜林機器（圖靈機器）</h3><ul><li>讀取紙帶上一個儲存格的符號</li><li>將一個符號寫入儲存格</li><li>向左/右移一格，或不動</li></ul><p>任何具有可計算性的東西都可以藉由杜林機器來運算</p><h3 id="演算法分類"><a href="#演算法分類" class="headerlink" title="演算法分類"></a>演算法分類</h3><ul><li>多項式演算法 P 類別</li><li>NP 類別：可以在多項式時間內完成的演算法</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：網路</title>
      <link href="/ItC-internet/"/>
      <url>/ItC-internet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="網路連接"><a href="#網路連接" class="headerlink" title="網路連接"></a>網路連接</h2><ul><li>網路的任一裝置被稱作節點或是主機 host。</li><li>資料傳輸率：即數據在網路上從一個點到另一個點的速度，也稱作網路頻寬 bandwidth。</li><li>通訊協定 protocol：用來描述所傳輸的資料如何格式化及處理。</li><li>主/從架構模式 client/server model：從屬端送出一個請求命令，伺服器送回所需的資訊或動作。<br><img src="https://i.imgur.com/mTUbgvk.png" alt="主/從架構模式" title="主/從架構模式"></li></ul><h3 id="網路類型"><a href="#網路類型" class="headerlink" title="網路類型"></a>網路類型</h3><h4 id="區域網路-LAN：封閉的網路。"><a href="#區域網路-LAN：封閉的網路。" class="headerlink" title="區域網路 LAN：封閉的網路。"></a>區域網路 LAN：封閉的網路。</h4><ul><li>環狀拓樸 ring topology：以封閉環路連接所有電腦，訊息以單方向傳遞。</li><li>星狀拓樸 star topology：以一個節點為中心，連結所有其他節點，透過中心發送訊息。中心承載大量網路負荷，若中心無法運作，則無法通訊。</li><li>匯流排拓樸 bus topology：所有節點都可以連上一個雙向的通訊線上，如乙太網路 Ethernet。</li></ul><h4 id="廣域網路-WAN：連結兩個或以上的區域網路。"><a href="#廣域網路-WAN：連結兩個或以上的區域網路。" class="headerlink" title="廣域網路 WAN：連結兩個或以上的區域網路。"></a>廣域網路 WAN：連結兩個或以上的區域網路。</h4><ul><li>閘道器 gateway：處理區域網路與其他網路的通訊。</li></ul><h4 id="都會網路-MAN：校園或都市的大型網路。"><a href="#都會網路-MAN：校園或都市的大型網路。" class="headerlink" title="都會網路 MAN：校園或都市的大型網路。"></a>都會網路 MAN：校園或都市的大型網路。</h4><ul><li>網際網路連接<ul><li>網際網路骨幹：運送網際網路資料的高容量資料網路路徑。</li><li>電話數據機</li><li>數位用戶電路 DSL</li><li>纜線數據機：寬頻。</li></ul></li></ul><h3 id="封包交換："><a href="#封包交換：" class="headerlink" title="封包交換："></a>封包交換：</h3><p>將資料分成固定大小並編號的封包，傳送到目的地再將封包重組。</p><ul><li>路由器 route：引導封包傳遞的設備，每個路由器僅知道最接近目的地的最佳下一個行程。</li></ul><hr><h2 id="開放系統與協定"><a href="#開放系統與協定" class="headerlink" title="開放系統與協定"></a>開放系統與協定</h2><ul><li>開放系統：OSI模式。</li></ul><p><img src="https://i.imgur.com/oYtZOwQ.png" alt="OSI" title="OSI模式"></p><ul><li>網路協定<ul><li>協定堆疊：每一層的協定都堆疊在構成本層的協議上方。</li></ul></li></ul><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><ul><li>IP：處理封包的路由，協處資料抵達目的地。</li><li>TCP：將資料處理成封包，及重組封包。</li><li><p>UDP：與TCP扮演同樣角色。</p></li><li><p>搜索工具 ping：測試網路可達性的IP程式。</p></li></ul><hr><h2 id="網路位址"><a href="#網路位址" class="headerlink" title="網路位址"></a>網路位址</h2><ul><li>主機名稱：如 github.io。</li></ul><h3 id="IP位址"><a href="#IP位址" class="headerlink" title="IP位址"></a>IP位址</h3><ul><li>IPv4：32位元，如：123.45.255.0</li><li>IPv6：128位元，如：FFFF : 0000 : 00F0 : 00FF : 00A2 : 1202</li></ul><h3 id="網域名稱"><a href="#網域名稱" class="headerlink" title="網域名稱"></a>網域名稱</h3><p>電腦名稱由主機名稱＋網域名稱組成，網域名稱最後一欄為頂級網域，如：.com。</p><h3 id="網域名稱系統-DNS："><a href="#網域名稱系統-DNS：" class="headerlink" title="網域名稱系統 DNS："></a>網域名稱系統 DNS：</h3><p>將主機名稱轉為IP位址的系統。</p><hr><h2 id="雲端計算"><a href="#雲端計算" class="headerlink" title="雲端計算"></a>雲端計算</h2><p>公有雲、私有雲、企業雲、混合雲。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：資訊系統</title>
      <link href="/ItC-database/"/>
      <url>/ItC-database/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="管理資訊"><a href="#管理資訊" class="headerlink" title="管理資訊"></a>管理資訊</h2><p>有三種普遍的資訊系統：電子試算表、資料庫管理系統及電子商務。</p><h2 id="試算表"><a href="#試算表" class="headerlink" title="試算表"></a>試算表</h2><p>試算表 spreadsheet 允許使用者以標籤畫的儲存格來組織、分析資料，一個儲存格可儲存資料，如數字、文字等，或公式求值。<br>試算表通常以字母表示直欄 column，以數字表示橫列 row，如A5、B7等。</p><ul><li>試算表公式：如SUM、COUNT、MAX等。</li><li>循環參照：一個無解狀態，如B14 = D21+D22，而D21 = B13+B14。</li></ul><hr><h2 id="資料庫系統"><a href="#資料庫系統" class="headerlink" title="資料庫系統"></a>資料庫系統</h2><ul><li>資料庫 database：一套結構化的資料。</li><li>資料庫管理系統 DBMS：軟體和資料的結合，有三大要素：<ol><li>實體資料庫</li><li>資料庫引擎：配合資料庫語言，可指定資料的結構、新增、修改、刪除及查詢 query 資料。</li><li>資料庫綱要 schema：提供資料庫中資料的邏輯綱要。</li></ol></li></ul><h3 id="關聯式模型-relational-model"><a href="#關聯式模型-relational-model" class="headerlink" title="關聯式模型 relational model"></a>關聯式模型 relational model</h3><p>資料項目與他們的關係組織成資料表 table，資料表示一些紀錄的集合 record，一筆紀錄是一些相關欄位 field 的集合，一個欄位對應一個值。</p><p>一筆紀錄稱作一個資料庫物件或是一個實體 entity，一筆紀錄的欄位稱作資料庫物件的屬性 attribute。</p><p>關鍵欄位 key：用來識別資料表中的每個紀錄。</p><h3 id="結構化查詢語言-SQL"><a href="#結構化查詢語言-SQL" class="headerlink" title="結構化查詢語言 SQL"></a>結構化查詢語言 SQL</h3><p>用來管理關聯式資料庫的語言，包含了規範 schema、新增、修改、刪除及查詢資料。</p><ul><li>查詢：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> attribute<span class="token operator">-</span>list <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token operator">-</span>list <span class="token keyword">WHERE</span> condition<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如欲取回整個紀錄，可以用 *，需要字串比對，可以用 like：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token operator">-</span>list <span class="token keyword">WHERE</span> condition <span class="token operator">like</span> <span class="token string">'%doc%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以用 order by 來排序</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> attribute<span class="token operator">-</span>list <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token operator">-</span>list <span class="token keyword">WHERE</span> condition <span class="token keyword">order</span> <span class="token keyword">by</span> id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改：</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> attribute<span class="token operator">-</span>list <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token keyword">some</span> <span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> attribute<span class="token operator">-</span>list <span class="token keyword">set</span> field_name <span class="token operator">=</span> <span class="token string">'value'</span> <span class="token keyword">where</span> another_field <span class="token operator">=</span> <span class="token string">'value2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> attribute<span class="token operator">-</span>list <span class="token keyword">where</span> field_name <span class="token operator">=</span> <span class="token string">'value'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="資料庫的設計"><a href="#資料庫的設計" class="headerlink" title="資料庫的設計"></a>資料庫的設計</h3><ul><li>實體 — 關係 ER 模型、ER圖</li><li>一對一、一對多、多對多</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：檔案系統及目錄</title>
      <link href="/ItC-FS/"/>
      <url>/ItC-FS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="檔案系統"><a href="#檔案系統" class="headerlink" title="檔案系統"></a>檔案系統</h2><ul><li>檔案：一個命名的資料集合。</li><li>檔案系統：將一群檔案集合成目錄。</li><li>檔案型態：檔案中所含的資訊種類。</li><li>檔案名稱：主要名稱＋檔案延伸檔名（副檔名），如1023.c。</li></ul><h3 id="檔案的操作"><a href="#檔案的操作" class="headerlink" title="檔案的操作"></a>檔案的操作</h3><ul><li>檔案存取<ol><li>循序檔案存取：將檔案中的資訊依序存取，依照進度移動檔案指標。</li><li>直接檔案存取：將檔案分成數個邏輯紀錄，可直接存取某個紀錄而不需照順序。</li></ol></li><li>檔案保護</li></ul><hr><h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h2><p>目錄為一群檔案的集合，同時目錄也表示成一個檔案（目錄檔）。</p><ul><li>目錄樹：一個目錄可以被包含在另一個目錄下，包含的目錄稱為父目錄，被包含的稱作子目錄；一個檔案系統被視為一個目錄樹，最上層的目錄稱作根目錄 root directory。</li><li>路徑名稱<ol><li>絕對路徑：由根目錄開始至所選的檔案，如：/usr/local/download/103.c</li><li>相對路徑：由目前的工作目錄開始，如：download/103.c</li></ol></li></ul><hr><h2 id="磁碟排程"><a href="#磁碟排程" class="headerlink" title="磁碟排程"></a>磁碟排程</h2><ul><li>搜尋時間 seek time：移動磁頭到指定磁住的時間。</li><li>潛在時間 latency：圓盤旋至正確位置，使讀寫資訊可以進行的額外時間。</li></ul><h3 id="FCFS"><a href="#FCFS" class="headerlink" title="FCFS"></a>FCFS</h3><p>即先到先服務</p><h3 id="SSTF"><a href="#SSTF" class="headerlink" title="SSTF"></a>SSTF</h3><p>即最短搜尋時間優先，讀寫完一個後會找一個最近的讀寫。</p><h3 id="SCAN"><a href="#SCAN" class="headerlink" title="SCAN"></a>SCAN</h3><p>從特定的方向開始，從頭走到尾，不斷的來回，有經過的都會服務；c-SCAN指的是只有一個方向會服務。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：作業系統</title>
      <link href="/ItC-OS/"/>
      <url>/ItC-OS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="作業系統的角色"><a href="#作業系統的角色" class="headerlink" title="作業系統的角色"></a>作業系統的角色</h2><h3 id="記憶體、程序與CPU管理"><a href="#記憶體、程序與CPU管理" class="headerlink" title="記憶體、程序與CPU管理"></a>記憶體、程序與CPU管理</h3><ul><li>持續追蹤什麼程式在記憶體，及其位置。</li><li>程序 process 為執行中的程式，追蹤程序的進展及記錄。</li><li>CPU 排程，為決定哪個程序可以執行。</li></ul><hr><h2 id="記憶體管理"><a href="#記憶體管理" class="headerlink" title="記憶體管理"></a>記憶體管理</h2><ul><li>邏輯位址：相對位址。</li><li>位址聯繫 address binding：邏輯位址對應到實體位址的過程。</li></ul><h3 id="單一連續記憶體管理"><a href="#單一連續記憶體管理" class="headerlink" title="單一連續記憶體管理"></a>單一連續記憶體管理</h3><p>記憶體中只有作業系統及一個要執行的程式。</p><h3 id="分割記憶體管理"><a href="#分割記憶體管理" class="headerlink" title="分割記憶體管理"></a>分割記憶體管理</h3><p>記憶體中允許多個程序。</p><ul><li>固定分割技術：分割區不需要相同大小，每個分割區的大小是固定的。</li><li>動態分割技術：程式載入至分割區後，多餘的空間會分割成新的分割區。</li></ul><h3 id="分頁記憶體管理"><a href="#分頁記憶體管理" class="headerlink" title="分頁記憶體管理"></a>分頁記憶體管理</h3><p>記憶體分成固定大小的頁框 frame，程序分成同樣大小的分頁 page。</p><hr><h2 id="程序管理"><a href="#程序管理" class="headerlink" title="程序管理"></a>程序管理</h2><ul><li>程序狀態：new、ready、running、waiting、terminated。</li><li>程序控制區塊 PCB：儲存有關程序的各項資訊。</li></ul><hr><h2 id="CPU排程"><a href="#CPU排程" class="headerlink" title="CPU排程"></a>CPU排程</h2><ul><li>先佔式排程：程序有可能在尚未執行完就被強制移出CPU。</li><li>非先佔式排程：程序不會在尚未執行完就被強制移出CPU。</li></ul><h3 id="先到先服務-FCFS（非先佔式）"><a href="#先到先服務-FCFS（非先佔式）" class="headerlink" title="先到先服務 FCFS（非先佔式）"></a>先到先服務 FCFS（非先佔式）</h3><h3 id="最短工作優先-SJN（非先佔式）"><a href="#最短工作優先-SJN（非先佔式）" class="headerlink" title="最短工作優先 SJN（非先佔式）"></a>最短工作優先 SJN（非先佔式）</h3><h3 id="循環輪流（先佔式）"><a href="#循環輪流（先佔式）" class="headerlink" title="循環輪流（先佔式）"></a>循環輪流（先佔式）</h3><p>建立一個時間片段 time slice，使用CPU時間超過時間片段的程序必須先移出，直到下一次輪到此程序時才能繼續使CPU。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：物件導向與高階程式語言</title>
      <link href="/ItC-OOP/"/>
      <url>/ItC-OOP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="物件導向方法論"><a href="#物件導向方法論" class="headerlink" title="物件導向方法論"></a>物件導向方法論</h2><h3 id="物件導向-OOP"><a href="#物件導向-OOP" class="headerlink" title="物件導向 OOP"></a>物件導向 OOP</h3><ul><li>物件 object：問題內可顯現的實體或事物。</li><li>類別 class：物件類別，將有共同特性的物件分類成相關群組，物件則為類別的實例。</li></ul><h3 id="設計方法論"><a href="#設計方法論" class="headerlink" title="設計方法論"></a>設計方法論</h3><ol><li>腦力激盪：來產生一個候補的類別表單。</li><li>過濾：決定哪些類別是問題解決的核心類別。</li><li>劇本：為每個類別指定「責任」，即為每個類別必須完成的工作，也就是副程式。</li><li>責任演算法：演算法須依責任來撰寫。<ul><li>兩種責任類型：知識（是什麼）及行為（做什麼）。</li></ul></li></ol><p>class 會將資料封裝，也就是把資料和動作捆綁在一起，別的 class 無法存去此資訊。</p><hr><h2 id="翻譯過程"><a href="#翻譯過程" class="headerlink" title="翻譯過程"></a>翻譯過程</h2><ul><li>編譯器 compiler：將高階語言翻譯成針對電腦的機器語言，再執行。</li><li><p>直譯器 interpreter：翻譯完一行就立即執行此行，類似於此高階語言的模擬器或是虛擬機。</p></li><li><p>高階語言也分成兩大類：編譯式、直譯式。</p><ul><li>JAVA 將程式編譯成位元組碼，為一種標準的機器語言，程式需在java的虛擬機(JVM)上執行。</li></ul></li></ul><hr><h2 id="程式語言方法"><a href="#程式語言方法" class="headerlink" title="程式語言方法"></a>程式語言方法</h2><h3 id="命令式架構"><a href="#命令式架構" class="headerlink" title="命令式架構"></a>命令式架構</h3><ul><li>用一連串的指令執行，用變數代表記憶體位置，使用一些敘述來改變其值。<ul><li>程序式架構：敘述被分成副程式。</li><li>物件導向架構：每個物件負責他自己的動作。</li></ul></li></ul><h3 id="宣告式架構"><a href="#宣告式架構" class="headerlink" title="宣告式架構"></a>宣告式架構</h3><ul><li>函數模式：是基於函數的運算概念。</li><li>邏輯模式：是基於邏輯原理而來。</li></ul><hr><h2 id="高階語言功能"><a href="#高階語言功能" class="headerlink" title="高階語言功能"></a>高階語言功能</h2><h3 id="布林表示式：即判斷式或條件式，可以是"><a href="#布林表示式：即判斷式或條件式，可以是" class="headerlink" title="布林表示式：即判斷式或條件式，可以是"></a>布林表示式：即判斷式或條件式，可以是</h3><ol><li>一個布林變數：如 true。</li><li>一個算數表示式＋一個關係運算子＋一個算數表示式，如：d1&lt;d2。</li><li>一個布林表示式＋一個布林運算子＋一個布林表示式，如：a&lt;1 or b&gt;1<!--1--></li></ol><h3 id="資料型態：如-int、char、bool、string等。"><a href="#資料型態：如-int、char、bool、string等。" class="headerlink" title="資料型態：如 int、char、bool、string等。"></a>資料型態：如 int、char、bool、string等。</h3><ul><li>強制型態：要指定一個記憶體位置時，須先說明此資料型態，非此資料型態不可以存入此記憶體位置。</li></ul><h3 id="控制結構"><a href="#控制結構" class="headerlink" title="控制結構"></a>控制結構</h3><ul><li>結構化程式設計：程式的每一個邏輯單元只允許一個入口及一個出口。</li><li>巢狀邏輯</li></ul><hr><h2 id="物件導向語言功能"><a href="#物件導向語言功能" class="headerlink" title="物件導向語言功能"></a>物件導向語言功能</h2><ul><li>封裝：資訊隱藏。</li><li>類別</li><li>繼承：類別可被繼承，衍生類即為執行繼承的類別。</li><li>多形</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：抽象資料型態與副程式</title>
      <link href="/ItC-data-structure/"/>
      <url>/ItC-data-structure/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="抽象資料型態"><a href="#抽象資料型態" class="headerlink" title="抽象資料型態"></a>抽象資料型態</h2><p>Abstract data type, ADT，就是一種容器。</p><h2 id="堆疊-Stack"><a href="#堆疊-Stack" class="headerlink" title="堆疊 Stack"></a>堆疊 Stack</h2><p>為LIFO(Last In First Out)，後進先出，即當我們要放資料時，放在最上面（也就是最後一個），要拿資料的時候也是拿最上面。</p><p><img src="https://i.imgur.com/5WjOSt2.png" alt="stack" title="堆疊"></p><ul><li>插入 Push </li><li>刪除 Pop</li></ul><hr><h2 id="佇列-Queue"><a href="#佇列-Queue" class="headerlink" title="佇列 Queue"></a>佇列 Queue</h2><p>為FIFO(First In First Out)，先進先出，即當我們要放資料時，排在最後面 rear，拿資料時拿第一個 front；類似於排隊。</p><p><img src="https://i.imgur.com/TT68nAV.png" alt="queue" title="佇列"></p><hr><h2 id="串列"><a href="#串列" class="headerlink" title="串列"></a>串列</h2><p>項目是同性質的、線性的、可變長度的；可由陣列實現。</p><ul><li>也可視為鍵結結構，基於節點 node的概念，一個接著下一個。</li></ul><hr><h2 id="樹-Tree"><a href="#樹-Tree" class="headerlink" title="樹 Tree"></a>樹 Tree</h2><h3 id="二元樹"><a href="#二元樹" class="headerlink" title="二元樹"></a>二元樹</h3><p>每個node有兩個後繼節點，稱作子結點 children，可一直延續下去。起始節點稱作樹根 root。<br><br>一個node 可能有0至2個節點，左邊的稱作 left child，右邊的稱作 right child；如有一個節點沒有子結點，則稱作樹葉 leaf。</p><p><img src="https://i.imgur.com/B9nhAz7.png" alt="二元樹" title="二元樹"></p><h3 id="二元搜尋樹-BST"><a href="#二元搜尋樹-BST" class="headerlink" title="二元搜尋樹 BST"></a>二元搜尋樹 BST</h3><p>如果 left child &lt; node &lt; right child，則此數為BST。</p><p><img src="https://i.imgur.com/YJ2kFFZ.png" alt="二元搜尋樹" title="二元搜尋樹"></p><hr><h2 id="圖形-Graph"><a href="#圖形-Graph" class="headerlink" title="圖形 Graph"></a>圖形 Graph</h2><p>G=(V,E)，V 為圖形中的點集合，E 為編集合。<br><br>如果邊有方向，稱作有向圖，反之，則為無向圖。<br><br>若兩個邊之間存在一條邊，則稱作相鄰頂點。<br><br>兩點之間的路徑由一連串的相鄰頂點組成。</p><h3 id="圖形演算法"><a href="#圖形演算法" class="headerlink" title="圖形演算法"></a>圖形演算法</h3><ul><li>深度優先搜索 BFS</li><li>廣度優先搜索 DFS</li><li>最短路徑搜索</li></ul><hr><h2 id="副程式"><a href="#副程式" class="headerlink" title="副程式"></a>副程式</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token function">swap</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span>temp ← num1num1 ← num2num2 ← temp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
            <tag> 資料結構 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：問題解決與演算法設計</title>
      <link href="/ItC-algorithm/"/>
      <url>/ItC-algorithm/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="如何解決問題"><a href="#如何解決問題" class="headerlink" title="如何解決問題"></a>如何解決問題</h2><blockquote><p>以問題取代未知數、以資訊取代資料、以解待取待理論。</p></blockquote><ul><li>一般的問題解決過程<br>提出問題 <i class="fa fa-long-arrow-right"></i> 尋找熟悉的事物 <i class="fa fa-long-arrow-right"></i> 分割並征服 <i class="fa fa-long-arrow-right"></i> 演算法。</li><li>電腦的問題解決過程<br>分析與定義階段 <i class="fa fa-long-arrow-right"></i> 演算法開發階段 <i class="fa fa-long-arrow-right"></i> 實作階段 <i class="fa fa-long-arrow-right"></i> 維護階段。</li></ul><hr><h2 id="簡單變數演算法"><a href="#簡單變數演算法" class="headerlink" title="簡單變數演算法"></a>簡單變數演算法</h2><ul><li>可選擇的演算法：IF THEN ELSE。</li></ul><h3 id="重複演算法"><a href="#重複演算法" class="headerlink" title="重複演算法"></a>重複演算法</h3><ul><li>技術控制型迴圈<ul><li>由三部分組成：起始化、測試、增量。</li></ul></li></ul><pre><code>set count to 0WHILE(count &lt; limit)…count ← count + 1…</code></pre><ul><li>事件控制型迴圈<ul><li>巢狀結構</li></ul></li></ul><pre><code>WHILE(count &lt; limit)IF(value&lt;0)……</code></pre><hr><h2 id="複合變數"><a href="#複合變數" class="headerlink" title="複合變數"></a>複合變數</h2><ul><li>陣列：為同性質項目的集合。<ul><li>索引 index：由0開始，代表位置。</li><li>陣列名字[index]</li></ul></li><li>紀錄：為不同性質項目的集合。<ul><li>名字.欄位名稱</li></ul></li></ul><hr><h2 id="搜索演算法"><a href="#搜索演算法" class="headerlink" title="搜索演算法"></a>搜索演算法</h2><p>二元搜索：由以排序過的陣列搜索，每次與中間比較，再將搜索範圍減半，直到找到答案。</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>泡沫排序：每次由最後一項與前一項相比，若比較小則交換，直到最前；若從底至頭都沒有需要交換，則排序結束。</p><h2 id="遞迴演算法"><a href="#遞迴演算法" class="headerlink" title="遞迴演算法"></a>遞迴演算法</h2><p>分為兩種狀況：底層狀況、一般狀況。</p><ul><li>副程式敘述：將一段程式碼命名，並移至外部；有回傳值的，也有不回傳值的。</li></ul><hr><h2 id="重要的串連思路"><a href="#重要的串連思路" class="headerlink" title="重要的串連思路"></a>重要的串連思路</h2><ul><li>資訊隱藏</li><li>抽象概念</li><li>為事件命名</li><li>測試</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：低階程式語言與虛擬碼</title>
      <link href="/ItC-code/"/>
      <url>/ItC-code/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="電腦的動作"><a href="#電腦的動作" class="headerlink" title="電腦的動作"></a>電腦的動作</h2><blockquote><p>即可程式化 programmable、儲存 store、擷取 retrieve 及運算 process。</p></blockquote><h2 id="機器語言"><a href="#機器語言" class="headerlink" title="機器語言"></a>機器語言</h2><p>機器語言是電腦唯一能執行的指令，由二進制的數字組成。</p><h3 id="Pep-8-虛擬電腦"><a href="#Pep-8-虛擬電腦" class="headerlink" title="Pep/8 虛擬電腦"></a>Pep/8 虛擬電腦</h3><p>依據不同的CPU會有不同的機器語言，而Pep/8為一台假想的電腦，具有真實電腦應有的特徵，及39個機器語言指令。</p><ul><li>記憶單元：由65536個位元組的記憶體組成。</li><li>字語長度：2個位元組，也就是16位元。</li><li>CPU 內有7個暫存器，以下會討論到三個：<ul><li>PC 程式計數器：存放下一個被執行的指令位址。</li><li>IR 程式暫存器：儲存目前執行的指令。</li><li>累加器（A暫存器）。</li></ul></li></ul><p>一個位元組能表示的最大數為255(base 10)，也就是11111111(base 2)、0xFF，一個字語（16位元）能表示的最大數為65535，也就是0xFFFF，若要表示負數，則範圍為0x-7FFF~0x7FFF</p><h3 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h3><p>有兩個部分：<br>8bits 的指令指標 instruction specifier：表示要執行何種運算，及指標需如何解讀。<br>16bits 的運算元指標 operand specifier（非必要）：存放運算元本身或運算元地址。</p><ul><li>指令指標格式</li></ul><p>運算碼 operation codes (opcodes) 有4~8個位元長度，我們討論4或是5個bit的，其中 4bits 的第五個 bit 用來表示使用哪個暫存器，暫存器指標為0代表使用A暫存器。</p><p>定址模式指標佔 3bits，如果為000代表為立即定址，代表運算元指標即運算元本身；001為直接定址，代表運算元指標為記憶體位址；還有兩種定址模式不討論。</p><hr><h2 id="組合語言"><a href="#組合語言" class="headerlink" title="組合語言"></a>組合語言</h2><p>以指定的字母來助憶機器語言，由組譯器負責翻譯。</p><h3 id="Pep-8-組合語言"><a href="#Pep-8-組合語言" class="headerlink" title="Pep/8 組合語言"></a>Pep/8 組合語言</h3><p>運算碼由0x和四位16進位值組成，定址模式由i（立即）或d（直接）表示。</p><table><thead><tr><th style="text-align:center">組合語言</th><th style="text-align:center">機器語言</th><th style="text-align:center">運算元指標</th></tr></thead><tbody><tr><td style="text-align:center">STOP</td><td style="text-align:center">0000</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">LDA</td><td style="text-align:center">1100</td><td style="text-align:center">0x0008,i</td></tr><tr><td style="text-align:center">LDA</td><td style="text-align:center">1100</td><td style="text-align:center">0x0008,d</td></tr><tr><td style="text-align:center">STA</td><td style="text-align:center">1110</td><td style="text-align:center">0x0008,d</td></tr><tr><td style="text-align:center">ADDA</td><td style="text-align:center">0111</td><td style="text-align:center">0x0008,i</td></tr><tr><td style="text-align:center">ADDA</td><td style="text-align:center">0111</td><td style="text-align:center">0x0008,d</td></tr><tr><td style="text-align:center">SUBA</td><td style="text-align:center">1000</td><td style="text-align:center">0x0008,i</td></tr><tr><td style="text-align:center">SUBA</td><td style="text-align:center">1000</td><td style="text-align:center">0x0008,d</td></tr><tr><td style="text-align:center">BR</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">CHARI</td><td style="text-align:center">01001</td><td style="text-align:center">0x0008,d</td></tr><tr><td style="text-align:center">CHARO</td><td style="text-align:center">01010</td><td style="text-align:center">0x0008,i</td></tr><tr><td style="text-align:center">CHARO</td><td style="text-align:center">01010</td><td style="text-align:center">0x0008,d</td></tr><tr><td style="text-align:center">DECI</td><td style="text-align:center">00110</td><td style="text-align:center">0x0008,d</td></tr><tr><td style="text-align:center">DECO</td><td style="text-align:center">00111</td><td style="text-align:center">0x0008,i</td></tr><tr><td style="text-align:center">DECO</td><td style="text-align:center">00111</td><td style="text-align:center">0x0008,d</td></tr></tbody></table><h3 id="組譯器指揮動作"><a href="#組譯器指揮動作" class="headerlink" title="組譯器指揮動作"></a>組譯器指揮動作</h3><ul><li>.ASCII+”STR/x00”：表示一組字串。</li><li>.BLOCK+位元組數目：產生一個空間。</li><li>.WORD+值：指派一個值給字語。</li><li>.END：結束。</li></ul><h3 id="分歧指令"><a href="#分歧指令" class="headerlink" title="分歧指令"></a>分歧指令</h3><ul><li>BRLT，若小於則跳至分歧。</li><li>BREQ，若等於則跳至分歧。</li></ul><hr><h2 id="演算法表示"><a href="#演算法表示" class="headerlink" title="演算法表示"></a>演算法表示</h2><h3 id="虛擬碼-pseudocode-功能"><a href="#虛擬碼-pseudocode-功能" class="headerlink" title="虛擬碼 pseudocode 功能"></a>虛擬碼 pseudocode 功能</h3><ul><li>變數：出現的名稱，需反應其角色。</li><li>指定：變數需要放值，如 Set sum to 0，或是 sum ← 0。</li></ul><p>也可以用 Set sum to sum + num，或是 sum ← sum + num。</p><ul><li>輸入/輸出</li></ul><pre><code>Write “Hello word!”Read num</code></pre><ul><li>選擇</li></ul><pre><code>IF(sum&lt;0)…ELSE …</code></pre><ul><li>重複</li></ul><pre><code>WHILE(counter &lt; limit) …</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：電腦元件</title>
      <link href="/ItC-com/"/>
      <url>/ItC-com/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="個別電腦元件"><a href="#個別電腦元件" class="headerlink" title="個別電腦元件"></a>個別電腦元件</h2><ul><li>處理器速度 Hz 表示，如 2.7GHz。</li><li>計時器速度，如1066MHz；FSB，front side bus 前端匯排流。</li></ul><hr><h2 id="程式儲存化概念"><a href="#程式儲存化概念" class="headerlink" title="程式儲存化概念"></a>程式儲存化概念</h2><h3 id="范紐曼架構：資料與指令可存於同個地方，具有五個元件："><a href="#范紐曼架構：資料與指令可存於同個地方，具有五個元件：" class="headerlink" title="范紐曼架構：資料與指令可存於同個地方，具有五個元件："></a>范紐曼架構：資料與指令可存於同個地方，具有五個元件：</h3><ul><li>記憶體單元：具有儲存格，及定址能力。</li><li>算數邏輯單元 ALU：能完成基本運算及邏輯運算。</li><li>輸出單元：可將運算結果傳至電腦外的裝置。</li><li>輸入單元：將資料帶進電腦的裝置。</li><li>控制單元：包含兩個暫存器，IR 指令暫存器及 PC 程式計數器。</li></ul><blockquote><p>ALU 與控制單元組成CPU。</p></blockquote><ul><li>匯流排 bus：連接不同單元的排線。</li><li>匯流排寬度：可以同時被傳輸的位元數目。</li></ul><h3 id="擷取-執行週期"><a href="#擷取-執行週期" class="headerlink" title="擷取/執行週期"></a>擷取/執行週期</h3><p>擷取下一個指令→將指令解碼 → 取得資料 → 執行指令</p><ul><li>RAM：每個儲存格都可以直接存取、改變；關機時資料會不見。</li><li>ROM：內容不可改變。</li></ul><hr><h2 id="平行架構"><a href="#平行架構" class="headerlink" title="平行架構"></a>平行架構</h2><ul><li>平行處理<ul><li>位元級：依據字組大小的增加，如一個8位元的電腦處理16位元的運算，則需兩個運算。</li><li>指令級：依據程式上某些指令可以獨立平行的執行。</li><li>資料級：單一指令可以在不同資料集合上執行。</li><li>任務級：基於不同的處理器，可以在相同或不同的資料集合上執行不同任務。</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
            <tag> 電腦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：閘與電路</title>
      <link href="/ItC-gate/"/>
      <url>/ItC-gate/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="電腦與電學"><a href="#電腦與電學" class="headerlink" title="電腦與電學"></a>電腦與電學</h2><p>電子訊號有某個電壓準位，一般而言電壓準位在 0~2 伏特時屬於「低」，代表二進制的 0，而位於 2~5 伏特時則為「高」，代表二進制的 1。</p><ul><li>閘 gate：是完成電子訊號基本運算的裝置。閘接受一至多個輸入訊號，產生單一輸出訊號；有數種特定裝置的閘，以下討論六種基本的閘。</li><li>電路 circuits：閘可組成電路，完成更複雜的工作。有三種可以描述電路的表示法：<ul><li>布林表示法</li><li>邏輯圖</li><li>真值表</li></ul></li></ul><hr><h2 id="閘"><a href="#閘" class="headerlink" title="閘"></a>閘</h2><h3 id="1-NOT閘"><a href="#1-NOT閘" class="headerlink" title="1. NOT閘"></a>1. NOT閘</h3><p>NOT閘接受一個輸入，產生一個輸出。</p><h4 id="DEF"><a href="#DEF" class="headerlink" title="DEF"></a>DEF</h4><p>如輸入為 1，則輸出 0；反之亦然。</p><h4 id="布林運算式"><a href="#布林運算式" class="headerlink" title="布林運算式"></a>布林運算式</h4><p>$X = A ‘$</p><h4 id="邏輯圖"><a href="#邏輯圖" class="headerlink" title="邏輯圖"></a>邏輯圖</h4><p><img src="https://i.imgur.com/mHBP6FW.png" alt="NOT閘" title="NOT閘"></p><h4 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h4><table><thead><tr><th>A</th><th>X</th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td></tr></tbody></table><hr><h3 id="2-AND閘"><a href="#2-AND閘" class="headerlink" title="2. AND閘"></a>2. AND閘</h3><p>AND閘接受多個訊號，產生一個輸出。</p><h4 id="DEF-1"><a href="#DEF-1" class="headerlink" title="DEF"></a>DEF</h4><p>若輸入全為1，則輸出1，反之，則為0。</p><h4 id="布林運算式-1"><a href="#布林運算式-1" class="headerlink" title="布林運算式"></a>布林運算式</h4><p>$X = A \cdot B$</p><h4 id="邏輯圖-1"><a href="#邏輯圖-1" class="headerlink" title="邏輯圖"></a>邏輯圖</h4><p><img src="https://i.imgur.com/IJHEbrP.png" alt="AND閘" title="AND閘"></p><h4 id="真值表-1"><a href="#真值表-1" class="headerlink" title="真值表"></a>真值表</h4><table><thead><tr><th>A</th><th>B</th><th>X</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><hr><h3 id="3-OR閘"><a href="#3-OR閘" class="headerlink" title="3.OR閘"></a>3.OR閘</h3><p>OR閘接受兩個輸入，產生一個輸出。</p><h4 id="DEF-2"><a href="#DEF-2" class="headerlink" title="DEF"></a>DEF</h4><p>如兩個輸入全為0，則輸出0，反之，輸出1。</p><h4 id="布林運算式-2"><a href="#布林運算式-2" class="headerlink" title="布林運算式"></a>布林運算式</h4><p>$X = A + B$</p><h4 id="邏輯圖-2"><a href="#邏輯圖-2" class="headerlink" title="邏輯圖"></a>邏輯圖</h4><p><img src="https://i.imgur.com/87CEd05.png" alt="OR閘" title="OR閘"></p><h4 id="真值表-2"><a href="#真值表-2" class="headerlink" title="真值表"></a>真值表</h4><table><thead><tr><th>A</th><th>B</th><th>X</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><hr><h3 id="4-XOR閘"><a href="#4-XOR閘" class="headerlink" title="4.XOR閘"></a>4.XOR閘</h3><p>XOR閘，又稱互斥閘。</p><h4 id="DEF-3"><a href="#DEF-3" class="headerlink" title="DEF"></a>DEF</h4><p>若輸出相同，則輸出0，反之，輸出1。</p><h4 id="布林運算式-3"><a href="#布林運算式-3" class="headerlink" title="布林運算式"></a>布林運算式</h4><p>$X = A \oplus B$</p><h4 id="邏輯圖-3"><a href="#邏輯圖-3" class="headerlink" title="邏輯圖"></a>邏輯圖</h4><p><img src="https://i.imgur.com/dyp1SSN.png" alt="XOR閘" title="XOR閘"></p><h4 id="真值表-3"><a href="#真值表-3" class="headerlink" title="真值表"></a>真值表</h4><table><thead><tr><th>A</th><th>B</th><th>X</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><hr><h3 id="5-NAND-與-NOR閘"><a href="#5-NAND-與-NOR閘" class="headerlink" title="5.NAND 與 NOR閘"></a>5.NAND 與 NOR閘</h3><p>分別為AND與OR閘的相反</p><h4 id="NAND閘"><a href="#NAND閘" class="headerlink" title="NAND閘"></a>NAND閘</h4><h5 id="布林運算式-4"><a href="#布林運算式-4" class="headerlink" title="布林運算式"></a>布林運算式</h5><p>$X = ( A \cdot B ) ‘$</p><h5 id="邏輯圖-4"><a href="#邏輯圖-4" class="headerlink" title="邏輯圖"></a>邏輯圖</h5><p><img src="https://i.imgur.com/LVGmMnV.png" alt="NAND閘" title="NAND閘"></p><h5 id="真值表-4"><a href="#真值表-4" class="headerlink" title="真值表"></a>真值表</h5><table><thead><tr><th>A</th><th>B</th><th>X</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><hr><h4 id="NOR閘"><a href="#NOR閘" class="headerlink" title="NOR閘"></a>NOR閘</h4><h5 id="布林運算式-5"><a href="#布林運算式-5" class="headerlink" title="布林運算式"></a>布林運算式</h5><p>$X = ( A + B ) ‘$</p><h5 id="邏輯圖-5"><a href="#邏輯圖-5" class="headerlink" title="邏輯圖"></a>邏輯圖</h5><p><img src="https://i.imgur.com/76wkbGw.png" alt="NOR閘" title="NOR閘"></p><h5 id="真值表-5"><a href="#真值表-5" class="headerlink" title="真值表"></a>真值表</h5><table><thead><tr><th>A</th><th>B</th><th>X</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>0</td></tr></tbody></table><hr><h2 id="閘的建構"><a href="#閘的建構" class="headerlink" title="閘的建構"></a>閘的建構</h2><ul><li>電晶體 transistor：是以半導體所製成，依據電壓準位來決定要當導線還是電阻的裝置。<br><img src="https://i.imgur.com/I6OFGJq.png" alt="transistor" title="電晶體"></li></ul><p>射極一般是接地的。而對電腦而言，源極產生大約5伏特的高電壓值，基極的電壓值用來判斷源極是否形成接地，若接地，電壓值會被下拉至0，反之，則會維持高電壓。</p><ul><li>輸出線會接在源極上，若源極接地，則輸出為低準位（二進制的 0），反之則為高準位（二進制的 1）。</li><li>如基極訊號為高準位，則源極接地，此時電晶體為 on，反之，電晶體為off。</li></ul><hr><h2 id="電路"><a href="#電路" class="headerlink" title="電路"></a>電路</h2><ul><li>組合電路<br><br>藉由某個閘的輸出作為另一個閘的輸入，便可組合成電路。<br><img src="https://i.imgur.com/cvi0B0J.png" alt="組合電路" title="組合電路範例"></li></ul><p>其中圖中的黑點，表示兩線是相連接的，如果沒有點，代表其中一條線從另一條線的上方跳過，互不影響。<br><br>此邏輯圖的布林運算式為：( AB + AC )，也可寫成 A ( B + C )，讀者可自行寫出真值表來確認。此現象稱作電路等效性。<br></p><ul><li><p>事實上，布林運算式滿足幾種數學性質：</p><ul><li>交換律，如：$AB = BA$、$A + B = B + A$。</li><li>結合律，如：$( AB ) C = A ( BC )$、$A + ( B + C ) = ( A + B ) + C$。</li><li>分配律，如：$A ( B + C ) = AB + AC$、$A + BC = ( A + B ) ( A + C )$。</li><li>恆等，如：$A1 = A$、$A + 0 = A$。</li><li>互補，如：$A ( A ‘ ) = 0$、$A + A ‘ = 1$。</li><li>狄摩根定律，如：$( AB ) ‘ = A ‘ + B ‘$、$( A + B ) ‘ = A ‘ B ‘$。</li></ul></li><li><p>加法器<br><br>二進制數元相加可能會產生進位值，如 1 + 1 = 10，能計算 2 個位元總和並產生進位為元的電路稱作半加器 half adder。<br>考慮半加器時，可寫出以下真值表：</p></li></ul><table><thead><tr><th>A</th><th>B</th><th style="text-align:center">總和</th><th style="text-align:center">進位</th></tr></thead><tbody><tr><td>0</td><td>0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td>1</td><td>0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td>0</td><td>1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td>1</td><td>1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><p>可看出來，總和為 $A \oplus B$，進位為 $AB$。<br></p><ul><li>一個半加器並未將可能的進位值併入計算，也就是說，一個半加器在兩個單一數元的相加是沒問題的，但在多重數元時會產生問題。</li><li>可以考慮進位輸入的電路稱作全加器 full adder。簡單的想法可以用兩個半加器來製作一個全加器；作法為：在總和輸出前，再加上一個半加器與進位輸入做總和，最後調整進位輸出。<br>以下為全加器的真值表及邏輯圖：</li></ul><table><thead><tr><th>A</th><th>B</th><th style="text-align:center">進位輸入</th><th style="text-align:center">總和</th><th style="text-align:center">進位輸出 </th></tr></thead><tbody><tr><td>0</td><td>0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td>0</td><td>0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td>0</td><td>1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td>0</td><td>1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td>1</td><td>0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td>1</td><td>0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td>1</td><td>1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td>1</td><td>1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p><img src="https://i.imgur.com/Y6PH0oI.png" alt="加法器" title="全加器"></p><ul><li>多工器 multiplexer<br><br>為一種產生單一輸出的電路，輸出等於電路中數個輸入的其中一個。依據一些原始輸入以外的輸入訊號（選擇訊號、選擇控制線）來決定哪條輸入將被輸出。<br>如：選擇訊號為 S0、S1、S2，輸入為D0~D7，則有以下真值表。</li></ul><table><thead><tr><th>S0</th><th>S1</th><th>S2</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>D0</td></tr><tr><td>0</td><td>0</td><td>0</td><td>D1</td></tr><tr><td>0</td><td>1</td><td>1</td><td>D2</td></tr><tr><td>0</td><td>1</td><td>0</td><td>D3</td></tr><tr><td>1</td><td>0</td><td>1</td><td>D4</td></tr><tr><td>1</td><td>0</td><td>0</td><td>D5</td></tr><tr><td>1</td><td>1</td><td>1</td><td>D6</td></tr><tr><td>1</td><td>1</td><td>0</td><td>D7</td></tr></tbody></table><p>上述多工器可化成此方塊圖。<br><br><img src="https://i.imgur.com/zrGhNVm.png" alt="多工器" title="多工器"></p><hr><h2 id="作為記憶體的電路"><a href="#作為記憶體的電路" class="headerlink" title="作為記憶體的電路"></a>作為記憶體的電路</h2><p>數位電路也可以儲存資訊，這些電路形成一個循序電路，電路的輸出可以當成電路的輸入，也就是說，某些電路的存在狀態有些被用來決定此電路的下個狀態；一些記憶體設計如：S-R閂。</p><ul><li>S-R閂 S-R latch：用來儲存一個單一二進制的數元。<br><img src="https://i.imgur.com/kubXSgE.png" alt="S-R閂" title="S-R閂"></li></ul><p>S Set、R Reset，透過此設計，只要S與R保持為1，X與Y的值皆能保持不變；通常，我們把X當作現在電路的狀態。<br><br>假設目前X為1，則Y為0，如果須將X設為0的話，只需將R設為0，X就會變成0，這時立刻將R設為1，X就會保持為0了。相反的，如需將X設為1，則需變動S為0，待X變為1後，再立刻改變S為1，X就會保持為1。</p><hr><h2 id="積體電路"><a href="#積體電路" class="headerlink" title="積體電路"></a>積體電路</h2><p>積體電路是一種嵌入多重閘的矽片，矽片邊緣上有許多腳位，代表著輸入或輸出。積體電路是依據閘的數量來分類的</p><ul><li>SSI（小型積體電路）<i class="fa fa-arrow-right"></i> 1~10</li><li>MSI（中型積體電路）<i class="fa fa-arrow-right"></i> 10~100</li><li>LSI（大型積體電路）<i class="fa fa-arrow-right"></i> 100~100,000</li><li>VLSI（超大型積體電路 <i class="fa fa-arrow-right"></i> 100,000 <i class="fa fa-arrow-up"></i></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
            <tag> 閘 </tag>
            
            <tag> 邏輯圖 </tag>
            
            <tag> 電路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：資料表示法</title>
      <link href="/ItC-data/"/>
      <url>/ItC-data/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="資料與電腦"><a href="#資料與電腦" class="headerlink" title="資料與電腦"></a>資料與電腦</h2><ul><li>資料 data：事實的基本數值。</li><li>資訊 infromation：經過組織、處理過的資料。</li></ul><h3 id="資料壓縮-data-compression"><a href="#資料壓縮-data-compression" class="headerlink" title="資料壓縮 data compression"></a>資料壓縮 data compression</h3><ul><li>壓縮率 compression ration：壓縮過後的大小 / 原始大小，介於 0 與 1 之間，越接近 0 代表壓縮越緊密。</li><li>資料壓縮技術分為兩種：<ul><li>無漏失型 lossless：指經過壓縮後無原始資料流失。</li><li>漏失型 lossy：指資料壓縮後有資料會漏失。</li></ul></li></ul><ol><li>類比資料 analog data：連續的，較類似實際資訊</li><li>數位資料 digital data：不連續的。</li><li>數位化 digitize：由類比轉成數位。</li></ol><h2 id="位置表示法"><a href="#位置表示法" class="headerlink" title="位置表示法"></a>位置表示法</h2><blockquote><p>基底 base：由 0 開始，等於基底時進位。</p></blockquote><h3 id="位置表示法-positional-notation"><a href="#位置表示法-positional-notation" class="headerlink" title="位置表示法 positional notation"></a>位置表示法 positional notation</h3><p>base R，位元數為 n，di →第 i 個位元，則公式為：<br><br>$${d_nR^{n-1}+d_{n-1}R^{n-2}+···+d_2R+d_1}$$</p><h3 id="二進位與八進位"><a href="#二進位與八進位" class="headerlink" title="二進位與八進位"></a>二進位與八進位</h3><ul><li>只要分別知道各個位元在另外一個進制的表示法，合起來即是其數值在另一個進制的表示法。<br></li><li>如：754(base 8)中 7(111)、5(101)、4(100)，則 111101100(base 2) == 754(base 8)。<br></li><li>每一個儲存單元稱為二進制數元 binary digit，或簡稱位元 bit。<br></li><li>8 個 bit 組合成位元組 bytes，bytes 組合成字組 words。</li></ul><h3 id="二進製表示法"><a href="#二進製表示法" class="headerlink" title="二進製表示法"></a>二進製表示法</h3><p>一個位元可表示兩件事（ 0 或是 1 ），如：會下雨、不會下雨；當需要表示超過兩件事時，就需要多重位元，兩個位元可表示四件事（ 00, 01, 10, 11 ）… 以此類推。</p><hr><h2 id="數字資料的表示"><a href="#數字資料的表示" class="headerlink" title="數字資料的表示"></a>數字資料的表示</h2><h3 id="負數的表示"><a href="#負數的表示" class="headerlink" title="負數的表示"></a>負數的表示</h3><ol><li>帶號 — 數量表示法 singed-magintude representation<br><br>即日常身活中，常常使用的表示法；概念為，負數在 0 的左邊，正數在 0 的右邊；表示為，將符號（+,−）放在數字的前面，通常正號省略，即：5、-1、10、0 (忽略 -0）……<ul><li>計算方法：加法為：將前數往右移後數的數量，若為負數則往左；減法為：將前數往左移後數的數量，若為負數則往右。</li></ul></li><li>固定大小數字表示法<br><br>如果我們固定數字總量的位元數，則我們有以下的表示法。<ol><li>十的補數 ten’s complement<br>假設固定位元數 == 2，則我們可以用 0~49 來表示 0~49 的正值，用 50~99 來表示 -50~-1，則無論加減法都用表示值做運算即可，如：-2+1 可寫成 98+1 = 99，即 -1。<ul><li>公式：負數 $I = 10^k − I$，其中 k 為數元的數目。</li></ul></li><li>二的補數<br>假定數元數 == 8，則一個二進位的數，最左邊的值代表著符號，1 為負、0 為正，例如：00000010 為 10 進位的 2，11111110 為10 進位的 -2。<ul><li>公式：負數 $I = 2^k − I$，其中 k 為數元的數目。</li><li>計算：如何計算一個負數 I 利用二的補數求得的二進位值，則有以下步驟：<br><br>將負數 I 取絕對值，求得其二進位值。<br>將其值反相，並加ㄧ，求得答案。<br>如：-2，其絕對值的二進位為 00000010，反相：11111101，並加ㄧ，則答案為 11111110。</li></ul></li></ol></li></ol><h3 id="實數的表示"><a href="#實數的表示" class="headerlink" title="實數的表示"></a>實數的表示</h3><ul><li>在電腦中，可被表示為非整數值稱作實數，即可寫成帶有小數的。<br><ul><li>基數點 radix point ：即 base 10 的小數點，在任意基底中稱作基數點。</li><li>浮點 floating point：即利用基數點浮動的方式來表示實數，公式為<br>$符號 \times 假數 \times 基底^{指數}$<br><br>其中假數為未加上基數點的數，指數則決定了基數點要浮動至哪裡，如指數為正，代表基數點右移，反之亦然。<br>例：$146.654$ 可表示為 $146654 * 10^{-3}$。</li></ul></li><li>十進位小數轉換為二進位的方法：不斷乘以 2 直到其值為 0，取每次計算過程中，基數點左邊第一位。<br>例：$.75 → .11$<br><br>$<br>\begin{equation}\begin{split}<br>.75 \times 2 = 1.50\\<br>.50 \times 2 = 1.00\\<br>\end{split}\end{equation}<br>$</li></ul><hr><h2 id="文字的表示"><a href="#文字的表示" class="headerlink" title="文字的表示"></a>文字的表示</h2><ul><li>字元集 character set：即字元表單，用碼來紀錄字元。<ul><li>ASCII 字元集<br><br>  最初用 7 個位元表示每個字元，第八個位元為檢查位元，可協助電腦檢查資料正確性，之後演變成八個位元全部用來表示字元。</li><li>Unicode 字元集<br><br>  為了表示所有語言而誕生，ASCII 為此集的子集。</li></ul></li></ul><h3 id="文字的壓縮"><a href="#文字的壓縮" class="headerlink" title="文字的壓縮"></a>文字的壓縮</h3><ol><li>關鍵字編碼：將一些常用的單詞以單一位元的符號取代，如：as → ^<ul><li>限制：使用的符號不可為原始文字的一部份，如欲壓縮一份菜單，則不可以用 $ 來代替任何單詞。</li><li>延伸：取代的為文字的樣式，如 ing、tion 等。缺點為，短樣式，節省的空間不多。</li></ul></li><li>遊程長度編碼：某些情況下，某一字元可能會不斷的重複，則可用此編碼，如：AAAAAAA → *A7，其中 * 稱作旗標字元 flag character，7 為重複的數量。</li><li>霍夫曼編碼：將常用的字元以短位元的字串表示，如 A → 00、E → 01。此編碼有一個重要的特徵為，沒有一個字串是另一個字串的開頭，即我們用 01 表示 O 後，不會有任何一個字元被表示為 0110，事實上任何用 01 開頭的字串接不會出現。</li></ol><hr><h2 id="音訊資料的表示"><a href="#音訊資料的表示" class="headerlink" title="音訊資料的表示"></a>音訊資料的表示</h2><p>要在電腦上表示聲音，須將聲波數位化，也就是將聲波以電子訊號表示，為一系列不連續的數值。<br>類比訊號是以電壓來做連續變動，要將訊號數位化，則必須週期的測量電壓，記錄其值，這個過程稱作取樣 sampling。</p><ul><li>乙烯基錄音唱片（黑膠）：為一種聲波的類比表示法，記錄播放器的唱針延唱片的螺旋上升及下降，類似於電壓的變化。</li><li>光碟片 CD：為數位的表示法，低強度的雷射光瞄準碟片，反射至感知器，如表面平坦，則會強烈反射，如有凹坑，則反射減弱；藉此分析結果，產生二進位資料。</li></ul><h3 id="音訊格式"><a href="#音訊格式" class="headerlink" title="音訊格式"></a>音訊格式</h3><ul><li>MP3<br>為 MPEG-2 音訊第三層檔案的縮寫，MPEG Moving Picture Experts Group，為一個發展數位音訊與視訊壓縮的委員會。<br>MP3 使用了漏失與非漏失型兩種方式壓縮，分析實際聲音與人類心理聲音的關係之數學模型做比較，並丟棄人類無法聽到的資訊，最後用霍夫曼編碼的形式壓縮。</li></ul><hr><h2 id="影像與圖形的表示"><a href="#影像與圖形的表示" class="headerlink" title="影像與圖形的表示"></a>影像與圖形的表示</h2><h3 id="顏色的表示"><a href="#顏色的表示" class="headerlink" title="顏色的表示"></a>顏色的表示</h3><ul><li>電腦以 RGB 來表示，其中實際的數值代表主要顏色的相對貢獻度。<ul><li>顏色深度 color depth：通常以位元數來表示。</li><li>高彩 HiColor：表示16位元的顏色深度，其中5個位元用來表示每一個RGB值，其餘位元有時表示透明度 transparency。</li><li>全彩 TureColor：表示24位元的顏色深度，每一個RGB值用8個位元。</li></ul></li><li>影樣及圖形數位化<ul><li>像素 pixels：圖形數位化是透過聚集個別點來表示圖像，此個別點稱作像素。一個像素是由一種單一顏色組成。</li><li>解析度 resolution：代表圖像的像素數目。</li></ul></li></ul><h3 id="光柵圖形格式"><a href="#光柵圖形格式" class="headerlink" title="光柵圖形格式"></a>光柵圖形格式</h3><p>以一個像素接著一個的圖形稱作光柵圖形格式，如：JPG、BMP 等。</p><h3 id="圖形向量表示法"><a href="#圖形向量表示法" class="headerlink" title="圖形向量表示法"></a>圖形向量表示法</h3><p>為另一種影像表示法，以線條及幾何形狀來描述圖像。</p><hr><h2 id="視訊的表示"><a href="#視訊的表示" class="headerlink" title="視訊的表示"></a>視訊的表示</h2><ul><li>codec 壓縮/解壓縮器</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
            <tag> 數字表示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>計概：簡介</title>
      <link href="/ItC-intro/"/>
      <url>/ItC-intro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="電腦系統"><a href="#電腦系統" class="headerlink" title="電腦系統"></a>電腦系統</h2><blockquote><p>電腦系統如洋蔥由許多層組成，由內而外為：<br>資訊 <i class="fa fa-arrow-right"></i> 硬體 <i class="fa fa-arrow-right"></i> 程式設計 <i class="fa fa-arrow-right"></i> 作業系統 <i class="fa fa-arrow-right"></i> 應用  <i class="fa fa-arrow-right"></i> 通訊。</p></blockquote><ol><li>資訊層（最內層）：對應電腦內資訊的表示方式，為純概念層；電腦上的資訊用2進位來管理。</li><li>硬體層：電腦系統中的實體硬體，包括邏輯閘、控制電流的電路等。</li><li>程式設計層：處理軟體及指令。</li><li>OS：OS協助管理電腦資源、協助我們和電腦互動，以及管理硬體、軟體、資料互動的方式。</li><li>應用：前面幾層聚焦在讓電腦工作（內部），此層聚焦在真實世界的問題，如遊戲、設計等。</li><li>通訊：透過網際網路分享資訊、資源。</li></ol><hr><h2 id="電腦歷史"><a href="#電腦歷史" class="headerlink" title="電腦歷史"></a>電腦歷史</h2><h3 id="硬體"><a href="#硬體" class="headerlink" title="硬體"></a>硬體</h3><ul><li>真空管  <i class="fa fa-arrow-right"></i> 電晶體  <i class="fa fa-arrow-right"></i> 積體電路(IC)  <i class="fa fa-arrow-right"></i> 大型積體電路</li></ul><h3 id="軟體"><a href="#軟體" class="headerlink" title="軟體"></a>軟體</h3><ol><li>機械語言</li><li>協助開發機械語言而發展出組合語言，此語言需要被翻譯為機械語言才可使用，因此「組譯器 assemblers」誕生了。</li><li>高階語言允許以英文的陳述句來撰寫指令，每一個不同的高階語言需要不同的翻譯程式，稱作「編譯器 compiler」。</li><li>OS可決定程式何時執行。</li><li>結構化程式設計</li><li>OOP</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 計算機概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 計算機概論 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
