<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LuSW</title>
  
  <subtitle>技術筆記</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.lusw.dev/"/>
  <updated>2020-04-20T04:20:16.000Z</updated>
  <id>http://blog.lusw.dev/</id>
  
  <author>
    <name>LuSkywalker</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C 語言使用 Union 與位元欄位來改特定 bit 區間值</title>
    <link href="http://blog.lusw.dev/c-bit-operation/"/>
    <id>http://blog.lusw.dev/c-bit-operation/</id>
    <published>2020-04-10T09:28:52.000Z</published>
    <updated>2020-04-20T04:20:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>在 C 語言中，如果我們要對特定的 bit(s) 做操作的話，最直覺的方式是用 bit and（<code>&amp;</code>）跟 bit or（<code>|</code>）：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> bit_sample <span class="token operator">=</span> <span class="token number">0x0123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 0000 0001 0010 0011 */</span><span class="token comment" spellcheck="true">/* 將第 2 個 bit 改成 1 */</span>bit_samplee <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0x1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 0000 0001 0010 0011 */</span><span class="token comment" spellcheck="true">/* 將第 5 個 bit 改成 1 */</span>bit_samplee <span class="token operator">|</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 0000 0001 0010 0011 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>從上面的例子可以看到如何使用 bit and/or 來操作特定的 bit，這種方式對於單一個 bit 並不會太麻煩，但有以下缺點：</p><ul><li>無法覆用：這種方式不能快速地建立一個方法，也比較不好理解</li><li>對於區間上就不好使了</li></ul><p>如果要解決上述缺點，有一個方式是使用 <code>union</code>，一個在嵌入式、驅動程式裡常常用到的方法。</p><hr><h2 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h2><p><code>union</code> 是 C 語言裡面可以對一個結構裡面的元素，可以有不同的資料型態去理解，如以下例子：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">union</span> sample <span class="token punctuation">{</span>    <span class="token keyword">int</span> sample_int<span class="token punctuation">;</span>    <span class="token keyword">char</span> sample_str<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是：同一時間內只能存取一個屬性，準確來說他們是共用一個記憶體區塊，所以改第一個值第二個值會同時更改。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[[C 語言] 程式設計教學：如何使用聯合 (Union)](https://michaelchen.tech/c-programming/union/)">[1]</span></a></sup></p></blockquote><h3 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h3><p>奇怪，不是在講 <code>union</code> 嗎，怎麼會提到 <code>struct</code> 呢？那是因為 C 裡面有一個有趣的東西叫做位元欄位<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[位元欄](https://zh.wikipedia.org/wiki/%E4%BD%8D%E6%AE%B5)">[2]</span></a></sup>，這個東西必須搭配結構使用；先看例子：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> bit_row <span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> row1 <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> row2 <span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> row3 <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>乍看之下好像跟一般的結構差不多，可是我們注意到在每個元素宣告的結尾多了一個 <code>: 數字</code>，這是什麼意思？</p><ol><li>首先，<code>unsigned short</code> 在 64 位元裡大小是 4位，<code>unsigned int</code> 則是 8位</li><li>加上 <code>: 數字</code>，這個東西就叫位元欄位，我們可以限制當前元素的大小</li><li>因此，元素 1 的大小就被我們縮至 1 位，依此類推</li></ol><hr><p>有了上述的<em>工具</em>，就可以建立一個好用而且好理解的位元操作方法！</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">union</span> method_ex <span class="token punctuation">{</span>    <span class="token keyword">int</span> real_val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> bits <span class="token punctuation">{</span>        <span class="token keyword">short</span> bit0to2 <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> bit3and4 <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> bit5to7 <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立好上面這個 union 後，如果要將某一個整數的第 3 到 4 位 的值改掉，可以這樣寫</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">union</span> method_ex int_ex<span class="token punctuation">;</span>int_ex<span class="token punctuation">.</span>real_val <span class="token operator">=</span> <span class="token number">0x0123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 0000 0001 0010 0011 */</span><span class="token comment" spellcheck="true">/* change 3 and 4 bits to 01 */</span>int_ex<span class="token punctuation">.</span>bits<span class="token punctuation">.</span>bit3and4 <span class="token operator">=</span> B01<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 0000 0001 0010 1011 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這樣的寫法，更簡單，更易懂。</p><hr><h3 id="剩下的空間"><a href="#剩下的空間" class="headerlink" title="剩下的空間"></a>剩下的空間</h3><p>值得注意的一件事，我們沿用上面的例子；<code>method_ex</code> 有一個元素叫<em>真正的值</em>，他是一個整數（8 位），剛好另外一個元素我們使用位元欄位的技巧也控制在 8 位；但，如果我們沒有這麼做呢？</p><p>答案是：你可以這麼寫，不會有什麼問題，但不建議。</p><h4 id="更大"><a href="#更大" class="headerlink" title="更大"></a>更大</h4><p>如果 <code>bits</code> 結構今天大於 8 位，那我們就沒辦法透過更改<em>真正的值</em>來改變到高於 8 位的值，因此這麼做是<strong>沒意義</strong>的。</p><h4 id="更小"><a href="#更小" class="headerlink" title="更小"></a>更小</h4><p>如果 <code>bits</code> 結構今天小於 8 位，這麼做完全不會有任何問題，但習慣上，我們會把它補齊，像是我們在 <a href="/c-attribute">attribute</a> 篇裡提到的 padding。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">union</span> method_ex <span class="token punctuation">{</span>    <span class="token keyword">int</span> real_val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> bits <span class="token punctuation">{</span>        <span class="token keyword">short</span> bit0to2 <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> bit3and4 <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> bit5and6 <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>沒有定義第 7 位</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">union</span> method_ex <span class="token punctuation">{</span>    <span class="token keyword">int</span> real_val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> bits <span class="token punctuation">{</span>        <span class="token keyword">short</span> bit0to2 <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> bit3and4 <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> bit5and6 <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> notused <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>隨便取名，只要有定義就好</p></blockquote><div id="footnotes"><hr class="clearfix"><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://michaelchen.tech/c-programming/union/" target="_blank" rel="noopener">[C 語言] 程式設計教學：如何使用聯合 (Union)</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E6%AE%B5" target="_blank" rel="noopener">位元欄</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;在 C 語言中，如果我們要對特定的 bit(s) 做操作的話，最直覺的方式是
      
    
    </summary>
    
    
      <category term="C語言" scheme="http://blog.lusw.dev/categories/C%E8%AA%9E%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://blog.lusw.dev/tags/C/"/>
    
      <category term="Clang" scheme="http://blog.lusw.dev/tags/Clang/"/>
    
      <category term="C語言" scheme="http://blog.lusw.dev/tags/C%E8%AA%9E%E8%A8%80/"/>
    
      <category term="bit" scheme="http://blog.lusw.dev/tags/bit/"/>
    
      <category term="union" scheme="http://blog.lusw.dev/tags/union/"/>
    
  </entry>
  
  <entry>
    <title>如何查看 Linux 被佔用的 port</title>
    <link href="http://blog.lusw.dev/linux-lookup-port/"/>
    <id>http://blog.lusw.dev/linux-lookup-port/</id>
    <published>2020-04-08T07:08:31.000Z</published>
    <updated>2020-04-10T07:13:29.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>當我們下 <code>hexo s</code> 後，預設將會開啟 <code>:4000</code>，但如果 <code>:4000</code> 被佔用就會報錯；為解決此問題，我們必須知道是哪個行程佔用，並 <code>kill</code> 它。<br>以下我們介紹 2 種 Linux 的指令。</p></blockquote><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p>lsof (List Open Files)<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Linux 列出行程開啟的檔案，lsof 指令用法教學與範例](https://blog.gtwang.org/linux/linux-lsof-command-list-open-files-tutorial-examples/)">[1]</span></a></sup>，可以列出所有被行程打開的檔案。可以利用 <code>-i</code> 來查找所有網路連線；於是</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">lsof</span> -i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>將會列出所有使用 port 的行程。而有時候有些 port 會有別名，為了方便找查，我們加上 <code>-P</code> (列出實際的 port number)；於是</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">lsof</span> -i -P<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最後為了簡化結果，我們將原本的結果傳給 <code>grep</code></p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">lsof</span> -i -P <span class="token operator">|</span> <span class="token function">grep</span> :4000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>:4000</code> 可任意改成想要的 port number，如 <code>:1234</code></p></blockquote><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>netstat 可以用來查看各種網路狀態，一樣可以拿來查找被佔用的 port。</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">netstat</span> -tulpn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>-t</code> 代表找走 <code>TCP</code> 協定的</li><li><code>-u</code> 代表找走 <code>UDP</code> 協定的</li><li><code>-l</code> 代表找 <code>LISTEN</code> 的 socket</li><li><code>-n</code> 代表顯示硬體名稱，<code>-p</code> 代表顯示 PID。<sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[netstat Command Usage on Linux](https://geekflare.com/netstat/)">[2]</span></a></sup></li></ul><p>我們一樣可以用 <code>grep</code> 來協助尋找</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">netstat</span> -tulpn <span class="token operator">|</span> <span class="token function">grep</span> :4000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><ul><li>Reference<ul><li><a href="https://www.opencli.com/linux/3-way-check-linux-listen-port" target="_blank" rel="noopener">3 種 Linux 查看 port 被程式佔用的方法</a></li></ul></li></ul><div id="footnotes"><hr class="clearfix"><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.gtwang.org/linux/linux-lsof-command-list-open-files-tutorial-examples/" target="_blank" rel="noopener">Linux 列出行程開啟的檔案，lsof 指令用法教學與範例</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://geekflare.com/netstat/" target="_blank" rel="noopener">netstat Command Usage on Linux</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;當我們下 &lt;code&gt;hexo s&lt;/code&gt; 
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.lusw.dev/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.lusw.dev/tags/Linux/"/>
    
      <category term="port" scheme="http://blog.lusw.dev/tags/port/"/>
    
      <category term="lsof" scheme="http://blog.lusw.dev/tags/lsof/"/>
    
      <category term="netstat" scheme="http://blog.lusw.dev/tags/netstat/"/>
    
  </entry>
  
  <entry>
    <title>Linux 的 &quot;init&quot; 行程</title>
    <link href="http://blog.lusw.dev/linux-init-number/"/>
    <id>http://blog.lusw.dev/linux-init-number/</id>
    <published>2020-04-08T06:18:01.000Z</published>
    <updated>2020-04-08T12:16:18.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="init-行程"><a href="#init-行程" class="headerlink" title="init 行程"></a>init 行程</h2><p>init 行程（process/tas）是 Linux 內核下的第一個行程，內核會在初始化完硬體後建立該行程。</p><blockquote><p>如<a href="https://blog.lusw.dev/starting-xv6/#toc-heading-3">XV6 啟動流程</a> 中提到的 <code>userinit()</code></p></blockquote><p>正常來說 init 應該被放在 <code>/sbin/init</code> 中，如果內核找不到，會試著在 <code>/bin/sh</code> 中尋找，若都失敗則將導致<strong>啟動失敗</strong>。</p><h2 id="init-等級"><a href="#init-等級" class="headerlink" title="init 等級"></a>init 等級</h2><table><thead><tr><th>等級</th><th>用途</th></tr></thead><tbody><tr><td>0</td><td>關機</td></tr><tr><td>1</td><td>single user mode</td></tr><tr><td>6</td><td>重新啟動</td></tr></tbody></table><ul><li>對於 2 ~ 5，不同的發行版有不同的解釋，大部分的系統中：<ul><li>3 代表正常啟動 CLI</li><li>5 代表正常啟動 GUI </li></ul></li></ul><hr><ul><li>Reference<ul><li><a href="https://blog.csdn.net/cougar_mountain/article/details/9798191" target="_blank" rel="noopener">linux 下的init 0，1，2，3，4，5，6知识介绍</a></li><li><a href="http://felix-lin.com/linux/init%E6%BC%94%E5%8C%96%E6%AD%B7%E7%A8%8B-%E8%BD%89%E8%B2%BC-%E6%B7%BA%E6%9E%90-linux-%E5%88%9D%E5%A7%8B%E5%8C%96-init-%E7%B3%BB%E7%B5%B1%EF%BC%8C%E7%AC%AC-1-%E9%83%A8%E5%88%86-sysvinit/" target="_blank" rel="noopener">init演化歷程 – [轉貼] 淺析 Linux 初始化 init 系統，第 1 部分: sysvinit</a></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;init-行程&quot;&gt;&lt;a href=&quot;#init-行程&quot; class
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.lusw.dev/categories/Linux/"/>
    
    
      <category term="kernel" scheme="http://blog.lusw.dev/tags/kernel/"/>
    
      <category term="Linux" scheme="http://blog.lusw.dev/tags/Linux/"/>
    
      <category term="init" scheme="http://blog.lusw.dev/tags/init/"/>
    
  </entry>
  
  <entry>
    <title>在 Xcode 中為免費開發者帳戶重新建立憑證</title>
    <link href="http://blog.lusw.dev/renew-xcode-profile-free-develope-account/"/>
    <id>http://blog.lusw.dev/renew-xcode-profile-free-develope-account/</id>
    <published>2020-03-23T03:54:33.000Z</published>
    <updated>2020-04-19T14:29:53.843Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="免費帳戶憑證"><a href="#免費帳戶憑證" class="headerlink" title="免費帳戶憑證"></a>免費帳戶憑證</h2><p>免費版開發者帳戶的憑證有效期限只有 7 天，可以參考此連結。<br><a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E5%95%8F%E9%A1%8C%E8%A7%A3%E7%AD%94%E9%9B%86/%E5%85%8D%E8%B2%BB%E9%96%8B%E7%99%BC%E5%B8%B3%E8%99%9F%E7%9A%84-ios-app-%E5%91%BD%E4%B8%AD%E6%B3%A8%E5%AE%9A%E5%8F%AA%E8%83%BD%E6%B4%BB%E4%B8%83%E5%A4%A9-8fd2cc849bfb" target="_blank" rel="noopener">免費開發帳號的 iOS App 命中注定只能活七天 !</a></p><p>理論上來說，超過期限只要重新從 Xcode 安裝 App 就會自動重簽 (renew)，但如果在期限內想要直接延期呢？</p><h2 id="建立新的憑證"><a href="#建立新的憑證" class="headerlink" title="建立新的憑證"></a>建立新的憑證</h2><p>如果想要直接延期，唯一的方法只有重新建立一個憑證：</p><ul><li><p>從 Preference 中的 Accounts<br><img src="https://i.imgur.com/JfTJGet.png" alt="Preference > Accounts"></p></li><li><p>選擇右下角的 Manage Certificates…<br><img src="https://i.imgur.com/r5PAFur.png" alt="黃框處"></p></li><li><p>按下去，選擇左下角的 <code>+</code><br><img src="https://i.imgur.com/Q59J2Tj.png" alt="黃框處"></p></li><li><p>選擇 Apple Development<br><img src="https://i.imgur.com/bSelwuz.png" alt=""></p></li></ul><p>之後就會新增一個憑證，可以回去 Targets 看憑證的確更新了。<br><img src="https://i.imgur.com/9MsNUqd.png" alt="紅字"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;免費帳戶憑證&quot;&gt;&lt;a href=&quot;#免費帳戶憑證&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Note" scheme="http://blog.lusw.dev/categories/Note/"/>
    
    
      <category term="Xcode" scheme="http://blog.lusw.dev/tags/Xcode/"/>
    
      <category term="ios" scheme="http://blog.lusw.dev/tags/ios/"/>
    
      <category term="renew" scheme="http://blog.lusw.dev/tags/renew/"/>
    
      <category term="certificate" scheme="http://blog.lusw.dev/tags/certificate/"/>
    
  </entry>
  
  <entry>
    <title>CSS3選擇器 :not()</title>
    <link href="http://blog.lusw.dev/css-not-selecter/"/>
    <id>http://blog.lusw.dev/css-not-selecter/</id>
    <published>2020-01-29T06:03:34.000Z</published>
    <updated>2020-04-19T10:24:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>假設有多個一樣 <code>label</code> 的元素要套用一種樣式，但又有幾個需要排除在外時使用。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ul><li><p>HTML:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CSS</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.ex-box</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#455A64</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.ex</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><style>.ex-box {    background-color: #455A64;    text-align: center;}.ex {    color: #f00;    font-style: italic;    font-weight: bold;}</style><div class="ex-box"><span class="ex">1</span>    <span class="ex">2</span>    <span class="ex">3</span>    <span class="ex">4</span></div><blockquote><p>可以看到上面：1~4 都有<em>斜體</em>跟<strong>粗體</strong>，為了方便觀察，這裡讓文字變為紅色</p></blockquote><hr><ul><li>HTML:<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex-ignored<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>not-ex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>接著將 3 號加上 <code>not-ex-ignored</code> 的 id。</p><ul><li>CSS<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.not-ex-box</span> </span><span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#455A64</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.not-ex</span><span class="token pseudo-class">:not(#not-ex-ignored)</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#f00</span><span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>並將此 id 略過（使用 <code>:not</code> 選擇器）</p><style>.not-ex-box {    background-color: #455A64;    text-align: center;}.not-ex:not(#not-ex-ignored) {    color: #f00;    font-style: italic;    font-weight: bold;}</style><div class="not-ex-box"><span class="not-ex">1</span>    <span class="not-ex">2</span>    <span class="not-ex" id="not-ex-ignored">3</span>    <span class="not-ex">4</span></div><blockquote><p>如此一來，就只有三號沒有套用到屬性。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
      <category term="selector" scheme="http://blog.lusw.dev/tags/selector/"/>
    
      <category term="note" scheme="http://blog.lusw.dev/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Perl 模組安裝</title>
    <link href="http://blog.lusw.dev/perl-install-module/"/>
    <id>http://blog.lusw.dev/perl-install-module/</id>
    <published>2019-12-27T10:40:13.000Z</published>
    <updated>2020-04-10T03:28:24.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="使用自動安裝的環境"><a href="#使用自動安裝的環境" class="headerlink" title="使用自動安裝的環境"></a>使用自動安裝的環境</h2><pre class="line-numbers language-bash"><code class="language-bash">perl -MCPAN -e shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>類似於 <code>apt</code>、<code>brew</code> 的好用套件，輸入指令會進入此環境中，成功的話終端機會顯示此畫面:</li></ul><pre class="line-numbers language-bash"><code class="language-bash">cman<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><pre class="line-numbers language-bash"><code class="language-bash">cman<span class="token operator">></span> <span class="token function">install</span> Module::Name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>直接下 install 指令 後面接模組名稱即可。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;使用自動安裝的環境&quot;&gt;&lt;a href=&quot;#使用自動安裝的環境&quot; c
      
    
    </summary>
    
    
      <category term="Note" scheme="http://blog.lusw.dev/categories/Note/"/>
    
    
      <category term="perl" scheme="http://blog.lusw.dev/tags/perl/"/>
    
  </entry>
  
  <entry>
    <title>在 Arduino 上使用中斷</title>
    <link href="http://blog.lusw.dev/arduino-interrupt/"/>
    <id>http://blog.lusw.dev/arduino-interrupt/</id>
    <published>2019-12-26T15:36:34.000Z</published>
    <updated>2020-04-08T06:20:46.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="新增中斷"><a href="#新增中斷" class="headerlink" title="新增中斷"></a>新增中斷</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token function">attachInterrupt</span><span class="token punctuation">(</span><span class="token function">digitalPinToInterrupt</span><span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span class="token punctuation">,</span> ISR<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">attachInterrupt</span><span class="token punctuation">(</span>interrupt<span class="token punctuation">,</span> ISR<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">attachInterrupt</span><span class="token punctuation">(</span>pin<span class="token punctuation">,</span> ISR<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>有三種可選：<ul><li>第一個參數代表幾號中斷或是幾號 pin，通常用第一種寫法最保險</li><li>第二個參數放 ISR，當中斷發生時要做的事</li><li>第三個參數為發生中斷的模式，下面有詳細介紹</li></ul></li></ul><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul><li>LOW：當 pin 處於低電位的時候觸發中斷</li><li>RISING：當 pin 從低電位轉為高電位時觸發中斷</li><li>FALLING：當 pin 從高電位轉為高電位時觸發中斷</li><li>CHANGE：當 pin 的電位發生改變時觸發中斷</li><li>HIGH：當 pin 處於高電位時觸發中斷（只適用 arduino due）</li></ul><h2 id="移除中斷"><a href="#移除中斷" class="headerlink" title="移除中斷"></a>移除中斷</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token function">detachInterrupt</span><span class="token punctuation">(</span><span class="token function">digitalPinToInterrupt</span><span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">detachInterrupt</span><span class="token punctuation">(</span>interrupt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">detachInterrupt</span><span class="token punctuation">(</span>pin<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>一樣有三個寫法，與新增中斷的第一個參數相同。</li></ul><h2 id="關閉-開啟中斷"><a href="#關閉-開啟中斷" class="headerlink" title="關閉/開啟中斷"></a>關閉/開啟中斷</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token function">noInterrupts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">interrupts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>noInterrupts</code> 不會將 <code>reset</code> 中斷關閉。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;新增中斷&quot;&gt;&lt;a href=&quot;#新增中斷&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Note" scheme="http://blog.lusw.dev/categories/Note/"/>
    
    
      <category term="Arduino" scheme="http://blog.lusw.dev/tags/Arduino/"/>
    
      <category term="interrupt" scheme="http://blog.lusw.dev/tags/interrupt/"/>
    
  </entry>
  
  <entry>
    <title>使用 ANSI 跳脫碼印出有色文字</title>
    <link href="http://blog.lusw.dev/ascii-color/"/>
    <id>http://blog.lusw.dev/ascii-color/</id>
    <published>2019-12-26T14:50:57.000Z</published>
    <updated>2020-04-10T09:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="ANSI-跳脫碼"><a href="#ANSI-跳脫碼" class="headerlink" title="ANSI 跳脫碼"></a>ANSI 跳脫碼</h2><p>ANSI 跳脫碼，即 ASCII Escape Code，標準 CSI 格式為</p><pre class="line-numbers language-shell"><code class="language-shell">CSI n1 [;n2 [;...]] m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>n1</code> 通常填入 <code>\x1b</code>，在 ASCII 表中 <code>0x1b</code> 代表著 escape。</li><li><code>n1</code>、<code>n2</code> 為 <strong>SGR (Select Graphic Rendition)</strong>，可參考表格對應相對的值。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[[Linux C] ANSI逃脫碼與printf顏色教學](http://naeilproj.blogspot.com/2015/08/linux-c-c-printf.html)">[1]</span></a></sup></li></ul><h2 id="顏色輸出"><a href="#顏色輸出" class="headerlink" title="顏色輸出"></a>顏色輸出</h2><h3 id="範例：粗紅體"><a href="#範例：粗紅體" class="headerlink" title="範例：粗紅體"></a>範例：粗紅體</h3><pre class="line-numbers language-c"><code class="language-c">\x1b<span class="token punctuation">[</span><span class="token punctuation">;</span><span class="token number">31</span><span class="token punctuation">;</span>1m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>SGR 30~37 代表著顏色，可參照此表格<br><img src="https://i.imgur.com/8HEFwxZ.png" alt=""><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[ANSI跳脫序列](https://zh.wikipedia.org/wiki/ANSI%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97)">[2]</span></a></sup></li><li>後面的 1 代表粗體，不寫則為一般字型；通常一般的終端機會將粗體顯示成較亮的顏色，而非粗體。</li><li>有些終端機提供用高位的數字指定較亮的顏色，90-97 及 100-107，如下圖<br><img src="https://i.imgur.com/mEP8AjU.png" alt=""></li></ul><h3 id="xterm-256color"><a href="#xterm-256color" class="headerlink" title="xterm-256color"></a>xterm-256color</h3><ul><li>使用 8 位元的 SGR，進而提供 256 色的輸出。<br><img src="https://i.imgur.com/hjjHfve.png" alt=""></li></ul><div id="footnotes"><hr class="clearfix"><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://naeilproj.blogspot.com/2015/08/linux-c-c-printf.html" target="_blank" rel="noopener">[Linux C] ANSI逃脫碼與printf顏色教學</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://zh.wikipedia.org/wiki/ANSI%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97" target="_blank" rel="noopener">ANSI跳脫序列</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;ANSI-跳脫碼&quot;&gt;&lt;a href=&quot;#ANSI-跳脫碼&quot; cla
      
    
    </summary>
    
    
      <category term="C語言" scheme="http://blog.lusw.dev/categories/C%E8%AA%9E%E8%A8%80/"/>
    
    
      <category term="C" scheme="http://blog.lusw.dev/tags/C/"/>
    
      <category term="Clang" scheme="http://blog.lusw.dev/tags/Clang/"/>
    
      <category term="C語言" scheme="http://blog.lusw.dev/tags/C%E8%AA%9E%E8%A8%80/"/>
    
      <category term="ASCII" scheme="http://blog.lusw.dev/tags/ASCII/"/>
    
      <category term="ANSI" scheme="http://blog.lusw.dev/tags/ANSI/"/>
    
  </entry>
  
  <entry>
    <title>RT-Thread GUI 繪圖引擎 - 硬體</title>
    <link href="http://blog.lusw.dev/rtgui-dc-hw/"/>
    <id>http://blog.lusw.dev/rtgui-dc-hw/</id>
    <published>2019-03-13T03:27:41.000Z</published>
    <updated>2020-03-24T09:31:33.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Rtgui 中的 dc（drawable canvas） 也就是繪圖引擎，可以說是 rtgui 中最重要的一個部分，其中分成 3 個部分：給硬體的 dc_hw、給 buffer 的 dc_buffer 以及給 client 的。</p><p>接下來將會追蹤 dc_hw 中的程式碼，分析 rtgui 是如何在螢幕上面描繪點線面。</p><hr><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><blockquote><p>File: dc.h</p></blockquote><h3 id="dc"><a href="#dc" class="headerlink" title="dc"></a>dc</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * The abstract device context * * Normally, a DC is a drawable canvas, user can draw point/line/cycle etc * on the DC. * * There are several kinds of DC: * - Hardware DC; * - Client DC; * - Buffer DC; */</span><span class="token keyword">struct</span> rtgui_dc<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* type of device context */</span>    rt_uint32_t type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* dc engine */</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> rtgui_dc_engine <span class="token operator">*</span>engine<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="dc-engine"><a href="#dc-engine" class="headerlink" title="dc_engine"></a>dc_engine</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> rtgui_dc_engine<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* interface */</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>draw_point<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>draw_color_point<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> rtgui_color_t color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>draw_vline<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>draw_hline<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fill_rect<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>blit_line<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> rt_uint8_t <span class="token operator">*</span>line_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>blit<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_point <span class="token operator">*</span>dc_point<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dest<span class="token punctuation">,</span> rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>fini<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="dc-hw"><a href="#dc-hw" class="headerlink" title="dc_hw"></a>dc_hw</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * The hardware device context * * The hardware DC is a context based on hardware device, for examle the * LCD device. The operations on the hardware DC are reflected to the real * hardware. * */</span><span class="token keyword">struct</span> rtgui_dc_hw<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc parent<span class="token punctuation">;</span>    rtgui_widget_t <span class="token operator">*</span>owner<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> rtgui_graphic_driver <span class="token operator">*</span>hw_driver<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="hw-engine"><a href="#hw-engine" class="headerlink" title="hw_engine"></a>hw_engine</h3><blockquote><p>File: dc_hw.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">struct</span> rtgui_dc_engine dc_hw_engine <span class="token operator">=</span><span class="token punctuation">{</span>    rtgui_dc_hw_draw_point<span class="token punctuation">,</span>    rtgui_dc_hw_draw_color_point<span class="token punctuation">,</span>    rtgui_dc_hw_draw_vline<span class="token punctuation">,</span>    rtgui_dc_hw_draw_hline<span class="token punctuation">,</span>    rtgui_dc_hw_fill_rect<span class="token punctuation">,</span>    rtgui_dc_hw_blit_line<span class="token punctuation">,</span>    rtgui_dc_hw_blit<span class="token punctuation">,</span>    rtgui_dc_hw_fini<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="啟動-dc"><a href="#啟動-dc" class="headerlink" title="啟動 dc"></a>啟動 dc</h2><p>我們可以從 rtgui 官方提供的範例發現，在使用 dc 前，需要先利用 <code>rtgui_dc_begin_drawing</code> 來啟動引擎，並在結束時呼叫 <code>rtgui_dc_end_drawing</code>；而啟動時，會判斷要使用哪種 dc，並啟動，如 1866 至 1871 行</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* create client or hardware DC */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">rtgui_region_is_flat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>owner<span class="token operator">-></span>clip<span class="token punctuation">)</span> <span class="token operator">==</span> RT_EOK<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">rtgui_rect_is_equal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>owner<span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>owner<span class="token operator">-></span>clip<span class="token punctuation">.</span>extents<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> RT_EOK<span class="token punctuation">)</span>        dc <span class="token operator">=</span> <span class="token function">rtgui_dc_hw_create</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        dc <span class="token operator">=</span> <span class="token function">rtgui_dc_client_create</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果判斷為 hw，則進入 <code>rtgui_dc_hw_create</code> </p><hr><h2 id="建立-dc"><a href="#建立-dc" class="headerlink" title="建立 dc"></a>建立 dc</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_dc_hw_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 dc</td><td>dc 指標</td></tr></tbody></table><table><thead><tr><th><code>*owner</code></th></tr></thead><tbody><tr><td>dc 擁有者</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span><span class="token function">rtgui_dc_hw_create</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>owner<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* adjudge owner */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>owner <span class="token operator">==</span> RT_NULL <span class="token operator">||</span> owner<span class="token operator">-></span>toplevel <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span> <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* create DC */</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">rtgui_malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        dc<span class="token operator">-></span>parent<span class="token punctuation">.</span>type <span class="token operator">=</span> RTGUI_DC_HW<span class="token punctuation">;</span>        dc<span class="token operator">-></span>parent<span class="token punctuation">.</span>engine <span class="token operator">=</span> <span class="token operator">&amp;</span>dc_hw_engine<span class="token punctuation">;</span>        dc<span class="token operator">-></span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>        dc<span class="token operator">-></span>hw_driver <span class="token operator">=</span> <span class="token function">rtgui_graphic_driver_get_default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>dc<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="運作-dc-畫圖"><a href="#運作-dc-畫圖" class="headerlink" title="運作 dc (畫圖)"></a>運作 dc (畫圖)</h2><h3 id="點"><a href="#點" class="headerlink" title="點"></a>點</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_dc_hw_draw_point</code></p><!-- tab 性質 --><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>畫點</td><td>void</td></tr><tr><td><!-- endtab --></td><td></td></tr><tr><td><!-- tab 元素 --></td><td></td></tr><tr><td><code>*self</code></td><td><code>x</code></td></tr><tr><td>——-</td><td>:-:</td></tr><tr><td>dc 本體</td><td>座標 x</td></tr><tr><td><!-- endtab --></td><td></td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * draw a logic point on device */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_draw_point</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> y <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* draw this point */</span>    dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">set_pixel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>dc<span class="token operator">-></span>owner<span class="token operator">-></span>gc<span class="token punctuation">.</span>foreground<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先傳進去的座標一律為邏輯位置，也就是以此 dc 所屬物件（有可能是視窗、元件等）的 $(x_1,y_1)$ 為原點之座標；由於 $(x_1,y_1)$ 為該物件（通常為矩形）的左下角，所以傳入的座標不會有負號。</p><p>接著將邏輯座標轉為實際座標（也就是螢幕上的真正位置），所以把 $(x,y)$ 轉成 $(x+x_1,y+y_1)$；由於 dc 是跟隨物件的，所以新座標不可超過 $(x_2,y_2)$，也就是右上角。</p><p>最後利用驅動中設定好的 <code>set_pixel</code> 函數來上色，這裡使用預設顏色。</p><hr><h3 id="彩色點"><a href="#彩色點" class="headerlink" title="彩色點"></a>彩色點</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_dc_hw_draw_color_point</code></p><!-- tab 性質 --><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>畫彩色點</td><td>void</td></tr><tr><td><!-- endtab --></td><td></td></tr><tr><td><!-- tab 元素 --></td><td></td></tr><tr><td><code>*self</code></td><td><code>x</code></td></tr><tr><td>——-</td><td>:-:</td></tr><tr><td>dc 本體</td><td>座標 x</td></tr><tr><td><!-- endtab --></td><td></td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_draw_color_point</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> rtgui_color_t color<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> y <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* draw this point */</span>    dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">set_pixel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>color<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟上面最大的不同是可以選顏色 (131)。</p><hr><h3 id="水平線"><a href="#水平線" class="headerlink" title="水平線"></a>水平線</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * draw a logic vertical line on device */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_draw_vline</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    y1 <span class="token operator">=</span> y1 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    y2 <span class="token operator">=</span> y2 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">></span> y2<span class="token punctuation">)</span>        <span class="token function">_int_swap</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2 <span class="token operator">||</span> y2 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">)</span>        y1 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y2 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        y2 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* draw vline */</span>    dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">draw_vline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>dc<span class="token operator">-></span>owner<span class="token operator">-></span>gc<span class="token punctuation">.</span>foreground<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="鉛直線"><a href="#鉛直線" class="headerlink" title="鉛直線"></a>鉛直線</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * draw a logic horizontal line on device */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_draw_hline</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> y <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">>=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* convert logic to device */</span>    x1 <span class="token operator">=</span> x1 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    x2 <span class="token operator">=</span> x2 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> x2<span class="token punctuation">)</span>        <span class="token function">_int_swap</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2 <span class="token operator">||</span> x2 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        x1 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x2 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* draw hline */</span>    dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">draw_hline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>dc<span class="token operator">-></span>owner<span class="token operator">-></span>gc<span class="token punctuation">.</span>foreground<span class="token punctuation">)</span><span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_fill_rect</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_rect <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_color_t color<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t y1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get background color */</span>    color <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>gc<span class="token punctuation">.</span>background<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* convert logic to device */</span>    x1 <span class="token operator">=</span> rect<span class="token operator">-></span>x1 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        x1 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    x2 <span class="token operator">=</span> rect<span class="token operator">-></span>x2 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x2 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x2 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">;</span>    y1 <span class="token operator">=</span> rect<span class="token operator">-></span>y1 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y1 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">)</span>        y1 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    y2 <span class="token operator">=</span> rect<span class="token operator">-></span>y2 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y2 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y2 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        y2 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* fill rect */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> y1 <span class="token operator">&lt;</span> y2<span class="token punctuation">;</span> y1<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">draw_hline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>color<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="blit"><a href="#blit" class="headerlink" title="blit(?)"></a>blit(?)</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_blit_line</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>self<span class="token punctuation">,</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> rt_uint8_t <span class="token operator">*</span>line_data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>self <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    dc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc_hw <span class="token operator">*</span><span class="token punctuation">)</span> self<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* convert logic to device */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> y <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>y2<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    x1 <span class="token operator">=</span> x1 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    x2 <span class="token operator">=</span> x2 <span class="token operator">+</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> x2<span class="token punctuation">)</span>        <span class="token function">_int_swap</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2 <span class="token operator">||</span> x2 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">&lt;</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">)</span>        x1 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x2 <span class="token operator">></span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">)</span>        x2 <span class="token operator">=</span> dc<span class="token operator">-></span>owner<span class="token operator">-></span>extent<span class="token punctuation">.</span>x2<span class="token punctuation">;</span>    dc<span class="token operator">-></span>hw_driver<span class="token operator">-></span>ops<span class="token operator">-></span><span class="token function">draw_raw_hline</span><span class="token punctuation">(</span>line_data<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_dc_hw_blit</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">,</span>                             <span class="token keyword">struct</span> rtgui_point <span class="token operator">*</span>dc_point<span class="token punctuation">,</span>                             <span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dest<span class="token punctuation">,</span>                             rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* not blit in hardware dc */</span>    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;Rtgui 中的 dc（drawable canvas） 也就是繪圖引擎，可
      
    
    </summary>
    
    
      <category term="RT-Thread GUI" scheme="http://blog.lusw.dev/categories/RT-Thread-GUI/"/>
    
    
      <category term="kernel" scheme="http://blog.lusw.dev/tags/kernel/"/>
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/tags/RT-Thread/"/>
    
      <category term="GUI" scheme="http://blog.lusw.dev/tags/GUI/"/>
    
      <category term="dc" scheme="http://blog.lusw.dev/tags/dc/"/>
    
  </entry>
  
  <entry>
    <title>RT-Thread GUI Server</title>
    <link href="http://blog.lusw.dev/rtgui-server/"/>
    <id>http://blog.lusw.dev/rtgui-server/</id>
    <published>2019-02-23T07:08:11.000Z</published>
    <updated>2020-01-27T17:25:51.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="基本事件結構"><a href="#基本事件結構" class="headerlink" title="基本事件結構"></a>基本事件結構</h2><p>server 掌管整個 GUI system 的所有事件 (event)，而根據不同的事件定義不同的結構；在每個不同的結構中都有基本的欄位 <code>_RTGUI_EVENT_WIN_ELEMENTS</code>：</p><blockquote><p>File: event.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * RTGUI Window Event */</span><span class="token macro property">#<span class="token directive keyword">define</span> _RTGUI_EVENT_WIN_ELEMENTS \    struct rtgui_event parent; \    struct rtgui_win *wid;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>rtgui_event</code> 即為事件的基本結構：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> rtgui_event<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* the event type */</span>    <span class="token keyword">enum</span> _rtgui_event_type type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* user field of event */</span>    rt_uint16_t user<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the event sender */</span>    <span class="token keyword">struct</span> rtgui_app <span class="token operator">*</span>sender<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* mailbox to acknowledge request */</span>    rt_mailbox_t ack<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rtgui_event rtgui_event_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="基本結構設定"><a href="#基本結構設定" class="headerlink" title="基本結構設定"></a>基本結構設定</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> RTGUI_EVENT_INIT(e, t)  do      \{                                       \    (e)->type = (t);                    \    (e)->user = 0;                      \    (e)->sender = rtgui_app_self();     \    (e)->ack = RT_NULL;                 \} while (0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="啟動-server"><a href="#啟動-server" class="headerlink" title="啟動 server"></a>啟動 server</h2><blockquote><p>File: server.c</p></blockquote><p>首先，定義一個 app 名叫 server :</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> rtgui_app <span class="token operator">*</span>rtgui_server_app <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接著透過 <code>rtgui_server_entry</code> 啟動 app，也就是 server:<br><br><i class="fa fa-code"></i> Code: <code>rtgui_server_entry</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>啟動 server</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*parameter</code></th></tr></thead><tbody><tr><td align="center">未使用</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * rtgui server thread's entry */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rtgui_server_entry</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>parameter<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> _WIN32_NATIVE</span>    <span class="token comment" spellcheck="true">/* set the server thread to highest */</span>    HANDLE hCurrentThread <span class="token operator">=</span> <span class="token function">GetCurrentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SetThreadPriority</span><span class="token punctuation">(</span>hCurrentThread<span class="token punctuation">,</span> THREAD_PRIORITY_HIGHEST<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* create rtgui server application */</span>    rtgui_server_app <span class="token operator">=</span> <span class="token function">rtgui_app_create</span><span class="token punctuation">(</span><span class="token string">"rtgui"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rtgui_server_app <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"Create GUI server failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">rtgui_object_set_event_handler</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>rtgui_server_app<span class="token punctuation">)</span><span class="token punctuation">,</span>                                   rtgui_server_event_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init mouse and show */</span>    <span class="token function">rtgui_mouse_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RTGUI_USING_MOUSE_CURSOR</span>    <span class="token function">rtgui_mouse_show_cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token function">rtgui_app_run</span><span class="token punctuation">(</span>rtgui_server_app<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rtgui_app_destroy</span><span class="token punctuation">(</span>rtgui_server_app<span class="token punctuation">)</span><span class="token punctuation">;</span>    rtgui_server_app <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最後會進入 <code>rtgui_app_run</code> 並正式開始執行 server，也就是進入所屬的 event handler</p><hr><h2 id="Event-Handler"><a href="#Event-Handler" class="headerlink" title="Event Handler"></a>Event Handler</h2><p>Event handler 也就是 server 的進入點</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;基本事件結構&quot;&gt;&lt;a href=&quot;#基本事件結構&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="RT-Thread GUI" scheme="http://blog.lusw.dev/categories/RT-Thread-GUI/"/>
    
    
      <category term="kernel" scheme="http://blog.lusw.dev/tags/kernel/"/>
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/tags/RT-Thread/"/>
    
      <category term="GUI" scheme="http://blog.lusw.dev/tags/GUI/"/>
    
      <category term="server" scheme="http://blog.lusw.dev/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>RT-Thread GUI Window</title>
    <link href="http://blog.lusw.dev/rtgui-window/"/>
    <id>http://blog.lusw.dev/rtgui-window/</id>
    <published>2019-01-29T12:53:02.000Z</published>
    <updated>2020-01-26T16:54:30.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> rtgui_win<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* inherit from container */</span>    rtgui_container_t parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* update count */</span>    rt_base_t update<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* drawing count */</span>    rt_base_t drawing<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_rect drawing_rect<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parent window. RT_NULL if the window is a top level window */</span>    <span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>parent_window<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_region outer_clip<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_rect outer_extent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the widget that will grab the focus in current window */</span>    <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>focused_widget<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* which app I belong */</span>    <span class="token keyword">struct</span> rtgui_app <span class="token operator">*</span>app<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* window style */</span>    rt_uint16_t style<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* window state flag */</span>    <span class="token keyword">enum</span> rtgui_win_flag flag<span class="token punctuation">;</span>    rtgui_modal_code_t modal_code<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* last mouse event handled widget */</span>    rtgui_widget_t <span class="token operator">*</span>last_mevent_widget<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* window title */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_wintitle <span class="token operator">*</span>_title_wgt<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* call back */</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_activate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_deactivate<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_close<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the key is sent to the focused widget by default. If the focused widget     * and all of it's parents didn't handle the key event, it will be handled     * by @func on_key     *     * If you want to handle key event on your own, it's better to overload     * this function other than handle EVENT_KBD in event_handler.     */</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_key<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reserved user data */</span>    <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Private data. */</span>    <span class="token function">rt_base_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>_do_show<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* app ref_count */</span>    rt_uint16_t app_ref_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* win magic flag, magic value is 0xA5A55A5A */</span>    rt_uint32_t    magic<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="定義物件類型"><a href="#定義物件類型" class="headerlink" title="定義物件類型"></a>定義物件類型</h3><blockquote><p>File: window.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token function">DEFINE_CLASS_TYPE</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> <span class="token string">"win"</span><span class="token punctuation">,</span>                  <span class="token function">RTGUI_PARENT_TYPE</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">,</span>                  _rtgui_win_constructor<span class="token punctuation">,</span>                  _rtgui_win_destructor<span class="token punctuation">,</span>                  <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="建立視窗"><a href="#建立視窗" class="headerlink" title="建立視窗"></a>建立視窗</h2><p>&lt;i class”fa fa-code”&gt; Code: <code>rtgui_win_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立視窗</td><td>視窗指標</td></tr></tbody></table><table><thead><tr><th><code>*parent_window</code></th><th><code>*title</code></th><th><code>*rect</code></th><th><code>style</code></th></tr></thead><tbody><tr><td>上層視窗</td><td>視窗標題</td><td>視窗的大小</td><td>一些風格</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_win_t <span class="token operator">*</span><span class="token function">rtgui_win_create</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>parent_window<span class="token punctuation">,</span>                              <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">,</span>                              rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">,</span>                              rt_uint16_t style<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate win memory */</span>    win <span class="token operator">=</span> <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span><span class="token function">rtgui_widget_create</span><span class="token punctuation">(</span>RTGUI_WIN_TYPE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_win_init</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> parent_window<span class="token punctuation">,</span> title<span class="token punctuation">,</span> rect<span class="token punctuation">,</span> style<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_widget_destroy</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> win<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>透過 <code>rtgui_win_init</code> 完成設定</p><hr><p><i class="fa fa-code"></i> Code: <code>rtgui_win_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化視窗</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>*parent_window</code></th><th><code>*title</code></th><th><code>*rect</code></th><th><code>style</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>上層視窗</td><td>視窗標題</td><td>視窗的大小</td><td>一些風格</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">rtgui_win_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>parent_window<span class="token punctuation">,</span>                   <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">,</span>                   rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">,</span>                   rt_uint16_t style<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent window */</span>    win<span class="token operator">-></span>parent_window <span class="token operator">=</span> parent_window<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set title, rect and style */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        win<span class="token operator">-></span>title <span class="token operator">=</span> <span class="token function">rt_strdup</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        win<span class="token operator">-></span>title <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token function">rtgui_widget_set_rect</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token operator">-></span>style <span class="token operator">=</span> style<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_NO_TITLE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_NO_BORDER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rtgui_rect trect <span class="token operator">=</span> <span class="token operator">*</span>rect<span class="token punctuation">;</span>        win<span class="token operator">-></span>_title_wgt <span class="token operator">=</span> <span class="token function">rtgui_wintitle_create</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>            <span class="token keyword">goto</span> __on_err<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_NO_BORDER<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rtgui_rect_inflate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>trect<span class="token punctuation">,</span> WINTITLE_BORDER_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_NO_TITLE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            trect<span class="token punctuation">.</span>y1 <span class="token operator">-</span><span class="token operator">=</span> WINTITLE_HEIGHT<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">rtgui_widget_set_rect</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>trect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Update the clip of the wintitle manually. */</span>        <span class="token function">rtgui_region_subtract_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span>                                   <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span>                                   <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* The window title is always un-hidden for simplicity. */</span>        <span class="token function">rtgui_widget_show</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_region_init_with_extents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_clip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>trect<span class="token punctuation">)</span><span class="token punctuation">;</span>        win<span class="token operator">-></span>outer_extent <span class="token operator">=</span> trect<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_region_init_with_extents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_clip<span class="token punctuation">,</span> rect<span class="token punctuation">)</span><span class="token punctuation">;</span>        win<span class="token operator">-></span>outer_extent <span class="token operator">=</span> <span class="token operator">*</span>rect<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_rtgui_win_create_in_server</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">goto</span> __on_err<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    win<span class="token operator">-></span>app<span class="token operator">-></span>window_cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>__on_err<span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建立主視窗"><a href="#建立主視窗" class="headerlink" title="建立主視窗"></a>建立主視窗</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_mainwin_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立主視窗</td><td>視窗指標</td></tr></tbody></table><table><thead><tr><th><code>*parent_window</code></th><th><code>*title</code></th><th><code>style</code></th></tr></thead><tbody><tr><td>上層視窗</td><td>視窗標題</td><td>一些風格</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_win_t <span class="token operator">*</span><span class="token function">rtgui_mainwin_create</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>parent_window<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>title<span class="token punctuation">,</span> rt_uint16_t style<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_rect rect<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get rect of main window */</span>    <span class="token function">rtgui_get_mainwin_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">rtgui_win_create</span><span class="token punctuation">(</span>parent_window<span class="token punctuation">,</span> title<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">,</span> style<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_mainwin_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立一個固定大小的視窗，這個大小被設定在 <code>_mainwin_rect</code> 這個全域變數裡面，可以透過 <code>rtgui_get_mainwin_rect</code> 來取得這個值。</p><hr><h2 id="刪除視窗"><a href="#刪除視窗" class="headerlink" title="刪除視窗"></a>刪除視窗</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_win_destroy</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除視窗</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>目標視窗</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_destroy</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* close the window first if it's not. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CLOSED<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rtgui_event_win_close eclose<span class="token punctuation">;</span>        <span class="token function">RTGUI_EVENT_WIN_CLOSE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eclose<span class="token punctuation">)</span><span class="token punctuation">;</span>        eclose<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_DESTROY_ON_CLOSE<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">_rtgui_win_deal_close</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span>                                  <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>eclose<span class="token punctuation">,</span>                                  RT_TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            <span class="token function">_rtgui_win_deal_close</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span>                                  <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>eclose<span class="token punctuation">,</span>                                  RT_TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* set the RTGUI_WIN_STYLE_DESTROY_ON_CLOSE flag so the window will be         * destroyed after the event_loop */</span>        win<span class="token operator">-></span>style <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_STYLE_DESTROY_ON_CLOSE<span class="token punctuation">;</span>        <span class="token function">rtgui_win_end_modal</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> RTGUI_MODAL_CANCEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_widget_destroy</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_destroy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="關閉視窗"><a href="#關閉視窗" class="headerlink" title="關閉視窗"></a>關閉視窗</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_win_close</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>關閉視窗</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>目標視窗</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* send a close event to myself to get a consistent behavior */</span>rt_bool_t <span class="token function">rtgui_win_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_event_win_close eclose<span class="token punctuation">;</span>    <span class="token function">RTGUI_EVENT_WIN_CLOSE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eclose<span class="token punctuation">)</span><span class="token punctuation">;</span>    eclose<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">_rtgui_win_deal_close</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span>                                 <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>eclose<span class="token punctuation">,</span>                                 RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_close<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>_rtgui_win_deal_close</code> 完成關閉動作</p><hr><p><i class="fa fa-code"></i> Code: <code>_rtgui_win_deal_close</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除視窗</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>*event</code></th><th><code>force_close</code></th></tr></thead><tbody><tr><td>目標視窗</td><td>關閉事件</td><td>是否要強致關閉</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> rt_bool_t <span class="token function">_rtgui_win_deal_close</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">,</span>                                       <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">,</span>                                       rt_bool_t force_close<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>on_close <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>win<span class="token operator">-></span><span class="token function">on_close</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>force_close<span class="token punctuation">)</span>            <span class="token keyword">return</span> RT_FALSE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">rtgui_win_hide</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_FLAG_CLOSED<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* rtgui_win_end_modal cleared the RTGUI_WIN_FLAG_MODAL in win->flag so         * we have to record it. */</span>        <span class="token function">rtgui_win_end_modal</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> RTGUI_MODAL_CANCEL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    win<span class="token operator">-></span>app<span class="token operator">-></span>window_cnt<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>app<span class="token operator">-></span>window_cnt <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>win<span class="token operator">-></span>app<span class="token operator">-></span>state_flag <span class="token operator">&amp;</span> RTGUI_APP_FLAG_KEEP<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_app_exit</span><span class="token punctuation">(</span><span class="token function">rtgui_app_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>style <span class="token operator">&amp;</span> RTGUI_WIN_STYLE_DESTROY_ON_CLOSE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_win_destroy</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="設定視窗"><a href="#設定視窗" class="headerlink" title="設定視窗"></a>設定視窗</h2><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_set_rect</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定視窗大小</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>*rect</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>新大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_set_rect</span><span class="token punctuation">(</span>rtgui_win_t <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_event_win_resize event<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL <span class="token operator">||</span> rect <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent <span class="token operator">=</span> <span class="token operator">*</span>rect<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CONNECTED<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* set window resize event to server */</span>        <span class="token function">RTGUI_EVENT_WIN_RESIZE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        event<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>        event<span class="token punctuation">.</span>rect <span class="token operator">=</span> <span class="token operator">*</span>rect<span class="token punctuation">;</span>        <span class="token function">rtgui_server_post_event</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_win_resize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_set_rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="OnActive-函式"><a href="#OnActive-函式" class="headerlink" title="OnActive 函式"></a>OnActive 函式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_set_onactivate</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 OnActive 函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>OnActive 函式</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_set_onactivate</span><span class="token punctuation">(</span>rtgui_win_t <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        win<span class="token operator">-></span>on_activate <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_set_onactivate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="OnDeactive-函式"><a href="#OnDeactive-函式" class="headerlink" title="OnDeactive 函式"></a>OnDeactive 函式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_set_ondeactivate</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 OnDeactive 函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>OnDeactive 函式</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_set_ondeactivate</span><span class="token punctuation">(</span>rtgui_win_t <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        win<span class="token operator">-></span>on_deactivate <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_set_ondeactivate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="OnClose-函式"><a href="#OnClose-函式" class="headerlink" title="OnClose 函式"></a>OnClose 函式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_set_onclose</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 OnClose 函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>OnClose 函式</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_set_onclose</span><span class="token punctuation">(</span>rtgui_win_t <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        win<span class="token operator">-></span>on_close <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_set_onclose<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="OnKey"><a href="#OnKey" class="headerlink" title="OnKey"></a>OnKey</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_set_onkey</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 OnKey 函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>OnKey 函式</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_set_onkey</span><span class="token punctuation">(</span>rtgui_win_t <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        win<span class="token operator">-></span>on_key <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_set_onkey<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="視窗的行為"><a href="#視窗的行為" class="headerlink" title="視窗的行為"></a>視窗的行為</h2><h3 id="動態模式"><a href="#動態模式" class="headerlink" title="動態模式"></a>動態模式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_enter_modal</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>進入動態模式</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_base_t <span class="token function">rtgui_win_enter_modal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_base_t exit_code <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_event_win_modal_enter emodal<span class="token punctuation">;</span>    <span class="token function">RTGUI_EVENT_WIN_MODAL_ENTER_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>emodal<span class="token punctuation">)</span><span class="token punctuation">;</span>    emodal<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_server_post_event_sync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>emodal<span class="token punctuation">,</span>                                     <span class="token keyword">sizeof</span><span class="token punctuation">(</span>emodal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span>    win<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">;</span>    win<span class="token operator">-></span>app_ref_count <span class="token operator">=</span> win<span class="token operator">-></span>app<span class="token operator">-></span>ref_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    exit_code <span class="token operator">=</span> <span class="token function">rtgui_app_run</span><span class="token punctuation">(</span>win<span class="token operator">-></span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_MODAL<span class="token punctuation">;</span>    <span class="token function">rtgui_win_hide</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_enter_modal<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><i class="fa fa-code"></i> Code: <code>rtgui_win_end_modal</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>離開動態模式</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>modal_code</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>動態模式編號</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_end_modal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">,</span> rtgui_modal_code_t modal_code<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>app_ref_count <span class="token operator">&lt;</span> win<span class="token operator">-></span>app<span class="token operator">-></span>ref_count<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_app_exit</span><span class="token punctuation">(</span>win<span class="token operator">-></span>app<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">" =*=> rtgui_win_end_modal while (win->app_ref_count &lt; win->app->ref_count) \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">rtgui_app_exit</span><span class="token punctuation">(</span>win<span class="token operator">-></span>app<span class="token punctuation">,</span> modal_code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* remove modal mode */</span>    win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_MODAL<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_end_modal<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="現身"><a href="#現身" class="headerlink" title="現身"></a>現身</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_show</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>現身該視窗</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th><code>is_modal</code></th></tr></thead><tbody><tr><td>視窗本體</td><td>是否為動態模式</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_base_t <span class="token function">rtgui_win_show</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">,</span> rt_bool_t is_modal<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RTGUI_WIDGET_UNHIDE</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    win<span class="token operator">-></span>magic <span class="token operator">=</span> RTGUI_WIN_MAGIC<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_modal<span class="token punctuation">)</span>        win<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_do_show<span class="token punctuation">)</span>        <span class="token keyword">return</span> win<span class="token operator">-></span><span class="token function">_do_show</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">rtgui_win_do_show</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_show<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果視窗本身有設定 <code>_do_show</code> 函式的話，則呼叫本身的；否則呼叫 <code>rtgui_win_do_show</code></p><hr><p><i class="fa fa-code"></i> Code: <code>rtgui_win_do_show</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>視窗現身</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_base_t <span class="token function">rtgui_win_do_show</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_base_t exit_code <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_app <span class="token operator">*</span>app<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_event_win_show eshow<span class="token punctuation">;</span>    <span class="token function">RTGUI_EVENT_WIN_SHOW_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eshow<span class="token punctuation">)</span><span class="token punctuation">;</span>    eshow<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span>    win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_CLOSED<span class="token punctuation">;</span>    win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_CB_PRESSED<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* if it does not register into server, create it in server */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CONNECTED<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_rtgui_win_create_in_server</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span>            <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* set window unhidden before notify the server */</span>    <span class="token function">rtgui_widget_show</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_server_post_event_sync</span><span class="token punctuation">(</span><span class="token function">RTGUI_EVENT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eshow<span class="token punctuation">)</span><span class="token punctuation">,</span>                                     <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_win_show<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* It could not be shown if a parent window is hidden. */</span>        <span class="token function">rtgui_widget_hide</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>focused_widget <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token function">rtgui_widget_focus</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app <span class="token operator">=</span> win<span class="token operator">-></span>app<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>app <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set main window */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>app<span class="token operator">-></span>main_object <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token function">rtgui_app_set_main_win</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_MODAL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        exit_code <span class="token operator">=</span> <span class="token function">rtgui_win_enter_modal</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> exit_code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_do_show<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="隱藏"><a href="#隱藏" class="headerlink" title="隱藏"></a>隱藏</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_hide</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>隱藏視窗</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_hide</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>win <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CONNECTED<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* send hidden message to server */</span>        <span class="token keyword">struct</span> rtgui_event_win_hide ehide<span class="token punctuation">;</span>        <span class="token function">RTGUI_EVENT_WIN_HIDE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ehide<span class="token punctuation">)</span><span class="token punctuation">;</span>        ehide<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_server_post_event_sync</span><span class="token punctuation">(</span><span class="token function">RTGUI_EVENT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ehide<span class="token punctuation">)</span><span class="token punctuation">,</span>                                         <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_win_hide<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"hide win: %s failed\n"</span><span class="token punctuation">,</span> win<span class="token operator">-></span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">rtgui_widget_hide</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_ACTIVATE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_hide<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="啟動"><a href="#啟動" class="headerlink" title="啟動"></a>啟動</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_activate</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>啟動視窗</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_err_t <span class="token function">rtgui_win_activate</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_event_win_activate eact<span class="token punctuation">;</span>    <span class="token function">RTGUI_EVENT_WIN_ACTIVATE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eact<span class="token punctuation">)</span><span class="token punctuation">;</span>    eact<span class="token punctuation">.</span>wid <span class="token operator">=</span> win<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">rtgui_server_post_event_sync</span><span class="token punctuation">(</span><span class="token function">RTGUI_EVENT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eact<span class="token punctuation">)</span><span class="token punctuation">,</span>                                        <span class="token keyword">sizeof</span><span class="token punctuation">(</span>eact<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_activate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="移動"><a href="#移動" class="headerlink" title="移動"></a>移動</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_move</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>進入動態模式</td><td>檢查碼</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th><th align="center"><code>x</code></th><th align="center"><code>y</code></th></tr></thead><tbody><tr><td>視窗本體</td><td align="center">目標 x</td><td align="center">目標 y</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_move</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>wgt<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_event_win_move emove<span class="token punctuation">;</span>    <span class="token keyword">int</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">;</span>    <span class="token function">RTGUI_EVENT_WIN_MOVE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>emove<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        wgt <span class="token operator">=</span> <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">;</span>        dx <span class="token operator">=</span> x <span class="token operator">-</span> wgt<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        dy <span class="token operator">=</span> y <span class="token operator">-</span> wgt<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>        <span class="token function">rtgui_widget_move_to_logic</span><span class="token punctuation">(</span>wgt<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        wgt <span class="token operator">=</span> <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_widget_move_to_logic</span><span class="token punctuation">(</span>wgt<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        wgt <span class="token operator">=</span> <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        dx <span class="token operator">=</span> x <span class="token operator">-</span> wgt<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        dy <span class="token operator">=</span> y <span class="token operator">-</span> wgt<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>        <span class="token function">rtgui_widget_move_to_logic</span><span class="token punctuation">(</span>wgt<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">rtgui_rect_move</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_extent<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CONNECTED<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_widget_hide</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        emove<span class="token punctuation">.</span>wid   <span class="token operator">=</span> win<span class="token punctuation">;</span>        emove<span class="token punctuation">.</span>x     <span class="token operator">=</span> x<span class="token punctuation">;</span>        emove<span class="token punctuation">.</span>y     <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_server_post_event_sync</span><span class="token punctuation">(</span><span class="token function">RTGUI_EVENT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>emove<span class="token punctuation">)</span><span class="token punctuation">,</span>                                         <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_win_move<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">rtgui_widget_show</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_move<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="OnDraw"><a href="#OnDraw" class="headerlink" title="OnDraw"></a>OnDraw</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_ondraw</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>OnDraw</td><td>boolean</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> rt_bool_t <span class="token function">rtgui_win_ondraw</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_rect rect<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_event_paint event<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* begin drawing */</span>    dc <span class="token operator">=</span> <span class="token function">rtgui_dc_begin_drawing</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dc <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_FALSE<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get window rect */</span>    <span class="token function">rtgui_widget_get_rect</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* fill area */</span>    <span class="token function">rtgui_dc_fill_rect</span><span class="token punctuation">(</span>dc<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* widget drawing */</span>    <span class="token comment" spellcheck="true">/* paint each widget */</span>    <span class="token function">RTGUI_EVENT_PAINT_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span>wid <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token function">rtgui_container_dispatch_event</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span>                                   <span class="token punctuation">(</span>rtgui_event_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rtgui_dc_end_drawing</span><span class="token punctuation">(</span>dc<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_FALSE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="更新重疊區域"><a href="#更新重疊區域" class="headerlink" title="更新重疊區域"></a>更新重疊區域</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_win_update_clip</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>更新重疊區域</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*win</code></th></tr></thead><tbody><tr><td>視窗本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_win_update_clip</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_container <span class="token operator">*</span>cnt<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_list_node <span class="token operator">*</span>node<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_CLOSED<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* Reset the inner clip of title. */</span>        <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>extent <span class="token operator">=</span> win<span class="token operator">-></span>outer_extent<span class="token punctuation">;</span>        <span class="token function">rtgui_region_copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_clip<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_region_subtract_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">,</span>                                   <span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">,</span>                                   <span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Reset the inner clip of window. */</span>        <span class="token function">rtgui_region_intersect_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">,</span>                                    <span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_clip<span class="token punctuation">,</span>                                    <span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent <span class="token operator">=</span> win<span class="token operator">-></span>outer_extent<span class="token punctuation">;</span>        <span class="token function">rtgui_region_copy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>clip<span class="token punctuation">,</span> <span class="token operator">&amp;</span>win<span class="token operator">-></span>outer_clip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* update the clip info of each child */</span>    cnt <span class="token operator">=</span> <span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rtgui_list_foreach</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>cnt<span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rtgui_widget_t <span class="token operator">*</span>child <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_widget_update_clip</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_update_clip<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="Event-Handler"><a href="#Event-Handler" class="headerlink" title="Event Handler"></a>Event Handler</h2><p>此 event handler 也就是 window 的函式進入點</p><p><i class="fa fa-code"></i> Code: <code>rtgui_win_event_handler</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>window 函式進入點</td><td>boolean</td></tr></tbody></table><table><thead><tr><th><code>*object</code></th><th><code>*event</code></th></tr></thead><tbody><tr><td>物件本體</td><td>行為本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_bool_t <span class="token function">rtgui_win_event_handler</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>object<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>win<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>object <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>event <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    win <span class="token operator">=</span> <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token operator">-></span>type<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_SHOW<span class="token punctuation">:</span>        <span class="token function">rtgui_win_do_show</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_HIDE<span class="token punctuation">:</span>        <span class="token function">rtgui_win_hide</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_CLOSE<span class="token punctuation">:</span>        <span class="token function">_rtgui_win_deal_close</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> event<span class="token punctuation">,</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* don't broadcast WIN_CLOSE event to others */</span>        <span class="token keyword">return</span> RT_TRUE<span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_MOVE<span class="token punctuation">:</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rtgui_event_win_move <span class="token operator">*</span>emove <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_win_move <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* move window */</span>        <span class="token function">rtgui_win_move</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> emove<span class="token operator">-></span>x<span class="token punctuation">,</span> emove<span class="token operator">-></span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_ACTIVATE<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_UNDER_MODAL <span class="token operator">||</span>                <span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* activate a hide window */</span>            <span class="token keyword">return</span> RT_TRUE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        win<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_FLAG_ACTIVATE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* There are many cases where the paint event will follow this activate         * event and just repaint the title is not a big deal. So just repaint         * the title if there is one. If you want to update the content of the         * window, do it in the on_activate callback.*/</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>            <span class="token function">rtgui_widget_update</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>on_activate <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            win<span class="token operator">-></span><span class="token function">on_activate</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_DEACTIVATE<span class="token punctuation">:</span>        win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_ACTIVATE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* No paint event follow the deactive event. So we have to update         * the title manually to reflect the change. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>            <span class="token function">rtgui_widget_update</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>on_deactivate <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>            win<span class="token operator">-></span><span class="token function">on_deactivate</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_WIN_UPDATE_END<span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_CLIP_INFO<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">/* update win clip */</span>        <span class="token function">rtgui_win_update_clip</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_PAINT<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>            <span class="token function">rtgui_widget_update</span><span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_win_ondraw</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> GUIENGIN_USING_VFRAMEBUFFER</span>    <span class="token keyword">case</span> RTGUI_EVENT_VPAINT_REQ<span class="token punctuation">:</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rtgui_event_vpaint_req <span class="token operator">*</span>req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_vpaint_req <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">;</span>        <span class="token keyword">struct</span> rtgui_dc <span class="token operator">*</span>dc<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* get drawing dc */</span>        dc <span class="token operator">=</span> <span class="token function">rtgui_win_get_drawing</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">;</span>        req<span class="token operator">-></span>sender<span class="token operator">-></span>buffer <span class="token operator">=</span> dc<span class="token punctuation">;</span>        <span class="token function">rt_completion_done</span><span class="token punctuation">(</span>req<span class="token operator">-></span>sender<span class="token operator">-></span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">case</span> RTGUI_EVENT_MOUSE_BUTTON<span class="token punctuation">:</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rtgui_event_mouse <span class="token operator">*</span>emouse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_mouse<span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_rect_contains_point</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token operator">-></span>extent<span class="token punctuation">,</span>                                      emouse<span class="token operator">-></span>x<span class="token punctuation">,</span> emouse<span class="token operator">-></span>y<span class="token punctuation">)</span> <span class="token operator">==</span> RT_EOK<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">_win_handle_mouse_btn</span><span class="token punctuation">(</span>win<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>tobj <span class="token operator">=</span> <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>win<span class="token operator">-></span>_title_wgt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> tobj<span class="token operator">-></span><span class="token function">event_handler</span><span class="token punctuation">(</span>tobj<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_MOUSE_MOTION<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">rtgui_container_dispatch_mouse_event</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_event_mouse <span class="token operator">*</span><span class="token punctuation">)</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_KBD<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">/* we should dispatch key event firstly */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>win<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIN_FLAG_HANDLE_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>widget<span class="token punctuation">;</span>            rt_bool_t res <span class="token operator">=</span> RT_FALSE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* we should dispatch the key event just once. Once entered the             * dispatch mode, we should swtich to key handling mode. */</span>            win<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIN_FLAG_HANDLE_KEY<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* dispatch the key event */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>widget <span class="token operator">=</span> win<span class="token operator">-></span>focused_widget<span class="token punctuation">;</span>                    widget <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">;</span>                    widget <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>event_handler <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>                    res <span class="token operator">=</span> <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">event_handler</span><span class="token punctuation">(</span>                              <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            win<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIN_FLAG_HANDLE_KEY<span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* in key handling mode(it may reach here in             * win->focused_widget->event_handler call) */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token operator">-></span>on_key <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>                <span class="token keyword">return</span> win<span class="token operator">-></span><span class="token function">on_key</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_EVENT_COMMAND<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rtgui_container_dispatch_event</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_TRUE<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> RT_TRUE<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token function">rtgui_container_event_handler</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_FALSE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_win_event_handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;結構&quot;&gt;&lt;a href=&quot;#結構&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="RT-Thread GUI" scheme="http://blog.lusw.dev/categories/RT-Thread-GUI/"/>
    
    
      <category term="kernel" scheme="http://blog.lusw.dev/tags/kernel/"/>
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/tags/RT-Thread/"/>
    
      <category term="GUI" scheme="http://blog.lusw.dev/tags/GUI/"/>
    
      <category term="window" scheme="http://blog.lusw.dev/tags/window/"/>
    
  </entry>
  
  <entry>
    <title>RT-Thread GUI Widget</title>
    <link href="http://blog.lusw.dev/rtgui-widget/"/>
    <id>http://blog.lusw.dev/rtgui-widget/</id>
    <published>2019-01-01T10:42:37.000Z</published>
    <updated>2020-01-26T16:54:30.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>上一篇我們說明了 RTGUI 是如何透過 C 實現物件導向的設計邏輯，這篇將會說明在 RTGUI 中的最小物件 “widget” 是如何創建、運行及刪除的。</p><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><blockquote><p>File: widget.h</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * the base widget object */</span><span class="token keyword">struct</span> rtgui_widget<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* inherit from rtgui_object */</span>    <span class="token keyword">struct</span> rtgui_object object<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the widget that contains this widget */</span>    <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the window that contains this widget */</span>    <span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span>toplevel<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the widget children and sibling */</span>    rtgui_list_t sibling<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* widget flag */</span>    rt_int32_t flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* hardware device context */</span>    rt_uint32_t dc_type<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> rtgui_dc_engine <span class="token operator">*</span>dc_engine<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the graphic context of widget */</span>    rtgui_gc_t gc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the widget extent */</span>    rtgui_rect_t extent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the visiable extent (includes the rectangles of children) */</span>    rtgui_rect_t extent_visiable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the rect clip information */</span>    rtgui_region_t clip<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* minimal width and height of widget */</span>    rt_int16_t min_width<span class="token punctuation">,</span> min_height<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* widget align */</span>    rt_int32_t align<span class="token punctuation">;</span>    rt_uint16_t border<span class="token punctuation">;</span>    rt_uint16_t border_style<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* call back */</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_focus_in<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_bool_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>on_focus_out<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_object <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">struct</span> rtgui_event <span class="token operator">*</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* user private data */</span>    rt_uint32_t user_data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rtgui_widget rtgui_widget_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>記錄包含他的 widget、所在的 window、一些屬性等</p><h3 id="四方形結構體"><a href="#四方形結構體" class="headerlink" title="四方形結構體"></a>四方形結構體</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Rectangle structure */</span><span class="token keyword">struct</span> rtgui_rect<span class="token punctuation">{</span>    rt_int16_t x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rtgui_rect rtgui_rect_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>對角線 (x1,y1)、(x2,y2)</p><hr><h3 id="定義物件類型"><a href="#定義物件類型" class="headerlink" title="定義物件類型"></a>定義物件類型</h3><blockquote><p>File: widget.c</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token function">DEFINE_CLASS_TYPE</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> <span class="token string">"widget"</span><span class="token punctuation">,</span>                  <span class="token function">RTGUI_PARENT_TYPE</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">,</span>                  _rtgui_widget_constructor<span class="token punctuation">,</span>                  _rtgui_widget_destructor<span class="token punctuation">,</span>                  <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_widget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>_rtgui_widget<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="建立-widget"><a href="#建立-widget" class="headerlink" title="建立 widget"></a>建立 widget</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 widget</td><td>widget 指標</td></tr></tbody></table><table><thead><tr><th><code>*widget_type</code></th></tr></thead><tbody><tr><td>欲建立的 widget 種類</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_widget_t <span class="token operator">*</span><span class="token function">rtgui_widget_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> rtgui_type_t <span class="token operator">*</span>widget_type<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>widget<span class="token punctuation">;</span>    widget <span class="token operator">=</span> <span class="token function">RTGUI_WIDGET</span><span class="token punctuation">(</span><span class="token function">rtgui_object_create</span><span class="token punctuation">(</span>widget_type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> widget<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>呼叫 <code>rtgui_object_create</code>，型態為 widget 完成，並透過 <code>RTGUI_WIDGET</code> 檢查正確性</p><hr><h2 id="刪除-widget"><a href="#刪除-widget" class="headerlink" title="刪除 widget"></a>刪除 widget</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_destroy</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 widget</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th></tr></thead><tbody><tr><td>欲刪除的 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_destroy</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">rtgui_object_destroy</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_destroy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一樣透過 <code>rtgui_object_destroy</code> 來完成</p><hr><h2 id="設定-widget"><a href="#設定-widget" class="headerlink" title="設定 widget"></a>設定 widget</h2><p>RTT GUI 提供一些 API 給使用者去設定 widget 的樣式與行為</p><h3 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_rectangle</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的大小</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>x</code></th><th><code>y</code></th><th><code>width</code></th><th><code>height</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>起始座標 x</td><td>y</td><td>寬度</td><td>高度</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_rectangle</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_rect_t rect<span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>x1 <span class="token operator">=</span> x<span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>y1 <span class="token operator">=</span> y<span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>x2 <span class="token operator">=</span> x <span class="token operator">+</span> width<span class="token punctuation">;</span>    rect<span class="token punctuation">.</span>y2 <span class="token operator">=</span> y <span class="token operator">+</span> height<span class="token punctuation">;</span>    <span class="token function">rtgui_widget_set_rect</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_rectangle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>填入正確的 (x1,y1)、(x2,y2)</p><hr><h3 id="Parent"><a href="#Parent" class="headerlink" title="Parent"></a>Parent</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_parent</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的上層元素</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>parent</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>上層元素 (widget)</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_parent</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_widget_t <span class="token operator">*</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* set parent and toplevel widget */</span>    widget<span class="token operator">-></span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="大小下界"><a href="#大小下界" class="headerlink" title="大小下界"></a>大小下界</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_minsize</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的大小下界</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>width</code></th><th><code>height</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>寬度</td><td>高度</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_minsize</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>min_width <span class="token operator">=</span> width<span class="token punctuation">;</span>    widget<span class="token operator">-></span>min_height <span class="token operator">=</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_minsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="寬度下界"><a href="#寬度下界" class="headerlink" title="寬度下界"></a>寬度下界</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_minwidth</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的寬度下界</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>width</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>寬度</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_minwidth</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>min_width <span class="token operator">=</span> width<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_minwidth<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="高度下界"><a href="#高度下界" class="headerlink" title="高度下界"></a>高度下界</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_minheight</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的高度下界</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>height</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>高度</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_minheight</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>min_height <span class="token operator">=</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_minheight<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="邊框風格"><a href="#邊框風格" class="headerlink" title="邊框風格"></a>邊框風格</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_border</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的邊框風格</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>style</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>風格</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * set widget draw style */</span><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_border</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rt_uint32_t style<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>border_style <span class="token operator">=</span> style<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>style<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> RTGUI_BORDER_NONE<span class="token punctuation">:</span>        widget<span class="token operator">-></span>border <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_BORDER_SIMPLE<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_UP<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_DOWN<span class="token punctuation">:</span>        widget<span class="token operator">-></span>border <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> RTGUI_BORDER_STATIC<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_RAISE<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_SUNKEN<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_BOX<span class="token punctuation">:</span>    <span class="token keyword">case</span> RTGUI_BORDER_EXTRA<span class="token punctuation">:</span>        widget<span class="token operator">-></span>border <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        widget<span class="token operator">-></span>border <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_border<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Focus-函式"><a href="#Focus-函式" class="headerlink" title="Focus 函式"></a>Focus 函式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_onfocus</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的 focus func</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>focus func</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_onfocus</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>on_focus_in <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_onfocus<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Unfocus-函式"><a href="#Unfocus-函式" class="headerlink" title="Unfocus 函式"></a>Unfocus 函式</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_set_onunfocus</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>設定 widget 的 unfocus func</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*widget</code></th><th><code>handler</code></th></tr></thead><tbody><tr><td>欲設定的 widget</td><td>focus func</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_set_onunfocus</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_event_handler_ptr handler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>on_focus_out <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_set_onunfocus<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>這裡是用<strong>指標函數</strong>的方式將行為函式填入結構中，要使用時可直接呼叫結構中的元素使用。</p></blockquote><hr><h2 id="Widget-的行為"><a href="#Widget-的行為" class="headerlink" title="Widget 的行為"></a>Widget 的行為</h2><p>上一節整理了設定 widget 的風格，接下來整理 widget 的行為</p><h3 id="移動到相對位置"><a href="#移動到相對位置" class="headerlink" title="移動到相對位置"></a>移動到相對位置</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_move_to_logic</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>移動 widget 到相對位置</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th><th align="center"><code>dx</code></th><th align="center"><code>dy</code></th></tr></thead><tbody><tr><td align="center">欲移動的 widget</td><td align="center">位移量 x</td><td align="center">y</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * This function moves widget and its children to a logic point */</span><span class="token keyword">void</span> <span class="token function">rtgui_widget_move_to_logic</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_rect_t rect<span class="token punctuation">;</span>    rtgui_widget_t <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* give clip of this widget back to parent */</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* get the parent rect, even if it's a transparent parent. */</span>        rect <span class="token operator">=</span> parent<span class="token operator">-></span>extent_visiable<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* we should find out the none-transparent parent */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> parent<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span> parent <span class="token operator">=</span> parent<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* reset clip info */</span>        <span class="token function">rtgui_region_init_with_extents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rtgui_region_intersect_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* give back the extent */</span>        <span class="token function">rtgui_region_union</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* move this widget (and its children if it's a container) to destination point */</span>    <span class="token function">_widget_move</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* update this widget */</span>    <span class="token function">rtgui_widget_update_clip</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_move_to_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="移動-widget"><a href="#移動-widget" class="headerlink" title="移動 widget"></a>移動 widget</h4><p><i class="fa fa-code"></i> Code: <code>_widget_move</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>移動 widget</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th><th align="center"><code>dx</code></th><th align="center"><code>dy</code></th></tr></thead><tbody><tr><td align="center">欲移動的 widget</td><td align="center">位移量 x</td><td align="center">y</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_widget_move</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_widget<span class="token operator">*</span> widget<span class="token punctuation">,</span> <span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_list_node <span class="token operator">*</span>node<span class="token punctuation">;</span>    rtgui_widget_t <span class="token operator">*</span>child<span class="token punctuation">,</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token function">rtgui_rect_move</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* handle visiable extent */</span>    widget<span class="token operator">-></span>extent_visiable <span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">;</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* we should find out the none-transparent parent */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> parent<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span> parent <span class="token operator">=</span> parent<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>parent<span class="token punctuation">)</span>        <span class="token function">rtgui_rect_intersect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>parent<span class="token operator">-></span>extent_visiable<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent_visiable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reset clip info */</span>    <span class="token function">rtgui_region_init_with_extents</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* move each child */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_IS_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_list_foreach</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            child <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">_widget_move</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Focus-widget"><a href="#Focus-widget" class="headerlink" title="Focus widget"></a>Focus widget</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_focus</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>focus widget</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th></tr></thead><tbody><tr><td align="center">欲 focus 的 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @brief Focuses the widget. The focused widget is the widget which can receive the keyboard events * @param widget a widget * @note The widget has to be attached to a toplevel widget, otherwise it will have no effect */</span><span class="token keyword">void</span> <span class="token function">rtgui_widget_focus</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>old_focus<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RTGUI_WIDGET_IS_FOCUSABLE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">RTGUI_WIDGET_IS_ENABLE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    old_focus <span class="token operator">=</span> <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel<span class="token punctuation">)</span><span class="token operator">-></span>focused_widget<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_focus <span class="token operator">==</span> widget<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* it's the same focused widget */</span>    <span class="token comment" spellcheck="true">/* unfocused the old widget */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>old_focus <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token function">rtgui_widget_unfocus</span><span class="token punctuation">(</span>old_focus<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set widget as focused */</span>    widget<span class="token operator">-></span>flag <span class="token operator">|</span><span class="token operator">=</span> RTGUI_WIDGET_FLAG_FOCUS<span class="token punctuation">;</span>    <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel<span class="token punctuation">)</span><span class="token operator">-></span>focused_widget <span class="token operator">=</span> widget<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* invoke on focus in call back */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>on_focus_in <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        widget<span class="token operator">-></span><span class="token function">on_focus_in</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_focus<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Unfocus-widget"><a href="#Unfocus-widget" class="headerlink" title="Unfocus widget"></a>Unfocus widget</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_unfocus</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>focus widget</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th></tr></thead><tbody><tr><td align="center">欲 unfocus 的 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @brief Unfocused the widget * @param widget a widget */</span><span class="token keyword">void</span> <span class="token function">rtgui_widget_unfocus</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>widget<span class="token operator">-></span>toplevel <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">RTGUI_WIDGET_IS_FOCUSED</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    widget<span class="token operator">-></span>flag <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RTGUI_WIDGET_FLAG_FOCUS<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>on_focus_out <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        widget<span class="token operator">-></span><span class="token function">on_focus_out</span><span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel<span class="token punctuation">)</span><span class="token operator">-></span>focused_widget <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Ergodic constituent widget, make child loss of focus */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_IS_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rtgui_list_t <span class="token operator">*</span>node<span class="token punctuation">;</span>        <span class="token function">rtgui_list_foreach</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rtgui_widget_t <span class="token operator">*</span>child <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token function">rtgui_widget_unfocus</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_unfocus<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="位移-widget"><a href="#位移-widget" class="headerlink" title="位移 widget"></a>位移 widget</h3><h4 id="點向上位移"><a href="#點向上位移" class="headerlink" title="點向上位移"></a>點向上位移</h4><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_point_to_device</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>點向上位移</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th><th align="center"><code>*point</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td><td align="center">目標點</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_point_to_device</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_point_t <span class="token operator">*</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>point <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        point<span class="token operator">-></span>x <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        point<span class="token operator">-></span>y <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_point_to_device<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="點向下位移"><a href="#點向下位移" class="headerlink" title="點向下位移"></a>點向下位移</h4><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_point_to_logic</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>點向上位移</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th><th align="center"><code>*point</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td><td align="center">目標點</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_point_to_logic</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_point_t <span class="token operator">*</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>point <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        point<span class="token operator">-></span>x <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        point<span class="token operator">-></span>y <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_point_to_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="矩形向上位移"><a href="#矩形向上位移" class="headerlink" title="矩形向上位移"></a>矩形向上位移</h4><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_rect_to_device</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>點向上位移</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th><th align="center"><code>*rect</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td><td align="center">目標矩形</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_rect_to_device</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rect <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rect<span class="token operator">-></span>x1 <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>x2 <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>y1 <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>y2 <span class="token operator">+</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_rect_to_device<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="矩形向下位移"><a href="#矩形向下位移" class="headerlink" title="矩形向下位移"></a>矩形向下位移</h4><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_rect_to_logic</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>點向上位移</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th><th align="center"><code>*rect</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td><td align="center">目標矩形</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_rect_to_logic</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">,</span> rtgui_rect_t <span class="token operator">*</span>rect<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rect <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rect<span class="token operator">-></span>x1 <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>x2 <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>x1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>y1 <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>        rect<span class="token operator">-></span>y2 <span class="token operator">-</span><span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">.</span>y1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_rect_to_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="更新重疊區域"><a href="#更新重疊區域" class="headerlink" title="更新重疊區域"></a>更新重疊區域</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_update_clip</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>更新重疊區域</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * This function updates the clip info of widget */</span><span class="token keyword">void</span> <span class="token function">rtgui_widget_update_clip</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_rect_t rect<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rtgui_list_node <span class="token operator">*</span>node<span class="token punctuation">;</span>    rtgui_widget_t <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* no widget or widget is hide, no update clip */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget <span class="token operator">==</span> RT_NULL <span class="token operator">||</span> <span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span> <span class="token operator">||</span> widget<span class="token operator">-></span>parent <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reset visiable extent */</span>    widget<span class="token operator">-></span>extent_visiable <span class="token operator">=</span> widget<span class="token operator">-></span>extent<span class="token punctuation">;</span>    <span class="token function">rtgui_rect_intersect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>extent_visiable<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent_visiable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rect <span class="token operator">=</span> parent<span class="token operator">-></span>extent_visiable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reset clip to extent */</span>    <span class="token function">rtgui_region_reset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* limit widget extent in parent extent */</span>    <span class="token function">rtgui_region_intersect_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get the no transparent parent */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> parent<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        parent <span class="token operator">=</span> parent<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* give my clip back to parent */</span>        <span class="token function">rtgui_region_union</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* subtract widget clip in parent clip */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">RTGUI_IS_CONTAINER</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rtgui_region_subtract_rect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>clip<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>extent_visiable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * note: since the layout widget introduction, the sibling widget should not intersect.     */</span>    <span class="token comment" spellcheck="true">/* if it's a container object, update the clip info of children */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_IS_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rtgui_widget_t <span class="token operator">*</span>child<span class="token punctuation">;</span>        <span class="token function">rtgui_list_foreach</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            child <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rtgui_widget_update_clip</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_update_clip<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="顯示-widget"><a href="#顯示-widget" class="headerlink" title="顯示 widget"></a>顯示 widget</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_show</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>顯示 widget</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_show</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_event_show eshow<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">RTGUI_WIDGET_UNHIDE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RTGUI_EVENT_SHOW_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eshow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>event_handler <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">event_handler</span><span class="token punctuation">(</span>                <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>eshow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_show<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="隱藏-widget"><a href="#隱藏-widget" class="headerlink" title="隱藏 widget"></a>隱藏 widget</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_hide</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>隱藏 widget</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_widget_hide</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rtgui_widget <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_event_hide ehide<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET_IS_HIDE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RTGUI_EVENT_HIDE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ehide<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span>event_handler <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">event_handler</span><span class="token punctuation">(</span>                <span class="token function">RTGUI_OBJECT</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>ehide<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">RTGUI_WIDGET_HIDE</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_hide<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="取得-widget-資訊"><a href="#取得-widget-資訊" class="headerlink" title="取得 widget 資訊"></a>取得 widget 資訊</h2><p>最後整理一些取得 widget 資訊的 API</p><h3 id="Top-Level"><a href="#Top-Level" class="headerlink" title="Top Level"></a>Top Level</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_get_toplevel</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>取得 top level</td><td>所在 window</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> rtgui_win <span class="token operator">*</span><span class="token function">rtgui_widget_get_toplevel</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_widget_t <span class="token operator">*</span>r<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>widget <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>toplevel<span class="token punctuation">)</span>        <span class="token keyword">return</span> widget<span class="token operator">-></span>toplevel<span class="token punctuation">;</span>    <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"widget->toplevel not properly set\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> widget<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get the toplevel widget */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r<span class="token operator">-></span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        r <span class="token operator">=</span> r<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set toplevel */</span>    widget<span class="token operator">-></span>toplevel <span class="token operator">=</span> <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">RTGUI_WIN</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_get_toplevel<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="上層前景"><a href="#上層前景" class="headerlink" title="上層前景"></a>上層前景</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_get_parent_foreground</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>取得上層前景</td><td>顏色</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_color_t <span class="token function">rtgui_widget_get_parent_foreground</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_widget_t <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get parent widget */</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">RTGUI_WIDGET_FOREGROUND</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token operator">-></span>parent <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET_FLAG</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span><span class="token punctuation">)</span>        parent <span class="token operator">=</span> parent<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get parent's color */</span>    <span class="token keyword">return</span> <span class="token function">RTGUI_WIDGET_FOREGROUND</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_get_parent_foreground<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="上層背景"><a href="#上層背景" class="headerlink" title="上層背景"></a>上層背景</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_get_parent_background</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>取得上層背景</td><td>顏色</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_color_t <span class="token function">rtgui_widget_get_parent_background</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_widget_t <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get parent widget */</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">RTGUI_WIDGET_BACKGROUND</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token operator">-></span>parent <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">RTGUI_WIDGET_FLAG</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token operator">&amp;</span> RTGUI_WIDGET_FLAG_TRANSPARENT<span class="token punctuation">)</span><span class="token punctuation">)</span>        parent <span class="token operator">=</span> parent<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get parent's color */</span>    <span class="token keyword">return</span> <span class="token function">RTGUI_WIDGET_BACKGROUND</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_get_parent_background<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="下一個兄弟"><a href="#下一個兄弟" class="headerlink" title="下一個兄弟"></a>下一個兄弟</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_get_next_sibling</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>取得下一個兄弟</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_widget_t <span class="token operator">*</span><span class="token function">rtgui_widget_get_next_sibling</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_widget_t <span class="token operator">*</span>sibling <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>widget<span class="token operator">-></span>sibling<span class="token punctuation">.</span>next <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sibling <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>sibling<span class="token punctuation">.</span>next<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sibling<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_widget_get_next_sibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="上一個兄弟"><a href="#上一個兄弟" class="headerlink" title="上一個兄弟"></a>上一個兄弟</h3><p><i class="fa fa-code"></i> Code: <code>rtgui_widget_get_prev_sibling</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>取得上一個兄弟</td><td>void</td></tr></tbody></table><table><thead><tr><th align="center"><code>*widget</code></th></tr></thead><tbody><tr><td align="center">目標 widget</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rtgui_widget_t <span class="token operator">*</span><span class="token function">rtgui_widget_get_prev_sibling</span><span class="token punctuation">(</span>rtgui_widget_t <span class="token operator">*</span>widget<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rtgui_list_node <span class="token operator">*</span>node<span class="token punctuation">;</span>    rtgui_widget_t <span class="token operator">*</span>sibling<span class="token punctuation">,</span> <span class="token operator">*</span>parent<span class="token punctuation">;</span>    node <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    sibling <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    parent <span class="token operator">=</span> widget<span class="token operator">-></span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rtgui_list_foreach</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">RTGUI_CONTAINER</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token operator">-></span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>widget<span class="token operator">-></span>sibling<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        sibling <span class="token operator">=</span> <span class="token function">rtgui_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> rtgui_widget_t<span class="token punctuation">,</span> sibling<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sibling<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;p&gt;上一篇我們說明了 RTGUI 是如何透過 C 實現物件導向的設計邏輯，這篇將
      
    
    </summary>
    
    
      <category term="RT-Thread GUI" scheme="http://blog.lusw.dev/categories/RT-Thread-GUI/"/>
    
    
      <category term="kernel" scheme="http://blog.lusw.dev/tags/kernel/"/>
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/tags/RT-Thread/"/>
    
      <category term="GUI" scheme="http://blog.lusw.dev/tags/GUI/"/>
    
      <category term="widget" scheme="http://blog.lusw.dev/tags/widget/"/>
    
  </entry>
  
  <entry>
    <title>RT-Thread GUI Object</title>
    <link href="http://blog.lusw.dev/rtgui-object/"/>
    <id>http://blog.lusw.dev/rtgui-object/</id>
    <published>2019-01-01T07:08:37.000Z</published>
    <updated>2020-01-26T16:54:30.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="RT-Thread-GUI-物件架構"><a href="#RT-Thread-GUI-物件架構" class="headerlink" title="RT-Thread GUI 物件架構"></a>RT-Thread GUI 物件架構</h2><p>在 RTGUI 中，最小的物件為 widget，再來是 window，window 也是一個 widget；而每個 widget 也是一個 object，這是為了仿造 C++ 的物件導向所設計的，相同的概念我們在 RT-Thread 中已經看過許多次了，在 GUI engine 中也是相同的設計，其中在 object 結構中又串在 type 的結構上，type 中定義了兩個函式：<code>constructor</code> 與 <code>destructor</code>，在 C++ 的 class 中，常使用 <code>init</code> 函式來初始化新建的 class，這裡的 <code>constructor</code> 與 <code>destructor</code> 即用來初始化新建立的物件，及在刪除物件時，釋放該釋放的記憶體。<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[RTGUI粗讲（个人见解篇之三、RTGUI WIDGET （2））](https://blog.csdn.net/xuzhenglim/article/details/11883351)">[1]</span></a></sup></p><hr><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><blockquote><p>File: rtgui_object.h</p></blockquote><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* rtgui base object */</span><span class="token keyword">struct</span> rtgui_object<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* object type */</span>    <span class="token keyword">const</span> rtgui_type_t <span class="token operator">*</span>type<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the event handler */</span>    rtgui_event_handler_ptr event_handler<span class="token punctuation">;</span>    <span class="token keyword">enum</span> rtgui_object_flag flag<span class="token punctuation">;</span>    rt_uint32_t id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* rtgui type structure */</span><span class="token keyword">struct</span> rtgui_type<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* type name */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parent type link */</span>    <span class="token keyword">const</span> <span class="token keyword">struct</span> rtgui_type <span class="token operator">*</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* constructor and destructor */</span>    rtgui_constructor_t constructor<span class="token punctuation">;</span>    rtgui_destructor_t destructor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* size of type */</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="定義物件類型"><a href="#定義物件類型" class="headerlink" title="定義物件類型"></a>定義物件類型</h2><p>RTGUI 設計了一個巨集函數來定義不同的物件，如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> DEFINE_CLASS_TYPE(type, name, parent, constructor, destructor, size) \    const struct rtgui_type _rtgui_##type = { \    name, \    parent, \    RTGUI_CONSTRUCTOR(constructor), \    RTGUI_DESTRUCTOR(destructor), \    size }; \    const rtgui_type_t *_rtgui_##type##_get_type(void) { return &amp;_rtgui_##type; } \    RTM_EXPORT(_rtgui_##type##_get_type)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>##</code> 為連字符，在<a href="/rt-thread-RTM-EXPORT">RT-Thread 理解 RTM_EXPORT</a>裡有提過了，基本上就是填入值進去結構體</p><hr><h2 id="建立物件"><a href="#建立物件" class="headerlink" title="建立物件"></a>建立物件</h2><blockquote><p>File: rtgui_object.c</p></blockquote><p><i class="fa fa-code"></i> Code: <code>rtgui_object_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立物件</td><td>物件指標</td></tr></tbody></table><table><thead><tr><th><code>*object_type</code></th></tr></thead><tbody><tr><td>要建立的物件種類</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @brief Creates a new object: it calls the corresponding constructors * (from the constructor of the base class to the constructor of the more * derived class) and then sets the values of the given properties * * @param object_type the type of object to create * @return the created object */</span>rtgui_object_t <span class="token operator">*</span><span class="token function">rtgui_object_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> rtgui_type_t <span class="token operator">*</span>object_type<span class="token punctuation">)</span><span class="token punctuation">{</span>    rtgui_object_t <span class="token operator">*</span>new_object<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>object_type<span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    new_object <span class="token operator">=</span> <span class="token function">rtgui_malloc</span><span class="token punctuation">(</span>object_type<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_object <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span> <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RTGUI_OBJECT_TRACE</span>    obj_info<span class="token punctuation">.</span>objs_number <span class="token operator">++</span><span class="token punctuation">;</span>    obj_info<span class="token punctuation">.</span>allocated_size <span class="token operator">+</span><span class="token operator">=</span> object_type<span class="token operator">-></span>size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj_info<span class="token punctuation">.</span>allocated_size <span class="token operator">></span> obj_info<span class="token punctuation">.</span>max_allocated<span class="token punctuation">)</span>        obj_info<span class="token punctuation">.</span>max_allocated <span class="token operator">=</span> obj_info<span class="token punctuation">.</span>allocated_size<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    new_object<span class="token operator">-></span>type <span class="token operator">=</span> object_type<span class="token punctuation">;</span>    <span class="token function">rtgui_type_object_construct</span><span class="token punctuation">(</span>object_type<span class="token punctuation">,</span> new_object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> new_object<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_object_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立物件相當簡單，透過欲建立的物件類型所定意義的 <code>construct</code> 函數來建立，其中 <code>rtgui_type_object_construct</code> 會呼叫正確的建立函式來初始化資料。</p><hr><p><i class="fa fa-code"></i> Code: <code>rtgui_type_object_construct</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>呼叫正確的 <code>construct</code> 函式來初始化物件</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*type</code></th><th><code>*object</code></th></tr></thead><tbody><tr><td>欲初始化的物件類型</td><td>物件本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_type_object_construct</span><span class="token punctuation">(</span><span class="token keyword">const</span> rtgui_type_t <span class="token operator">*</span>type<span class="token punctuation">,</span> rtgui_object_t <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* construct from parent to children */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token operator">-></span>parent <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token function">rtgui_type_object_construct</span><span class="token punctuation">(</span>type<span class="token operator">-></span>parent<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token operator">-></span>constructor<span class="token punctuation">)</span>        type<span class="token operator">-></span><span class="token function">constructor</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果欲建立的物件類型在某一個物件類型的底下，如 window 之於 widget，則先呼叫在上層的 <code>construct</code>；接著呼叫自己的 <code>construct</code> 來完成建立的動作。</p><hr><p>再仔細的看一下 “object” 的 <code>construct</code> 函式，其動作為：填入 vaild 的旗標，並將 id 填入 object 的記憶體指標；以上動作在 <code>_rtgui_object_constructor</code> 完成</p><p><i class="fa fa-code"></i> Code: <code>_rtgui_object_constructor</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>“object” 建立函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*object</code></th></tr></thead><tbody><tr><td>要建立的物件</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_rtgui_object_constructor</span><span class="token punctuation">(</span>rtgui_object_t <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>object<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    object<span class="token operator">-></span>flag <span class="token operator">=</span> RTGUI_OBJECT_FLAG_VALID<span class="token punctuation">;</span>    object<span class="token operator">-></span>id   <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>object<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="刪除物件"><a href="#刪除物件" class="headerlink" title="刪除物件"></a>刪除物件</h2><p><i class="fa fa-code"></i> Code: <code>rtgui_object_destroy</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除物件</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*object</code></th></tr></thead><tbody><tr><td>要刪除的物件</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @brief Destroys the object. * * The object destructors will be called in inherited type order. * * @param object the object to destroy */</span><span class="token keyword">void</span> <span class="token function">rtgui_object_destroy</span><span class="token punctuation">(</span>rtgui_object_t <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>object <span class="token operator">||</span> object<span class="token operator">-></span>flag <span class="token operator">&amp;</span> RTGUI_OBJECT_FLAG_STATIC<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RTGUI_OBJECT_TRACE</span>    obj_info<span class="token punctuation">.</span>objs_number <span class="token operator">--</span><span class="token punctuation">;</span>    obj_info<span class="token punctuation">.</span>allocated_size <span class="token operator">-</span><span class="token operator">=</span> object<span class="token operator">-></span>type<span class="token operator">-></span>size<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* call destructor */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>object<span class="token operator">-></span>type <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rtgui_type_destructors_call</span><span class="token punctuation">(</span>object<span class="token operator">-></span>type<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* release object */</span>    <span class="token function">rtgui_free</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rtgui_object_destroy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這裡一樣透過 <code>rtgui_type_destructors_call</code> 來呼叫正確的 <code>destruct</code> 函式，<code>destruct</code> 負責釋放該釋放的記憶體；最後透過 <code>rtgui_free</code> 釋放整個物件。<code>regui_free</code> 則簡單的呼叫 <code>rt_free</code> 釋放記憶體，我們在前幾篇文章有討論過了（<a href="/rt-mem#Code-free">mempool</a>、<a href="/rt-memheap#釋放記憶體">memheap</a>、<a href="/rt-small-mem#釋放記憶體">small mem</a>、<a href="/rt-slab#釋放記憶體">slab</a>）</p><hr><p><i class="fa fa-code"></i> Code: <code>rtgui_type_destructors_call</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>呼叫正確的 <code>destructor</code> 函式來清除物件</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*type</code></th><th><code>*object</code></th></tr></thead><tbody><tr><td>欲清除的物件類型</td><td>物件本體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rtgui_type_destructors_call</span><span class="token punctuation">(</span><span class="token keyword">const</span> rtgui_type_t <span class="token operator">*</span>type<span class="token punctuation">,</span> rtgui_object_t <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* destruct from children to parent */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token operator">-></span>destructor<span class="token punctuation">)</span>        type<span class="token operator">-></span><span class="token function">destructor</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token operator">-></span>parent<span class="token punctuation">)</span>        <span class="token function">rtgui_type_destructors_call</span><span class="token punctuation">(</span>type<span class="token operator">-></span>parent<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同樣的如果此物件類型是在某個物件類型的底下，先呼叫上層的 <code>destruct</code>；接著呼叫自己的 <code>desturct</code> 完成清除的動作。</p><hr><p>最後來看一下 “object” 的刪除函式：填入 none 的旗標，並將物件種類設為 NULL；動作在 <code>_rtgui_object_destructor</code> 完成</p><p><i class="fa fa-code"></i> Code: <code>_rtgui_object_destructor</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>“object” 的刪除函式</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*object</code></th></tr></thead><tbody><tr><td>欲清除的物件</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* Destroys the object */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_rtgui_object_destructor</span><span class="token punctuation">(</span>rtgui_object_t <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* Any valid objest should both have valid flag _and_ valid type. Only use     * flag is not enough because the chunk of memory may be reallocted to other     * object and thus the flag will become valid. */</span>    object<span class="token operator">-></span>flag <span class="token operator">=</span> RTGUI_OBJECT_FLAG_NONE<span class="token punctuation">;</span>    object<span class="token operator">-></span>type <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div id="footnotes"><hr class="clearfix"><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://blog.csdn.net/xuzhenglim/article/details/11883351" target="_blank" rel="noopener">RTGUI粗讲（个人见解篇之三、RTGUI WIDGET （2））</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;RT-Thread-GUI-物件架構&quot;&gt;&lt;a href=&quot;#RT-
      
    
    </summary>
    
    
      <category term="RT-Thread GUI" scheme="http://blog.lusw.dev/categories/RT-Thread-GUI/"/>
    
    
      <category term="kernel" scheme="http://blog.lusw.dev/tags/kernel/"/>
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/tags/RT-Thread/"/>
    
      <category term="GUI" scheme="http://blog.lusw.dev/tags/GUI/"/>
    
      <category term="OOP" scheme="http://blog.lusw.dev/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>使用 crontab 自動備份網站原始碼</title>
    <link href="http://blog.lusw.dev/auto-backup-with-crontab/"/>
    <id>http://blog.lusw.dev/auto-backup-with-crontab/</id>
    <published>2018-12-26T04:14:07.000Z</published>
    <updated>2020-04-08T07:11:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="shell-script"><a href="#shell-script" class="headerlink" title="shell script"></a>shell script</h2><p>透過 git 備份時，一定是使用下列指令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">'log'</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而使用 shell script 可以讓我們一次執行一大串指令，因此我們來寫一個 shell script</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#!/bin/zsh</span>nowTime<span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +'%Y-%m-%d %H:%M:%S'<span class="token variable">)</span></span>"</span><span class="token keyword">echo</span> <span class="token string">"# Using crontab with auto.sh"</span><span class="token keyword">echo</span> <span class="token string">"# File in ~/Desktop/auto.sh"</span><span class="token keyword">echo</span> <span class="token string">"# Log  in ~/Desktop/cront.log"</span><span class="token keyword">echo</span> <span class="token string">"#"</span><span class="token keyword">echo</span> <span class="token string">"# Auto backup at <span class="token variable">${nowTime}</span>"</span><span class="token keyword">echo</span> <span class="token string">"# --------------------------------------------------\n"</span><span class="token function">cd</span> /Users/username<span class="token function">cd</span> <span class="token variable">$1</span><span class="token keyword">echo</span> <span class="token string">"Now at <span class="token variable"><span class="token variable">$(</span><span class="token function">pwd</span><span class="token variable">)</span></span>\n"</span>log<span class="token operator">=</span><span class="token string">"auto backup at "</span><span class="token variable">${nowTime}</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"<span class="token variable">$log</span>"</span>result<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> push site hexo_source_new 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token variable">)</span></span><span class="token keyword">case</span> <span class="token variable">$result</span> <span class="token keyword">in</span>    <span class="token string">"Everything up-to-date"</span><span class="token punctuation">)</span>        osascript -e <span class="token string">'display notification "Everything up-to-date." with title "Automatically backup" sound name "basso"'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        osascript -e <span class="token string">'display notification "Done!" with title "Automatically backup" sound name "hero"'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span class="token keyword">echo</span> <span class="token variable">${result}</span><span class="token keyword">echo</span> <span class="token string">"Backup complete."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中我們為了方便整理，在提交的紀錄上增加了時間；並且在 push 完根據結果有不同的通知</p><blockquote><p>此通知是基於 mac 上的 applescript 所寫的，在 linux 上會產生錯誤</p></blockquote><h2 id="建立-crontab"><a href="#建立-crontab" class="headerlink" title="建立 crontab"></a>建立 crontab</h2><p>寫好 script shell 後，再來就是要定時的執行它。使用 crontab 可以在指定的時間，或是固定的區間內執行。</p><p>使用方式，輸入指令 <code>crontab -e</code>，接著會跳進 vim，寫入</p><pre class="line-numbers language-vim"><code class="language-vim">@hourly chmod <span class="token operator">+</span><span class="token keyword">x</span> <span class="token operator">/</span>Users<span class="token operator">/</span>PATH_TO_YOUR<span class="token operator">.</span><span class="token keyword">sh</span>@hourly <span class="token operator">/</span>Users<span class="token operator">/</span>PATH_TO_YOUR<span class="token operator">.</span><span class="token keyword">sh</span> PATH_TO_YOUR_SOURCE <span class="token operator">></span><span class="token operator">></span> <span class="token operator">/</span>Users<span class="token operator">/</span>PATH_TO_YOUR<span class="token operator">.</span>log <span class="token number">2</span><span class="token operator">></span>&amp;<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>這裡首先提升一次權限，並設定每一次整點都備份一次 <code>@hourly</code>，並將結果寫入 log 中。我們需要先建立一個 .log 檔：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">touch</span> /Users/PATH_TO_YOUR.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>當然這裡的所有路徑因人而異，檔名也無所謂，最後 <code>:wq</code> 存檔退出，安裝完畢</p><p><img src="https://i.imgur.com/w3qGjus.png" alt="" title="大功告成"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;shell-script&quot;&gt;&lt;a href=&quot;#shell-scr
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.lusw.dev/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://blog.lusw.dev/tags/Linux/"/>
    
      <category term="crontab" scheme="http://blog.lusw.dev/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>自訂網域名稱：Google Domain</title>
    <link href="http://blog.lusw.dev/custom-domain-by-google-domain/"/>
    <id>http://blog.lusw.dev/custom-domain-by-google-domain/</id>
    <published>2018-12-13T03:17:28.000Z</published>
    <updated>2020-04-08T06:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="購買網域"><a href="#購買網域" class="headerlink" title="購買網域"></a>購買網域</h2><p>網路上已經有很多如何在 <a href="https://domains.google.com/m/registrar/omuskywalker.com?hl=en#" target="_blank" rel="noopener">Google Domain</a> 上買網域的文章了，在此就不特別贅述，放上我看的幾篇文章：</p><ul><li><a href="https://free.com.tw/google-domains/" target="_blank" rel="noopener">台灣用戶也能在 Google Domains 註冊購買網域名稱，詳細申請設定教學</a></li><li><a href="https://sofree.cc/google-domains/" target="_blank" rel="noopener">[教學]如何用 Google Domains 買網址、註冊網域？ - 香腸炒魷魚</a></li></ul><blockquote><p>比較特別的的地方是，現在只開放部分國家可使用，所以在填地址的時候，可以去 google map 搜尋隨便一個美國的地址，然後使用</p></blockquote><h2 id="設定-DNS"><a href="#設定-DNS" class="headerlink" title="設定 DNS"></a>設定 DNS</h2><p>根據 Github 官方的說明，需設定 type <code>A</code> 的 IP 位址為</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><p>以及一個 CNAME，name 可以填任意字串，此字串就是你的 subdomain（像是我填 blog），如果不知道填什麼，可以填 www。最後你的畫面會長這樣：<br><img src="https://i.imgur.com/OTJsgaX.png" alt=""><br>CNAME 的 data 請填 <code>你的 github ID</code>+<code>.github.io.</code>，注意最後有一個點</p><p>這些都設定完，之後你的網址就會變成 <code>subdomain.domain.com</code></p><blockquote><p>一個很重要的事情是，發布 hexo 的 github repo 須為 <strong>github.io</strong> 類型的，否則設定會有誤</p></blockquote><h2 id="設定-github-CNAME"><a href="#設定-github-CNAME" class="headerlink" title="設定 github CNAME"></a>設定 github CNAME</h2><p>Github 官方有提供 301 轉址功能，只要在網頁的 branch 下建立一個 <code>CNAME</code> 檔案，就會把舊網址轉址到新網址。你的 CNAME 應該要填以下內容：</p><pre><code>subdomain.domain.com</code></pre><p>其中 <code>subdomain</code> 與 <code>domain</code> 與自己的有關，像我的就是</p><pre><code>blog.omuskywalker.com</code></pre><p>如果你上面的 subdomain 設定為 www，而你的頂級網域（也就是你買的 domain 名字）沒有要給特別的網站用的話，也可以這樣寫：</p><pre><code>domain.comsubdomain.domain.com</code></pre><p>這麼一來不管是上面哪兩種，都會連到你的 blog</p><blockquote><p>如果跟我一樣是用 hexo 的人，CNAME 請放在 /source 底下，這樣每次 <code>hexo d</code> 才不會被蓋掉</p></blockquote><p>如果這些都有設定好，你的 github 應該會長這樣：<br><img src="https://i.imgur.com/e5GzzZH.png" alt=""></p><p>大概過幾個小時，你的新網址就可以用了（大功告成）!</p><h2 id="補充：HTTPS"><a href="#補充：HTTPS" class="headerlink" title="補充：HTTPS"></a>補充：HTTPS</h2><p>Github page 有提供內建的 HTTPS，只要你的網站設定好一陣子（不會很久，一天內），會有這個選項可以按：<br><img src="https://i.imgur.com/z9HdVbV.png" alt=""><br>按下去，就會獲得 HTTPS 了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;h2 id=&quot;購買網域&quot;&gt;&lt;a href=&quot;#購買網域&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Note" scheme="http://blog.lusw.dev/categories/Note/"/>
    
    
      <category term="hexo" scheme="http://blog.lusw.dev/tags/hexo/"/>
    
      <category term="github-page" scheme="http://blog.lusw.dev/tags/github-page/"/>
    
      <category term="CNAME" scheme="http://blog.lusw.dev/tags/CNAME/"/>
    
  </entry>
  
  <entry>
    <title>RT-Thread SLAB 動態管理</title>
    <link href="http://blog.lusw.dev/rt-slab/"/>
    <id>http://blog.lusw.dev/rt-slab/</id>
    <published>2018-12-05T07:42:50.000Z</published>
    <updated>2020-01-26T16:54:30.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: slab.c</p></blockquote><p>SLAB 將記憶體根據不同的對象切成不同的區 (zone)，對象通常是大小，也可看成是一個 zone 代表一個 pool，不同的 zone 放在一個 array 管理。</p><p>一個 zone 大小介於 32kB~128kB 之間，最多可以有 72 種 zone；zone 對象大小上上限 16kB，超過由頁分配器分配</p><ul><li>alloc：根據需要的大小，找到對應的 zone 取得記憶體；如假設需要 32kB，我們去尋找對象為 32kB 的 zone。<ul><li>若是該 zone 為空（找不到），直接向頁分配器分配一個新的 zone，取得第一塊 free chunk</li><li>若非空，直接取得第一塊，如果拿完該 zone 已經沒有 free chunk 頁分配器須將此 zone 刪除</li></ul></li><li>free：找到對應的 zone 插入至 free list，如果該 zone 的所有 free chunk 都已經釋放完畢，則須將此 zone 整個釋放到分配器裡</li></ul><p><img src="https://i.imgur.com/GZdBl7V.png" alt="" title="SLAB example"></p><blockquote><p>使用此管理方式： <code>#defined RT_USING_HEAP &amp;&amp; #defined RT_USING_SLAB</code></p></blockquote><hr><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><h3 id="Zone"><a href="#Zone" class="headerlink" title="Zone"></a>Zone</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * The IN-BAND zone header is placed at the beginning of each zone. */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> slab_zone<span class="token punctuation">{</span>    rt_int32_t  z_magic<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* magic number for sanity check */</span>    rt_int32_t  z_nfree<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* total free chunks / ualloc space in zone */</span>    rt_int32_t  z_nmax<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* maximum free chunks */</span>    <span class="token keyword">struct</span> slab_zone <span class="token operator">*</span>z_next<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* zoneary[] link if z_nfree non-zero */</span>    rt_uint8_t  <span class="token operator">*</span>z_baseptr<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* pointer to start of chunk array */</span>    rt_int32_t  z_uindex<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* current initial allocation index */</span>    rt_int32_t  z_chunksize<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* chunk size for validation */</span>    rt_int32_t  z_zoneindex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* zone index */</span>    slab_chunk  <span class="token operator">*</span>z_freechunk<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* free chunk list */</span><span class="token punctuation">}</span> slab_zone<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Chunk structure for free elements */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> slab_chunk<span class="token punctuation">{</span>    <span class="token keyword">struct</span> slab_chunk <span class="token operator">*</span>c_next<span class="token punctuation">;</span><span class="token punctuation">}</span> slab_chunk<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Page-Allocator"><a href="#Page-Allocator" class="headerlink" title="Page Allocator"></a>Page Allocator</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* page allocator */</span><span class="token keyword">struct</span> rt_page_head<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span>next<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* next valid page */</span>    rt_size_t page<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/* number of page  */</span>    <span class="token comment" spellcheck="true">/* dummy */</span>    <span class="token keyword">char</span> dummy<span class="token punctuation">[</span>RT_MM_PAGE_SIZE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_size_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="Descriptor"><a href="#Descriptor" class="headerlink" title="Descriptor"></a>Descriptor</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Array of descriptors that describe the contents of each page */</span><span class="token macro property">#<span class="token directive keyword">define</span> PAGE_TYPE_FREE      0x00</span><span class="token macro property">#<span class="token directive keyword">define</span> PAGE_TYPE_SMALL     0x01</span><span class="token macro property">#<span class="token directive keyword">define</span> PAGE_TYPE_LARGE     0x02</span><span class="token keyword">struct</span> memusage<span class="token punctuation">{</span>    rt_uint32_t type<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* page type */</span>    rt_uint32_t size<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/* pages allocated or offset from zone */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="初始化-heap"><a href="#初始化-heap" class="headerlink" title="初始化 heap"></a>初始化 heap</h2><p><i class="fa fa-code"></i> Code: <code>rt_system_heap_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 heap</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*begin_addr</code></th><th><code>*end_addr</code></th></tr></thead><tbody><tr><td>記憶體起始位址</td><td>結束位址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @ingroup SystemInit * * This function will init system heap * * @param begin_addr the beginning address of system page * @param end_addr the end address of system page */</span><span class="token keyword">void</span> <span class="token function">rt_system_heap_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>begin_addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>end_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_uint32_t limsize<span class="token punctuation">,</span> npages<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* align begin and end addr to page */</span>    heap_start <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>begin_addr<span class="token punctuation">,</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    heap_end   <span class="token operator">=</span> <span class="token function">RT_ALIGN_DOWN</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>end_addr<span class="token punctuation">,</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>heap_start <span class="token operator">>=</span> heap_end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"rt_system_heap_init, wrong address[0x%x - 0x%x]\n"</span><span class="token punctuation">,</span>                   <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>begin_addr<span class="token punctuation">,</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>end_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向上對齊起始位址，向下對其結束位址</li><li>檢查是否合法</li></ul><pre class="line-numbers language-c"><code class="language-c">    limsize <span class="token operator">=</span> heap_end <span class="token operator">-</span> heap_start<span class="token punctuation">;</span>    npages  <span class="token operator">=</span> limsize <span class="token operator">/</span> RT_MM_PAGE_SIZE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>計算最大的 size，設定頁數量</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize heap semaphore */</span>    <span class="token function">rt_sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> <span class="token string">"heap"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> RT_IPC_FLAG_FIFO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"heap[0x%x - 0x%x], size 0x%x, 0x%x pages\n"</span><span class="token punctuation">,</span>                                 heap_start<span class="token punctuation">,</span> heap_end<span class="token punctuation">,</span> limsize<span class="token punctuation">,</span> npages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>初始化 semaphore，值為 1</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init pages */</span>    <span class="token function">rt_page_init</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>heap_start<span class="token punctuation">,</span> npages<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>初始化 page</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* calculate zone size */</span>    zone_size <span class="token operator">=</span> ZALLOC_MIN_ZONE_SIZE<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>zone_size <span class="token operator">&lt;</span> ZALLOC_MAX_ZONE_SIZE <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>zone_size <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>limsize <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        zone_size <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    zone_limit <span class="token operator">=</span> zone_size <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>zone_limit <span class="token operator">></span> ZALLOC_ZONE_LIMIT<span class="token punctuation">)</span>        zone_limit <span class="token operator">=</span> ZALLOC_ZONE_LIMIT<span class="token punctuation">;</span>    zone_page_cnt <span class="token operator">=</span> zone_size <span class="token operator">/</span> RT_MM_PAGE_SIZE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>計算 zone 的大小、對象大小的上限及總頁數</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"zone size 0x%x, zone page count 0x%x\n"</span><span class="token punctuation">,</span>                                 zone_size<span class="token punctuation">,</span> zone_page_cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate memusage array */</span>    limsize  <span class="token operator">=</span> npages <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> memusage<span class="token punctuation">)</span><span class="token punctuation">;</span>    limsize  <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>limsize<span class="token punctuation">,</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    memusage <span class="token operator">=</span> <span class="token function">rt_page_alloc</span><span class="token punctuation">(</span>limsize <span class="token operator">/</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"memusage 0x%x, size 0x%x\n"</span><span class="token punctuation">,</span>                                 <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>memusage<span class="token punctuation">,</span> limsize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後建立一個陣列紀錄頁的資訊</li></ul><hr><h3 id="rt-page-init"><a href="#rt-page-init" class="headerlink" title="rt_page_init"></a>rt_page_init</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化頁分配器</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*addr</code></th><th><code>npages</code></th></tr></thead><tbody><tr><td>存放頁的記憶體位址</td><td>頁的總數</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Initialize the page allocator */</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rt_page_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> rt_size_t npages<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>addr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>npages <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rt_page_list <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token function">rt_page_free</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> npages<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將 page list 設為空，釋放所有的 page</li></ul><hr><h2 id="分配記憶體"><a href="#分配記憶體" class="headerlink" title="分配記憶體"></a>分配記憶體</h2><h3 id="rt-malloc"><a href="#rt-malloc" class="headerlink" title="rt_malloc"></a>rt_malloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will allocate a block from system heap memory. * - If the nbytes is less than zero, * or * - If there is no nbytes sized memory valid in system, * the RT_NULL is returned. * * @param size the size of memory to be allocated * * @return the allocated memory */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_malloc</span><span class="token punctuation">(</span>rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    slab_zone <span class="token operator">*</span>z<span class="token punctuation">;</span>    rt_int32_t zi<span class="token punctuation">;</span>    slab_chunk <span class="token operator">*</span>chunk<span class="token punctuation">;</span>    <span class="token keyword">struct</span> memusage <span class="token operator">*</span>kup<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* zero size, return RT_NULL */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 size = 0，回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*     * Handle large allocations directly.  There should not be very many of     * these so performance is not a big issue.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> zone_limit<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        chunk <span class="token operator">=</span> <span class="token function">rt_page_alloc</span><span class="token punctuation">(</span>size <span class="token operator">>></span> RT_MM_PAGE_BITS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 size 超過一個 chunk 的上限，則透過頁分配器來分配</li><li>且如果失敗了，直接回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* set kup */</span>        kup <span class="token operator">=</span> <span class="token function">btokup</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>        kup<span class="token operator">-></span>type <span class="token operator">=</span> PAGE_TYPE_LARGE<span class="token punctuation">;</span>        kup<span class="token operator">-></span>size <span class="token operator">=</span> size <span class="token operator">>></span> RT_MM_PAGE_BITS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定頁的資訊：<ul><li>type：<code>PAGE_TYPE_LARGE</code></li><li>size：用了幾頁</li></ul></li><li>btokup：<code>&amp;memusage[((rt_uint32_t)(addr) - heap_start) &gt;&gt; RT_MM_PAGE_BITS]</code><ul><li>找到陣列中與起始位置的差值，位移 12-bit，即除一頁的大小</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"malloc a large memory 0x%x, page cnt %d, kup %d\n"</span><span class="token punctuation">,</span>                      size<span class="token punctuation">,</span>                      size <span class="token operator">>></span> RT_MM_PAGE_BITS<span class="token punctuation">,</span>                      <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>chunk <span class="token operator">-</span> heap_start<span class="token punctuation">)</span> <span class="token operator">>></span> RT_MM_PAGE_BITS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* lock heap */</span>        <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>        used_mem <span class="token operator">+</span><span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>used_mem <span class="token operator">></span> max_mem<span class="token punctuation">)</span>            max_mem <span class="token operator">=</span> used_mem<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要鎖，更新使用大小，跳到 <code>__done</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* lock heap */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Attempt to allocate out of an existing zone.  First try the free list,     * then allocate out of unallocated space.  If we find a good zone move     * it to the head of the list so later allocations find it quickly     * (we might have thousands of zones in the list).     *     * Note: zoneindex() will panic of size is too large.     */</span>    zi <span class="token operator">=</span> <span class="token function">zoneindex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>zi <span class="token operator">&lt;</span> NZONES<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 size 小於一個 chunk 的上限，尋找此大小對應的 zone</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"try to malloc 0x%x on zone: %d\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">,</span> zi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">=</span> zone_array<span class="token punctuation">[</span>zi<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>z<span class="token operator">-></span>z_nfree <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* Remove us from the zone_array[] when we become empty */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>z<span class="token operator">-></span>z_nfree <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            zone_array<span class="token punctuation">[</span>zi<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token operator">-></span>z_next<span class="token punctuation">;</span>            z<span class="token operator">-></span>z_next <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果該 zone 不為空，且此 zone 剩最後一顆可用時，將此 zone 刪除</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/*         * No chunks are available but nfree said we had some memory, so         * it must be available in the never-before-used-memory area         * governed by uindex.  The consequences are very serious if our zone         * got corrupted so we use an explicit rt_kprintf rather then a KASSERT.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token operator">-></span>z_uindex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> z<span class="token operator">-></span>z_nmax<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            z<span class="token operator">-></span>z_uindex <span class="token operator">=</span> z<span class="token operator">-></span>z_uindex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            chunk <span class="token operator">=</span> <span class="token punctuation">(</span>slab_chunk <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>z<span class="token operator">-></span>z_baseptr <span class="token operator">+</span> z<span class="token operator">-></span>z_uindex <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* find on free chunk list */</span>            chunk <span class="token operator">=</span> z<span class="token operator">-></span>z_freechunk<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* remove this chunk from list */</span>            z<span class="token operator">-></span>z_freechunk <span class="token operator">=</span> z<span class="token operator">-></span>z_freechunk<span class="token operator">-></span>c_next<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>        used_mem <span class="token operator">+</span><span class="token operator">=</span> z<span class="token operator">-></span>z_chunksize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>used_mem <span class="token operator">></span> max_mem<span class="token punctuation">)</span>            max_mem <span class="token operator">=</span> used_mem<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token keyword">goto</span> done<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取得一塊，跳至 done<ul><li>從 <code>uindex</code> 找，這種方式取得的屬於此 zone 最初的 chunk</li><li>如果不行，從 free list 中取得，並從 free list 移除此 chunk；這種的 chunk 是已經被要過，又還回來的</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*     * If all zones are exhausted we need to allocate a new zone for this     * index.     *     * At least one subsystem, the tty code (see CROUND) expects power-of-2     * allocations to be power-of-2 aligned.  We maintain compatibility by     * adjusting the base offset below.     */</span>    <span class="token punctuation">{</span>        rt_int32_t off<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>z <span class="token operator">=</span> zone_free<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* remove zone from free zone list */</span>            zone_free <span class="token operator">=</span> z<span class="token operator">-></span>z_next<span class="token punctuation">;</span>            <span class="token operator">--</span> zone_free_cnt<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果找到的 zone 為空，且 zone_free 不為空：代表有可用的空 zone 可以使用</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* unlock heap, since page allocator will think about lock */</span>            <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* allocate a zone from page */</span>            z <span class="token operator">=</span> <span class="token function">rt_page_alloc</span><span class="token punctuation">(</span>zone_size <span class="token operator">/</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>z <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                chunk <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>                <span class="token keyword">goto</span> __exit<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>否則需要重新與頁分配器要一個 zone</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* lock heap */</span>            <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"alloc a new zone: 0x%x\n"</span><span class="token punctuation">,</span>                                         <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* set message usage */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> kup <span class="token operator">=</span> <span class="token function">btokup</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> off <span class="token operator">&lt;</span> zone_page_cnt<span class="token punctuation">;</span> off <span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                kup<span class="token operator">-></span>type <span class="token operator">=</span> PAGE_TYPE_SMALL<span class="token punctuation">;</span>                kup<span class="token operator">-></span>size <span class="token operator">=</span> off<span class="token punctuation">;</span>                kup <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著設定每一頁的資訊</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* clear to zero */</span>        <span class="token function">rt_memset</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slab_zone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>清空整個 zone</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* offset of slab zone struct in zone */</span>        off <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>slab_zone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * Guarentee power-of-2 alignment for power-of-2-sized chunks.         * Otherwise just 8-byte align the data.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">|</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            off <span class="token operator">=</span> <span class="token punctuation">(</span>off <span class="token operator">+</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            off <span class="token operator">=</span> <span class="token punctuation">(</span>off <span class="token operator">+</span> MIN_CHUNK_MASK<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>MIN_CHUNK_MASK<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>計算我們要用的對齊法：<ul><li>如果 size 是二的次方，將 off (zone 的頭) 與 size 向上對齊</li><li>否則直接與 8 向上對齊</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">        z<span class="token operator">-></span>z_magic     <span class="token operator">=</span> ZALLOC_SLAB_MAGIC<span class="token punctuation">;</span>        z<span class="token operator">-></span>z_zoneindex <span class="token operator">=</span> zi<span class="token punctuation">;</span>        z<span class="token operator">-></span>z_nmax      <span class="token operator">=</span> <span class="token punctuation">(</span>zone_size <span class="token operator">-</span> off<span class="token punctuation">)</span> <span class="token operator">/</span> size<span class="token punctuation">;</span>        z<span class="token operator">-></span>z_nfree     <span class="token operator">=</span> z<span class="token operator">-></span>z_nmax <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        z<span class="token operator">-></span>z_baseptr   <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>z <span class="token operator">+</span> off<span class="token punctuation">;</span>        z<span class="token operator">-></span>z_uindex    <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        z<span class="token operator">-></span>z_chunksize <span class="token operator">=</span> size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 magic、對應 <code>zone_array</code> 的 index<ul><li>最大數量為 <code>zone_size</code> - off 再除以一個 chunk 的大小</li><li>目前可用的數量則為最大數量減 1，因為待會會拿走一塊</li><li>基址為起始位址加上 <code>off，uindex</code> 為 0，這是之後 alloc 時可直接使用這兩個來找到 free chunk</li><li>最後設定 chunk size</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">        chunk <span class="token operator">=</span> <span class="token punctuation">(</span>slab_chunk <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>z<span class="token operator">-></span>z_baseptr <span class="token operator">+</span> z<span class="token operator">-></span>z_uindex <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* link to zone array */</span>        z<span class="token operator">-></span>z_next <span class="token operator">=</span> zone_array<span class="token punctuation">[</span>zi<span class="token punctuation">]</span><span class="token punctuation">;</span>        zone_array<span class="token punctuation">[</span>zi<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>        used_mem <span class="token operator">+</span><span class="token operator">=</span> z<span class="token operator">-></span>z_chunksize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>used_mem <span class="token operator">></span> max_mem<span class="token punctuation">)</span>            max_mem <span class="token operator">=</span> used_mem<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拿走第一塊，並將這個 zone 插上對應的 zone array entry</li></ul><pre class="line-numbers language-c"><code class="language-c">done<span class="token punctuation">:</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_malloc_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>chunk<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>__exit<span class="token punctuation">:</span>    <span class="token keyword">return</span> chunk<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_malloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後回傳找到的 chunk</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>zoneindex</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>尋找傳入的 size 對應 zone array 的 index</td><td>index</td></tr></tbody></table><table><thead><tr><th><code>*bytes</code></th></tr></thead><tbody><tr><td>傳入的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * Calculate the zone index for the allocation request size and set the * allocation request size to that particular zone's chunk size. */</span>rt_inline <span class="token keyword">int</span> <span class="token function">zoneindex</span><span class="token punctuation">(</span>rt_uint32_t <span class="token operator">*</span>bytes<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* unsigned for shift opt */</span>    rt_uint32_t n <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span> <span class="token operator">*</span> bytes<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">7</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 8 byte chunks, 16 zones */</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">15</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">16</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">8192</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">512</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">31</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">63</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">64</span> <span class="token operator">+</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2048</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">127</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">4096</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">255</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">256</span> <span class="token operator">+</span> <span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">511</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">511</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">512</span> <span class="token operator">+</span> <span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">16384</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>bytes <span class="token operator">=</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1023</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">1023</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"Unexpected byte count %d"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根據不同的 range，將傳入的大小對齊，並平均分配每個 range 有 16 個 zone index</p><hr><h4 id="rt-page-alloc"><a href="#rt-page-alloc" class="headerlink" title="rt_page_alloc"></a>rt_page_alloc</h4><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求頁記憶體</td><td>頁</td></tr></tbody></table><table><thead><tr><th><code>npages</code></th></tr></thead><tbody><tr><td>欲要求的頁數</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_page_alloc</span><span class="token punctuation">(</span>rt_size_t npages<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span><span class="token operator">*</span>prev<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>npages <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* lock heap */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>prev <span class="token operator">=</span> <span class="token operator">&amp;</span>rt_page_list<span class="token punctuation">;</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token operator">*</span>prev<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_NULL<span class="token punctuation">;</span> prev <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>b<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>page <span class="token operator">></span> npages<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* splite pages */</span>            n       <span class="token operator">=</span> b <span class="token operator">+</span> npages<span class="token punctuation">;</span>            n<span class="token operator">-></span>next <span class="token operator">=</span> b<span class="token operator">-></span>next<span class="token punctuation">;</span>            n<span class="token operator">-></span>page <span class="token operator">=</span> b<span class="token operator">-></span>page <span class="token operator">-</span> npages<span class="token punctuation">;</span>            <span class="token operator">*</span>prev   <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果找到一個頁數大於需求的，選擇此頁，並分割</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>page <span class="token operator">==</span> npages<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* this node fit, remove this node */</span>            <span class="token operator">*</span>prev <span class="token operator">=</span> b<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* unlock heap */</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有一個剛剛好，選擇此頁</li><li>最後回傳選擇的頁</li></ul><hr><h3 id="rt-realloc"><a href="#rt-realloc" class="headerlink" title="rt_realloc"></a>rt_realloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>增長/縮減記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>*rmem</code></th><th><code>newsize</code></th></tr></thead><tbody><tr><td>欲增長/縮減的記憶體位址</td><td>新的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will change the size of previously allocated memory block. * * @param ptr the previously allocated memory block * @param size the new size of memory block * * @return the allocated memory */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>nptr<span class="token punctuation">;</span>    slab_zone <span class="token operator">*</span>z<span class="token punctuation">;</span>    <span class="token keyword">struct</span> memusage <span class="token operator">*</span>kup<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果傳入的 ptr 為空，malloc(size)</li><li>如果傳入的 size 為 0，free(ptr)</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*     * Get the original allocation's zone.  If the new request winds up     * using the same chunk size we do not have to do anything.     */</span>    kup <span class="token operator">=</span> <span class="token function">btokup</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_MM_PAGE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>kup<span class="token operator">-></span>type <span class="token operator">==</span> PAGE_TYPE_LARGE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rt_size_t osize<span class="token punctuation">;</span>        osize <span class="token operator">=</span> kup<span class="token operator">-></span>size <span class="token operator">&lt;&lt;</span> RT_MM_PAGE_BITS<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nptr <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>nptr<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> size <span class="token operator">></span> osize <span class="token operator">?</span> osize <span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著檢查此 ptr 所在的頁資訊，如果是 LARGE，代表原來的 ptr 是由頁分配器所分配的</li><li>新 malloc(size)，並還原資料，釋放舊的記憶體</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>kup<span class="token operator">-></span>type <span class="token operator">==</span> PAGE_TYPE_SMALL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        z <span class="token operator">=</span> <span class="token punctuation">(</span>slab_zone <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_MM_PAGE_MASK<span class="token punctuation">)</span> <span class="token operator">-</span>                          kup<span class="token operator">-></span>size <span class="token operator">*</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>z<span class="token operator">-></span>z_magic <span class="token operator">==</span> ZALLOC_SLAB_MAGIC<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">zoneindex</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token operator">-></span>z_chunksize <span class="token operator">==</span> size<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* same chunk */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果是 SMALL，首先找到歸屬得 zone：<ul><li>透過減掉頁資訊上的 size 乘以頁的大小，即可找到zone的初始位址</li><li>在 malloc 中，建立 zone 時 size 是從 0 開始填，一頁一頁加一</li><li>如果新的大小與原本的 chunk 相同，不做事</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/*         * Allocate memory for the new request size.  Note that zoneindex has         * already adjusted the request size to the appropriate chunk size, which         * should optimize our bcopy().  Then copy and return the new pointer.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nptr <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>nptr<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> size <span class="token operator">></span> z<span class="token operator">-></span>z_chunksize <span class="token operator">?</span> z<span class="token operator">-></span>z_chunksize <span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_realloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不同，malloc(size)，並還原資料，釋放舊的記憶體</li></ul><hr><h3 id="rt-calloc"><a href="#rt-calloc" class="headerlink" title="rt_calloc"></a>rt_calloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求一段連續的記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>count</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的數量</td><td>一塊的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will contiguously allocate enough space for count objects * that are size bytes of memory each and returns a pointer to the allocated * memory. * * The allocated memory is filled with bytes of value zero. * * @param count number of objects to allocate * @param size size of the objects to allocate * * @return pointer to allocated memory / NULL pointer if there is an error */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_calloc</span><span class="token punctuation">(</span>rt_size_t count<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate 'count' objects of size 'size' */</span>    p <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>count <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* zero the memory */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token function">rt_memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_calloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>與 memheap 相同，一次要一塊 count 乘 size 的記憶體</li><li>清 0 並回傳起始位址</li></ul><hr><h2 id="釋放記憶體"><a href="#釋放記憶體" class="headerlink" title="釋放記憶體"></a>釋放記憶體</h2><p><i class="fa fa-code"></i> Code: <code>rt_free</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*ptr</code></th></tr></thead><tbody><tr><td>欲釋放的記憶體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will release the previous allocated memory block by rt_malloc. * The released memory block is taken back to system heap. * * @param ptr the address of memory which will be released */</span><span class="token keyword">void</span> <span class="token function">rt_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">{</span>    slab_zone <span class="token operator">*</span>z<span class="token punctuation">;</span>    slab_chunk <span class="token operator">*</span>chunk<span class="token punctuation">;</span>    <span class="token keyword">struct</span> memusage <span class="token operator">*</span>kup<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* free a RT_NULL pointer */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_free_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get memory usage */</span><span class="token macro property">#<span class="token directive keyword">if</span> RT_DEBUG_SLAB</span>    <span class="token punctuation">{</span>        rt_uint32_t addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_MM_PAGE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"free a memory 0x%x and align to 0x%x, kup index %d\n"</span><span class="token punctuation">,</span>                      <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr<span class="token punctuation">,</span>                      <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>addr<span class="token punctuation">,</span>                      <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">-</span> heap_start<span class="token punctuation">)</span> <span class="token operator">>></span> RT_MM_PAGE_BITS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    kup <span class="token operator">=</span> <span class="token function">btokup</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_MM_PAGE_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* release large allocation */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>kup<span class="token operator">-></span>type <span class="token operator">==</span> PAGE_TYPE_LARGE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        rt_uint32_t size<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* lock heap */</span>        <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* clear page counter */</span>        size <span class="token operator">=</span> kup<span class="token operator">-></span>size<span class="token punctuation">;</span>        kup<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>        used_mem <span class="token operator">-</span><span class="token operator">=</span> size <span class="token operator">*</span> RT_MM_PAGE_SIZE<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"free large memory block 0x%x, page count %d\n"</span><span class="token punctuation">,</span>                      <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* free this page */</span>        <span class="token function">rt_page_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果要釋放的記憶體是由頁分配器分配的，根據頁資訊中的 size 來釋放，並清 0</li><li>實際呼叫 <code>rt_page_free(ptr, size)</code> 來完成</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* lock heap */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* zone case. get out zone. */</span>    z <span class="token operator">=</span> <span class="token punctuation">(</span>slab_zone <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>ptr <span class="token operator">&amp;</span> <span class="token operator">~</span>RT_MM_PAGE_MASK<span class="token punctuation">)</span> <span class="token operator">-</span>                      kup<span class="token operator">-></span>size <span class="token operator">*</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>z<span class="token operator">-></span>z_magic <span class="token operator">==</span> ZALLOC_SLAB_MAGIC<span class="token punctuation">)</span><span class="token punctuation">;</span>    chunk          <span class="token operator">=</span> <span class="token punctuation">(</span>slab_chunk <span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">;</span>    chunk<span class="token operator">-></span>c_next  <span class="token operator">=</span> z<span class="token operator">-></span>z_freechunk<span class="token punctuation">;</span>    z<span class="token operator">-></span>z_freechunk <span class="token operator">=</span> chunk<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>    used_mem <span class="token operator">-</span><span class="token operator">=</span> z<span class="token operator">-></span>z_chunksize<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果是由 zone 分配，找到歸屬的 zone，並將需要釋放的 chunk 插到 free list 上</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*     * Bump the number of free chunks.  If it becomes non-zero the zone     * must be added back onto the appropriate list.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token operator">-></span>z_nfree<span class="token operator">++</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        z<span class="token operator">-></span>z_next <span class="token operator">=</span> zone_array<span class="token punctuation">[</span>z<span class="token operator">-></span>z_zoneindex<span class="token punctuation">]</span><span class="token punctuation">;</span>        zone_array<span class="token punctuation">[</span>z<span class="token operator">-></span>z_zoneindex<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新 <code>nfree</code>，如果本來為 0 ，則需要將此 zone 插回 zone array</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/*     * If the zone becomes totally free, and there are other zones we     * can allocate from, move this zone to the FreeZones list.  Since     * this code can be called from an IPI callback, do *NOT* try to mess     * with kernel_map here.  Hysteresis will be performed at malloc() time.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token operator">-></span>z_nfree <span class="token operator">==</span> z<span class="token operator">-></span>z_nmax <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>z<span class="token operator">-></span>z_next <span class="token operator">||</span> zone_array<span class="token punctuation">[</span>z<span class="token operator">-></span>z_zoneindex<span class="token punctuation">]</span> <span class="token operator">!=</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        slab_zone <span class="token operator">*</span><span class="token operator">*</span>pz<span class="token punctuation">;</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_SLAB<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"free zone 0x%x\n"</span><span class="token punctuation">,</span>                                     <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>z<span class="token punctuation">,</span> z<span class="token operator">-></span>z_zoneindex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* remove zone from zone array list */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>pz <span class="token operator">=</span> <span class="token operator">&amp;</span>zone_array<span class="token punctuation">[</span>z<span class="token operator">-></span>z_zoneindex<span class="token punctuation">]</span><span class="token punctuation">;</span> z <span class="token operator">!=</span> <span class="token operator">*</span>pz<span class="token punctuation">;</span> pz <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>pz<span class="token punctuation">)</span><span class="token operator">-></span>z_next<span class="token punctuation">)</span>            <span class="token punctuation">;</span>        <span class="token operator">*</span>pz <span class="token operator">=</span> z<span class="token operator">-></span>z_next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果釋放完這個 chunk 後整個 zone 都釋放完了，我們需要釋放整個 zone</li><li>這裡還同時確保在同一個 zone array entry 中還有其他的 zone 可以分配</li><li>接著我們把這個 zone 從 zone array 移除</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* reset zone */</span>        z<span class="token operator">-></span>z_magic <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* insert to free zone list */</span>        z<span class="token operator">-></span>z_next <span class="token operator">=</span> zone_free<span class="token punctuation">;</span>        zone_free <span class="token operator">=</span> z<span class="token punctuation">;</span>        <span class="token operator">++</span> zone_free_cnt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重設 magic，將這個 zone 插上 free zone，free count 加一</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* release zone to page allocator */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>zone_free_cnt <span class="token operator">></span> ZONE_RELEASE_THRESH<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">register</span> rt_base_t i<span class="token punctuation">;</span>            z         <span class="token operator">=</span> zone_free<span class="token punctuation">;</span>            zone_free <span class="token operator">=</span> z<span class="token operator">-></span>z_next<span class="token punctuation">;</span>            <span class="token operator">--</span> zone_free_cnt<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* set message usage */</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> kup <span class="token operator">=</span> <span class="token function">btokup</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> zone_page_cnt<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                kup<span class="token operator">-></span>type <span class="token operator">=</span> PAGE_TYPE_FREE<span class="token punctuation">;</span>                kup<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                kup <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/* unlock heap */</span>            <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* release pages */</span>            <span class="token function">rt_page_free</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> zone_size <span class="token operator">/</span> RT_MM_PAGE_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* unlock heap */</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_free<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果已經有 <code>ZONE_RELEASE_THRESH</code> (2) 個以上的 free zone，完全釋放一個 zone 給頁分配器<ul><li>從 free zone 中移除，free count 減一</li><li>重設頁資訊：type free、size 0</li><li>透過 <code>rt_page_free</code> 完成</li></ul></li></ul><hr><h3 id="rt-page-free"><a href="#rt-page-free" class="headerlink" title="rt_page_free"></a>rt_page_free</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放頁記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*addr</code></th><th><code>pages</code></th></tr></thead><tbody><tr><td>欲釋放的頁</td><td>欲釋放的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rt_page_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> rt_size_t npages<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span><span class="token operator">*</span>prev<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>addr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>addr <span class="token operator">%</span> RT_MM_PAGE_SIZE <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>npages <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_page_head <span class="token operator">*</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* lock heap */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>prev <span class="token operator">=</span> <span class="token operator">&amp;</span>rt_page_list<span class="token punctuation">;</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token operator">*</span>prev<span class="token punctuation">)</span> <span class="token operator">!=</span> RT_NULL<span class="token punctuation">;</span> prev <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>b<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>b<span class="token operator">-></span>page <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>b <span class="token operator">></span> n <span class="token operator">||</span> b <span class="token operator">+</span> b<span class="token operator">-></span>page <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> b<span class="token operator">-></span>page <span class="token operator">==</span> n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token punctuation">(</span>b<span class="token operator">-></span>page <span class="token operator">+</span><span class="token operator">=</span> npages<span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token operator">-></span>next<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                b<span class="token operator">-></span>page <span class="token operator">+</span><span class="token operator">=</span> b<span class="token operator">-></span>next<span class="token operator">-></span>page<span class="token punctuation">;</span>                b<span class="token operator">-></span>next  <span class="token operator">=</span> b<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">goto</span> _return<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> n <span class="token operator">+</span> npages<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            n<span class="token operator">-></span>page <span class="token operator">=</span> b<span class="token operator">-></span>page <span class="token operator">+</span> npages<span class="token punctuation">;</span>            n<span class="token operator">-></span>next <span class="token operator">=</span> b<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token operator">*</span>prev   <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token keyword">goto</span> _return<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> n <span class="token operator">+</span> npages<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    n<span class="token operator">-></span>page <span class="token operator">=</span> npages<span class="token punctuation">;</span>    n<span class="token operator">-></span>next <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token operator">*</span>prev   <span class="token operator">=</span> n<span class="token punctuation">;</span>_return<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">/* unlock heap */</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;File: slab.c&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/categories/RT-Thread/"/>
    
    
      <category term="kernel" scheme="http://blog.lusw.dev/tags/kernel/"/>
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/tags/RT-Thread/"/>
    
      <category term="記憶體管理" scheme="http://blog.lusw.dev/tags/%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86/"/>
    
      <category term="SLAB" scheme="http://blog.lusw.dev/tags/SLAB/"/>
    
  </entry>
  
  <entry>
    <title>RT-Thread 小記憶體動態管理</title>
    <link href="http://blog.lusw.dev/rt-small-mem/"/>
    <id>http://blog.lusw.dev/rt-small-mem/</id>
    <published>2018-12-05T07:42:44.000Z</published>
    <updated>2020-01-26T16:54:30.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: mem.c</p></blockquote><ul><li>與 memory heap 的做法類似，一開始是一塊大的記憶體，包含 header</li><li>分配記憶體時適當的切割</li><li>所有的記憶體塊透過 header 串起來，形成一個雙向鏈結</li></ul><p><img src="https://i.imgur.com/tbptSYO.png" alt="" title="small memory example"></p><blockquote><p>使用此管理方式： <code>#defined RT_USING_HEAP &amp;&amp; #defined RT_USING_SMALL_MEM</code></p></blockquote><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> heap_mem<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* magic and used flag */</span>    rt_uint16_t magic<span class="token punctuation">;</span>    rt_uint16_t used<span class="token punctuation">;</span>    rt_size_t next<span class="token punctuation">,</span> prev<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>    rt_uint8_t thread<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* thread name */</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>此結構即為一個記憶體塊的 header</li><li>包含了<ul><li>magic 碼 <code>0x1ea0</code></li><li>使用中標記</li><li>前一顆與下一顆</li><li>使用此記憶體的 thread 名稱（選）</li></ul></li></ul><hr><h2 id="初始化-heap"><a href="#初始化-heap" class="headerlink" title="初始化 heap"></a>初始化 heap</h2><p><i class="fa fa-code"></i> Code: <code>rt_system_heap_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 heap</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*begin_addr</code></th><th><code>*end_addr</code></th></tr></thead><tbody><tr><td>記憶體起始位址</td><td>結束位址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * @ingroup SystemInit * * This function will initialize system heap memory. * * @param begin_addr the beginning address of system heap memory. * @param end_addr the end address of system heap memory. */</span><span class="token keyword">void</span> <span class="token function">rt_system_heap_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>begin_addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>end_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>mem<span class="token punctuation">;</span>    rt_uint32_t begin_align <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>begin_addr<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    rt_uint32_t end_align <span class="token operator">=</span> <span class="token function">RT_ALIGN_DOWN</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>end_addr<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向上對齊起始位址與向下對齊結束位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* alignment addr */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end_align <span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>end_align <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span> <span class="token operator">>=</span> begin_align<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* calculate the aligned memory size */</span>        mem_size_aligned <span class="token operator">=</span> end_align <span class="token operator">-</span> begin_align <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"mem init, error begin address 0x%x, and end address 0x%x\n"</span><span class="token punctuation">,</span>                   <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>begin_addr<span class="token punctuation">,</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>end_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著檢查起始與結束位址是否合法</li><li>如果合法，給定 <code>mem_size</code> 為結束位址 - 起始位址 - 2 倍的 <code>struct mem</code> 大小</li><li>也就是與 <code>mem_heap</code> 相同，一開始的記憶體設定為一大塊，頭與尾都要有一個 header</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* point to begin address of heap */</span>    heap_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>begin_align<span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"mem init, heap begin address 0x%x, size %d\n"</span><span class="token punctuation">,</span>                                <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>heap_ptr<span class="token punctuation">,</span> mem_size_aligned<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize the start of the heap */</span>    mem        <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span>heap_ptr<span class="token punctuation">;</span>    mem<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span>    mem<span class="token operator">-></span>next  <span class="token operator">=</span> mem_size_aligned <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span>    mem<span class="token operator">-></span>prev  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mem<span class="token operator">-></span>used  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著設定前面的 header：<ul><li>設定 magic 碼</li><li>下一塊為結尾的 header</li><li>上一塊為自己</li><li>以及沒有使用過</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>    <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token string">"INIT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* initialize the end of the heap */</span>    heap_end        <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>    heap_end<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span>    heap_end<span class="token operator">-></span>used  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    heap_end<span class="token operator">-></span>next  <span class="token operator">=</span> mem_size_aligned <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span>    heap_end<span class="token operator">-></span>prev  <span class="token operator">=</span> mem_size_aligned <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>    <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>heap_end<span class="token punctuation">,</span> <span class="token string">"INIT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著設定結尾的 header<ul><li>magic 碼</li><li>已被使用過</li><li>上一塊與下一塊指向自己</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">rt_sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> <span class="token string">"heap"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> RT_IPC_FLAG_FIFO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize the lowest-free pointer to the start of the heap */</span>    lfree <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span>heap_ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後初始化 semaphore</li><li>把這一塊掛上 <code>lfree</code></li></ul><hr><h2 id="分配記憶體"><a href="#分配記憶體" class="headerlink" title="分配記憶體"></a>分配記憶體</h2><h3 id="Code-rt-malloc"><a href="#Code-rt-malloc" class="headerlink" title="Code: rt_malloc"></a>Code: rt_malloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * Allocate a block of memory with a minimum of 'size' bytes. * * @param size is the minimum size of the requested block in bytes. * * @return pointer to allocated memory or NULL if no free memory was found. */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_malloc</span><span class="token punctuation">(</span>rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_size_t ptr<span class="token punctuation">,</span> ptr2<span class="token punctuation">;</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>mem<span class="token punctuation">,</span> <span class="token operator">*</span>mem2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 <code>size</code> 為 0，回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"malloc size %d, but align to %d\n"</span><span class="token punctuation">,</span>                                    size<span class="token punctuation">,</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"malloc size %d\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* alignment size */</span>    size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> mem_size_aligned<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"no memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向上對齊 <code>size</code>，如果超過可用大小，回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* every data block must be at least MIN_SIZE_ALIGNED long */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> MIN_SIZE_ALIGNED<span class="token punctuation">)</span>        size <span class="token operator">=</span> MIN_SIZE_ALIGNED<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果小於 min size，設為 min size</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* take memory semaphore */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>取得 semaphore</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>lfree <span class="token operator">-</span> heap_ptr<span class="token punctuation">;</span>         ptr <span class="token operator">&lt;</span> mem_size_aligned <span class="token operator">-</span> size<span class="token punctuation">;</span>         ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這裡特別的說明一下 for 迴圈：<br>首先起點是 <code>lfree</code> - <code>heap_ptr</code>，這裡代表最左邊的 free block 與 heap 起點的距離。 我們把 <code>heap_ptr</code> 看成是一個 <code>rt_uint8_t</code> 的陣列，也就是一格一個 byte 的陣列。 再來把 <code>lfree</code> - <code>heap_ptr</code> 看成是差量 (offset)，單位是 byte。 如此一來，<code>&amp;heap_ptr[ptr]</code> 就會是 <code>lfree</code> 的起始位置了。</p><p>再來我們看 <code>next</code>，在初始化的時候，<code>next</code> 是指向 0，這個意思是下一顆在陣列的第 0 個，也就是自己；所以 <code>next</code> 存放的是下一顆的 index，而不是起始位置。</p><p>最後來看上界，理論上我們需要從 lfree 找到最後一顆，實際上如果最後幾顆不夠大的話是不需要檢查的，所以這裡上界設在 <code>mem_size_aligned</code> - <code>size</code> 的意思就是說如果最後幾顆的大小總和不夠大，我們可以略過。</p><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>mem<span class="token operator">-></span>used<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span>ptr <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> size<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* mem is not used and at least perfect fit is possible:             * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>first fit，如果找到第一顆可用的就進去</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token keyword">if</span> <span class="token punctuation">(</span>mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span>ptr <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span> <span class="token operator">>=</span>                <span class="token punctuation">(</span>size <span class="token operator">+</span> SIZEOF_STRUCT_MEM <span class="token operator">+</span> MIN_SIZE_ALIGNED<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>又，如果這顆夠大到可以切割的話</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* (in addition to the above, we test if another struct heap_mem (SIZEOF_STRUCT_MEM) containing                 * at least MIN_SIZE_ALIGNED of data also fits in the 'user data space' of 'mem')                 * -> split large block, create empty remainder,                 * remainder must be large enough to contain MIN_SIZE_ALIGNED data: if                 * mem->next - (ptr + (2*SIZEOF_STRUCT_MEM)) == size,                 * struct heap_mem would fit in but no data between mem2 and mem2->next                 * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty                 *       region that couldn't hold data, but when mem->next gets freed,                 *       the 2 regions would be combined, resulting in more free memory                 */</span>                ptr2 <span class="token operator">=</span> ptr <span class="token operator">+</span> SIZEOF_STRUCT_MEM <span class="token operator">+</span> size<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* create mem2 struct */</span>                mem2       <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>ptr2<span class="token punctuation">]</span><span class="token punctuation">;</span>                mem2<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span>                mem2<span class="token operator">-></span>used <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                mem2<span class="token operator">-></span>next <span class="token operator">=</span> mem<span class="token operator">-></span>next<span class="token punctuation">;</span>                mem2<span class="token operator">-></span>prev <span class="token operator">=</span> ptr<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>                <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem2<span class="token punctuation">,</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定下一顆的資料，同時把 <code>next</code> 與 <code>prev</code> 接到正確位置</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* and insert it between mem and mem->next */</span>                mem<span class="token operator">-></span>next <span class="token operator">=</span> ptr2<span class="token punctuation">;</span>                mem<span class="token operator">-></span>used <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mem2<span class="token operator">-></span>next <span class="token operator">!=</span> mem_size_aligned <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem2<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span>prev <span class="token operator">=</span> ptr2<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著把原本那塊的 <code>next</code> 指向新的那塊，設為使用中</li><li>如果新的那塊 <code>next</code> 不是最後一塊，設定 <code>prev</code></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>                used_mem <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>max_mem <span class="token operator">&lt;</span> used_mem<span class="token punctuation">)</span>                    max_mem <span class="token operator">=</span> used_mem<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後更新 <code>used_mem</code> 與 <code>max_mem</code></li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* (a mem2 struct does no fit into the user data space of mem and mem->next will always                 * be used at this point: if not we have 2 unused structs in a row, plug_holes should have                 * take care of this).                 * -> near fit or excact fit: do not split, no mem2 creation                 * also can't move mem->next directly behind mem, since mem->next                 * will always be used at this point!                 */</span>                mem<span class="token operator">-></span>used <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>                used_mem <span class="token operator">+</span><span class="token operator">=</span> mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>max_mem <span class="token operator">&lt;</span> used_mem<span class="token punctuation">)</span>                    max_mem <span class="token operator">=</span> used_mem<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不可切割，只需設定使用中即可</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* set memory block magic */</span>            mem<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token string">"NONE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mem <span class="token operator">==</span> lfree<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* Find next free block after mem and update lowest free pointer */</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>lfree<span class="token operator">-></span>used <span class="token operator">&amp;&amp;</span> lfree <span class="token operator">!=</span> heap_end<span class="token punctuation">)</span>                    lfree <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>lfree<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lfree <span class="token operator">==</span> heap_end<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>lfree<span class="token operator">-></span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>視情況更新 <code>lfree</code></li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>mem <span class="token operator">+</span> SIZEOF_STRUCT_MEM <span class="token operator">+</span> size <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span> <span class="token operator">%</span> RT_ALIGN_SIZE <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>mem<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>RT_ALIGN_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span>                         <span class="token punctuation">(</span><span class="token string">"allocate memory at 0x%x, size: %d\n"</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span>mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_malloc_hook<span class="token punctuation">,</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* return the memory data except mem struct */</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>還鎖，並回傳找到的記憶體位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_malloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>沒找到一樣還鎖，並回傳 NULL</li></ul><hr><h3 id="Code-rt-realloc"><a href="#Code-rt-realloc" class="headerlink" title="Code: rt_realloc"></a>Code: rt_realloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>增長/縮減記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>*rmeme</code></th><th><code>newsize</code></th></tr></thead><tbody><tr><td>欲增長/縮減的記憶體位址</td><td>新的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will change the previously allocated memory block. * * @param rmem pointer to memory allocated by rt_malloc * @param newsize the required new size * * @return the changed memory block address */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>rmem<span class="token punctuation">,</span> rt_size_t newsize<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_size_t size<span class="token punctuation">;</span>    rt_size_t ptr<span class="token punctuation">,</span> ptr2<span class="token punctuation">;</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>mem<span class="token punctuation">,</span> <span class="token operator">*</span>mem2<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span>nmem<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* alignment size */</span>    newsize <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>newsize<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">></span> mem_size_aligned<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"realloc: out of memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向上對齊 size，如果：<ul><li>大於可用大小，回傳 NULL</li><li>等於 0，free 記憶體，回傳 NULL</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* allocate a new memory block */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rmem <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如原來的記憶體為空，直接 <code>malloc</code>，並回傳</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_ptr <span class="token operator">||</span>        <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">>=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* illegal memory */</span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rmem<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著取得鎖，檢查傳入的記憶體是否合法</li></ul><pre class="line-numbers language-c"><code class="language-c">    mem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">-</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">;</span>    size <span class="token operator">=</span> mem<span class="token operator">-></span>next <span class="token operator">-</span> ptr <span class="token operator">-</span> SIZEOF_STRUCT_MEM<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> newsize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* the size is the same as */</span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rmem<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找到記憶體塊的起始位址，算出 size，如果記憶體大小不需要變動，不做事，回傳原本的記憶體位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">+</span> SIZEOF_STRUCT_MEM <span class="token operator">+</span> MIN_SIZE <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* split memory block */</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>        used_mem <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        ptr2 <span class="token operator">=</span> ptr <span class="token operator">+</span> SIZEOF_STRUCT_MEM <span class="token operator">+</span> newsize<span class="token punctuation">;</span>        mem2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>ptr2<span class="token punctuation">]</span><span class="token punctuation">;</span>        mem2<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span>        mem2<span class="token operator">-></span>used <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mem2<span class="token operator">-></span>next <span class="token operator">=</span> mem<span class="token operator">-></span>next<span class="token punctuation">;</span>        mem2<span class="token operator">-></span>prev <span class="token operator">=</span> ptr<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>        <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem2<span class="token punctuation">,</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>        mem<span class="token operator">-></span>next <span class="token operator">=</span> ptr2<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mem2<span class="token operator">-></span>next <span class="token operator">!=</span> mem_size_aligned <span class="token operator">+</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem2<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span>prev <span class="token operator">=</span> ptr2<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可以切割，與上面的動作相同</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token function">plug_holes</span><span class="token punctuation">(</span>mem2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rmem<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-使用 <code>plug_holes</code> 來合併 free block</p><ul><li>還鎖，回傳更新後的記憶體位置</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* expand memory */</span>    nmem <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nmem <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* check memory */</span>    <span class="token punctuation">{</span>        <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>nmem<span class="token punctuation">,</span> rmem<span class="token punctuation">,</span> size <span class="token operator">&lt;</span> newsize <span class="token operator">?</span> size <span class="token punctuation">:</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nmem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_realloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不可切割，或是需要增長，直接要一塊 new size，釋放原本的記憶體</li><li>最後回傳新的記憶體位址</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>plug_holes</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>合併 free block</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*mem</code></th></tr></thead><tbody><tr><td>欲合併的記憶體位址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">plug_holes</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>mem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>nmem<span class="token punctuation">;</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>pmem<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">>=</span> heap_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mem<span class="token operator">-></span>used <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* plug hole forward */</span>    nmem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mem <span class="token operator">!=</span> nmem <span class="token operator">&amp;&amp;</span>        nmem<span class="token operator">-></span>used <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>nmem <span class="token operator">!=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* if mem->next is unused and not end of heap_ptr,         * combine mem and mem->next         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lfree <span class="token operator">==</span> nmem<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lfree <span class="token operator">=</span> mem<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mem<span class="token operator">-></span>next <span class="token operator">=</span> nmem<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>nmem<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span>prev <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可以與下一顆合併</li><li>檢查是否需要更新 <code>lfree</code></li><li>重新接上 <code>next</code> 與 <code>prev</code> (<code>next</code> 的 <code>prev</code>)</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* plug hole backward */</span>    pmem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem<span class="token operator">-></span>prev<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pmem <span class="token operator">!=</span> mem <span class="token operator">&amp;&amp;</span> pmem<span class="token operator">-></span>used <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* if mem->prev is unused, combine mem and mem->prev */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lfree <span class="token operator">==</span> mem<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lfree <span class="token operator">=</span> pmem<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pmem<span class="token operator">-></span>next <span class="token operator">=</span> mem<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>heap_ptr<span class="token punctuation">[</span>mem<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span>prev <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>pmem <span class="token operator">-</span> heap_ptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可以與上一顆合併，動作一樣</li></ul><hr><h3 id="Code-rt-calloc"><a href="#Code-rt-calloc" class="headerlink" title="Code: rt_calloc"></a>Code: rt_calloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求一段連續的記憶體</td><td>記憶體位址</td></tr></tbody></table><table><thead><tr><th><code>count</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的數量</td><td>一塊的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will contiguously allocate enough space for count objects * that are size bytes of memory each and returns a pointer to the allocated * memory. * * The allocated memory is filled with bytes of value zero. * * @param count number of objects to allocate * @param size size of the objects to allocate * * @return pointer to allocated memory / NULL pointer if there is an error */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_calloc</span><span class="token punctuation">(</span>rt_size_t count<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate 'count' objects of size 'size' */</span>    p <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>count <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* zero the memory */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token function">rt_memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_calloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>與 memheap 相同，一次要一塊 count 乘 size 的記憶體</li><li>清 0 並回傳起始位址</li></ul><hr><h2 id="釋放記憶體"><a href="#釋放記憶體" class="headerlink" title="釋放記憶體"></a>釋放記憶體</h2><p><i class="fa fa-code"></i> Code: <code>rt_free</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*rmem</code></th></tr></thead><tbody><tr><td>欲釋放的記憶體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will release the previously allocated memory block by * rt_malloc. The released memory block is taken back to system heap. * * @param rmem the address of memory which will be released */</span><span class="token keyword">void</span> <span class="token function">rt_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>rmem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> heap_mem <span class="token operator">*</span>mem<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rmem <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果需要釋放得記憶體為空，不做事</li></ul><pre class="line-numbers language-c"><code class="language-c">    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>rmem<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>RT_ALIGN_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">>=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_ptr <span class="token operator">&amp;&amp;</span>              <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_free_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_ptr <span class="token operator">||</span>        <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">>=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>heap_end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"illegal memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* Get the corresponding struct heap_mem ... */</span>    mem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> heap_mem <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">-</span> SIZEOF_STRUCT_MEM<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>檢查記憶體位址是否合法，並找到真正的記憶體區塊位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEM<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token string">"release memory 0x%x, size: %d\n"</span><span class="token punctuation">,</span>                  <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>rmem<span class="token punctuation">,</span>                  <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">(</span>mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* protect the heap from concurrent access */</span>    <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* ... which has to be in a used state ... */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mem<span class="token operator">-></span>used <span class="token operator">||</span> mem<span class="token operator">-></span>magic <span class="token operator">!=</span> HEAP_MAGIC<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"to free a bad data block:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_kprintf</span><span class="token punctuation">(</span><span class="token string">"mem: 0x%08x, used flag: %d, magic code: 0x%04x\n"</span><span class="token punctuation">,</span> mem<span class="token punctuation">,</span> mem<span class="token operator">-></span>used<span class="token punctuation">,</span> mem<span class="token operator">-></span>magic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mem<span class="token operator">-></span>used<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mem<span class="token operator">-></span>magic <span class="token operator">==</span> HEAP_MAGIC<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>要鎖，檢查是否是使用中的區塊，及是否屬於 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* ... and is now unused. */</span>    mem<span class="token operator">-></span>used  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mem<span class="token operator">-></span>magic <span class="token operator">=</span> HEAP_MAGIC<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMTRACE</span>    <span class="token function">rt_mem_setname</span><span class="token punctuation">(</span>mem<span class="token punctuation">,</span> <span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mem <span class="token operator">&lt;</span> lfree<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* the newly freed struct is now the lowest */</span>        lfree <span class="token operator">=</span> mem<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著設為可使用，及更新 <code>lfree</code></li></ul><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_MEM_STATS</span>    used_mem <span class="token operator">-</span><span class="token operator">=</span> <span class="token punctuation">(</span>mem<span class="token operator">-></span>next <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mem <span class="token operator">-</span> heap_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span>    <span class="token comment" spellcheck="true">/* finally, see if prev or next are free also */</span>    <span class="token function">plug_holes</span><span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap_sem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_free<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後合併記憶體塊，並還鎖</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;File: mem.c&lt;/p&gt;
&lt;/blockqu
      
    
    </summary>
    
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/categories/RT-Thread/"/>
    
    
      <category term="kernel" scheme="http://blog.lusw.dev/tags/kernel/"/>
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/tags/RT-Thread/"/>
    
      <category term="記憶體管理" scheme="http://blog.lusw.dev/tags/%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>RT-Thread Memory Heap</title>
    <link href="http://blog.lusw.dev/rt-memheap/"/>
    <id>http://blog.lusw.dev/rt-memheap/</id>
    <published>2018-12-05T07:42:29.000Z</published>
    <updated>2020-01-26T16:54:30.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: memheap.c</p></blockquote><ul><li>memheap 的管理方法（動態管理）:<ul><li>從 RAM 中要一塊記憶體</li><li>根據使用者需要的大小進行切割</li><li>剩下的以雙向鏈結的方式接起來，形成 free list</li></ul></li></ul><blockquote><p>使用此管理方式： <code>#define RT_USING_MEMHEAP_AS_HEAP</code></p></blockquote><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMHEAP</span><span class="token comment" spellcheck="true">/** * memory item on the heap */</span><span class="token keyword">struct</span> rt_memheap_item<span class="token punctuation">{</span>    rt_uint32_t             magic<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; magic number for memheap */</span>    <span class="token keyword">struct</span> rt_memheap      <span class="token operator">*</span>pool_ptr<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">/**&lt; point of pool */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>next<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/**&lt; next memheap item */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>prev<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/**&lt; prev memheap item */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>next_free<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/**&lt; next free memheap item */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>prev_free<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/**&lt; prev free memheap item */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Base structure of memory heap object */</span><span class="token keyword">struct</span> rt_memheap<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_object        parent<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">/**&lt; inherit from rt_object */</span>    <span class="token keyword">void</span>                   <span class="token operator">*</span>start_addr<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/**&lt; pool start address and size */</span>    rt_uint32_t             pool_size<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/**&lt; pool size */</span>    rt_uint32_t             available_size<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/**&lt; available size */</span>    rt_uint32_t             max_used_size<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/**&lt; maximum allocated size */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>block_list<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/**&lt; used block list */</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>free_list<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/**&lt; free block list */</span>    <span class="token keyword">struct</span> rt_memheap_item  free_header<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**&lt; free block list header */</span>    <span class="token keyword">struct</span> rt_semaphore     lock<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">/**&lt; semaphore lock */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>*start_addr</code> 指向可用的記憶體<br><br></li><li><code>pool_size</code> 代表總共可用的大小</li><li><code>available_size</code> 目前可用的大小</li><li><code>max_used_size</code> 已使用的歷史中，最大的使用大小<br><br></li><li><code>*block_list</code> 所有切割過的區塊（包含 header）<br><br></li><li><code>*free_list</code> 目前所有可用的區塊</li><li><code>*free_list</code> 的第一顆<br><br></li><li><code>lock</code> semaphore</li></ul><hr><h2 id="建立-memory-heap"><a href="#建立-memory-heap" class="headerlink" title="建立 memory heap"></a>建立 memory heap</h2><p><i class="fa fa-code"></i> Code: <code>rt_system_heap_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 memheap</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*begin_addr</code></th><th><code>*end_addr</code></th></tr></thead><tbody><tr><td>起始位址（欲分配的）</td><td>結束位址</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rt_system_heap_init</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>begin_addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>end_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* initialize a default heap in the system */</span>    <span class="token function">rt_memheap_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_heap<span class="token punctuation">,</span>                    <span class="token string">"heap"</span><span class="token punctuation">,</span>                    begin_addr<span class="token punctuation">,</span>                    <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>end_addr <span class="token operator">-</span> <span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span>begin_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將起始位置，大小，結構體傳入 <code>rt_memheap_init</code></li></ul><hr><p><i class="fa fa-code"></i> Code: <code>rt_memheap_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 memheap</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*memheap</code></th><th><code>*name</code></th><th><code>*start_addr</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>memheap 結構</td><td>名字</td><td>欲分配的記憶體起始位址</td><td>記憶體大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* * The initialized memory pool will be: * +-----------------------------------+--------------------------+ * | whole freed memory block          | Used Memory Block Tailer | * +-----------------------------------+--------------------------+ * * block_list --> whole freed memory block * * The length of Used Memory Block Tailer is 0, * which is prevents block merging across list */</span>rt_err_t <span class="token function">rt_memheap_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>memheap<span class="token punctuation">,</span>                         <span class="token keyword">const</span> <span class="token keyword">char</span>        <span class="token operator">*</span>name<span class="token punctuation">,</span>                         <span class="token keyword">void</span>              <span class="token operator">*</span>start_addr<span class="token punctuation">,</span>                         rt_uint32_t        size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>item<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>memheap <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize pool object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>memheap<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_Object_Class_MemHeap<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    memheap<span class="token operator">-></span>start_addr     <span class="token operator">=</span> start_addr<span class="token punctuation">;</span>    memheap<span class="token operator">-></span>pool_size      <span class="token operator">=</span> <span class="token function">RT_ALIGN_DOWN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    memheap<span class="token operator">-></span>available_size <span class="token operator">=</span> memheap<span class="token operator">-></span>pool_size <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    memheap<span class="token operator">-></span>max_used_size  <span class="token operator">=</span> memheap<span class="token operator">-></span>pool_size <span class="token operator">-</span> memheap<span class="token operator">-></span>available_size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先填入 <code>start_addr</code></li><li>向下對齊 <code>size</code></li><li>設定可用大小為 <code>size</code> 減掉 2 個 header</li><li>設定最大已使用大小為目前已使用的大小（即 2 倍的 header）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize the free list header */</span>    item            <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>memheap<span class="token operator">-></span>free_header<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span>magic     <span class="token operator">=</span> RT_MEMHEAP_MAGIC<span class="token punctuation">;</span>    item<span class="token operator">-></span>pool_ptr  <span class="token operator">=</span> memheap<span class="token punctuation">;</span>    item<span class="token operator">-></span>next      <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev      <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    item<span class="token operator">-></span>next_free <span class="token operator">=</span> item<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev_free <span class="token operator">=</span> item<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先初始化 free list：<ul><li>讓 item 指向 free list 的 header</li><li>設定 magic 碼</li><li>將 <code>pool_ptr</code> 指向 memheap 結構</li><li><code>next</code>、<code>prev</code> 指向 <code>NULL</code></li><li><code>next_free</code>、<code>prev_free</code> 指向自己</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set the free list to free list header */</span>    memheap<span class="token operator">-></span>free_list <span class="token operator">=</span> item<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>給定 free list</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize the first big memory block */</span>    item            <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>start_addr<span class="token punctuation">;</span>    item<span class="token operator">-></span>magic     <span class="token operator">=</span> RT_MEMHEAP_MAGIC<span class="token punctuation">;</span>    item<span class="token operator">-></span>pool_ptr  <span class="token operator">=</span> memheap<span class="token punctuation">;</span>    item<span class="token operator">-></span>next      <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev      <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    item<span class="token operator">-></span>next_free <span class="token operator">=</span> item<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev_free <span class="token operator">=</span> item<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著將整個 pool 設定為一個可用的 block<ul><li>讓 item 指向 起始位址</li><li>設定 magic 碼</li><li>將 <code>pool_ptr</code> 指向 memheap 結構</li><li><code>next</code>、<code>prev</code> 指向 <code>NULL</code></li><li><code>next_free</code>、<code>prev_free</code> 指向自己</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    item<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>                 <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>item <span class="token operator">+</span> memheap<span class="token operator">-></span>available_size <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    item<span class="token operator">-></span>prev <span class="token operator">=</span> item<span class="token operator">-></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>讓 next 與 prev 指到結尾的 header</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* block list header */</span>    memheap<span class="token operator">-></span>block_list <span class="token operator">=</span> item<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>給定 block_list</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* place the big memory block to free list */</span>    item<span class="token operator">-></span>next_free <span class="token operator">=</span> memheap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev_free <span class="token operator">=</span> memheap<span class="token operator">-></span>free_list<span class="token punctuation">;</span>    memheap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> item<span class="token punctuation">;</span>    memheap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free            <span class="token operator">=</span> item<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將 free list (item) 的 <code>next</code> 指向 <code>memheap-&gt;free_list-&gt;next_free</code>，也就是 free list</li><li><code>prev</code> 同上</li><li>將 free list (heap) 的 <code>next</code> 指向 <code>item</code></li><li><code>prev</code> 同上</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* move to the end of memory pool to build a small tailer block,     * which prevents block merging     */</span>    item <span class="token operator">=</span> item<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* it's a used memory block */</span>    item<span class="token operator">-></span>magic     <span class="token operator">=</span> RT_MEMHEAP_MAGIC <span class="token operator">|</span> RT_MEMHEAP_USED<span class="token punctuation">;</span>    item<span class="token operator">-></span>pool_ptr  <span class="token operator">=</span> memheap<span class="token punctuation">;</span>    item<span class="token operator">-></span>next      <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>start_addr<span class="token punctuation">;</span>    item<span class="token operator">-></span>prev      <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>start_addr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* not in free list */</span>    item<span class="token operator">-></span>next_free <span class="token operator">=</span> item<span class="token operator">-></span>prev_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定尾巴的 header<ul><li>讓 item 指向 free list 的 header</li><li>設定 magic 碼為<strong>使用過</strong>的</li><li>將 <code>pool_ptr</code> 指向 memheap 結構</li><li><code>next</code>、<code>prev</code> 指向起始位置</li><li><code>next_free</code>、<code>prev_free</code> 指向 <code>NULL</code></li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize semaphore lock */</span>    <span class="token function">rt_sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>memheap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> RT_IPC_FLAG_FIFO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token string">"memory heap: start addr 0x%08x, size %d, free list header 0x%08x\n"</span><span class="token punctuation">,</span>                  start_addr<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>memheap<span class="token operator">-></span>free_header<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_memheap_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後初始化 semaphore 並使用 FIFO</li></ul><hr><h2 id="刪除-memory-heap"><a href="#刪除-memory-heap" class="headerlink" title="刪除 memory heap"></a>刪除 memory heap</h2><p><i class="fa fa-code"></i> Code: <code>rt_memheap_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 memheap</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*heap</code></th></tr></thead><tbody><tr><td>欲刪除的 memheap</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">rt_err_t <span class="token function">rt_memheap_detach</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>heap<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Return a successful completion. */</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_memheap_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 <code>rt_object_detach</code> 刪除 semaphore 與 memheap</li></ul><hr><h2 id="分配記憶體"><a href="#分配記憶體" class="headerlink" title="分配記憶體"></a>分配記憶體</h2><h3 id="Code-rt-malloc"><a href="#Code-rt-malloc" class="headerlink" title="Code: rt_malloc"></a>Code: rt_malloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求一塊記憶體</td><td>取得的記憶體</td></tr></tbody></table><table><thead><tr><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_malloc</span><span class="token punctuation">(</span>rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* try to allocate in system heap */</span>    ptr <span class="token operator">=</span> <span class="token function">rt_memheap_alloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>_heap<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先嘗試從系統的 heap（<code>_heap</code>）要求記憶體（透過 <code>rt_memheap_alloc</code>）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rt_object <span class="token operator">*</span>object<span class="token punctuation">;</span>        <span class="token keyword">struct</span> rt_list_node <span class="token operator">*</span>node<span class="token punctuation">;</span>        <span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>heap<span class="token punctuation">;</span>        <span class="token keyword">struct</span> rt_object_information <span class="token operator">*</span>information<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* try to allocate on other memory heap */</span>        information <span class="token operator">=</span> <span class="token function">rt_object_get_information</span><span class="token punctuation">(</span>RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果失敗，嘗試從其他的 heap 要求</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>information <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>node  <span class="token operator">=</span> information<span class="token operator">-></span>object_list<span class="token punctuation">.</span>next<span class="token punctuation">;</span>             node <span class="token operator">!=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>information<span class="token operator">-></span>object_list<span class="token punctuation">)</span><span class="token punctuation">;</span>             node  <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            object <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> <span class="token keyword">struct</span> rt_object<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>            heap   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span><span class="token punctuation">)</span>object<span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* not allocate in the default system heap */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>heap <span class="token operator">==</span> <span class="token operator">&amp;</span>_heap<span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>跳過系統的 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">            ptr <span class="token operator">=</span> <span class="token function">rt_memheap_alloc</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_malloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一樣透過 <code>rt_memheap_alloc</code> 來完成</li><li>如果成功就跳出迴圈，最後回傳記憶體位址</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>rt_memheap_alloc</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求一塊記憶體</td><td>取得的記憶體</td></tr></tbody></table><table><thead><tr><th><code>*heap</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>目標 heap</td><td>欲要求的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_memheap_alloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>heap<span class="token punctuation">,</span> rt_uint32_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_err_t result<span class="token punctuation">;</span>    rt_uint32_t free_size<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>header_ptr<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>heap <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* align allocated size */</span>    size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">)</span>        size <span class="token operator">=</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先向上對齊 <code>size</code></li><li>如果小於 <code>RT_MEMHEAP_MINIALLOC</code> (12)，設定為 <code>RT_MEMHEAP_MINIALLOC</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"allocate %d on heap:%8.*s"</span><span class="token punctuation">,</span>                                    size<span class="token punctuation">,</span> RT_NAME_MAX<span class="token punctuation">,</span> heap<span class="token operator">-></span>parent<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> heap<span class="token operator">-></span>available_size<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* search on free list */</span>        free_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 heap 還夠使用，先將 <code>free_size</code> 設為 0</li><li><code>free_size</code> 代表我們目前找到的可用大小</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* lock memheap */</span>        result <span class="token operator">=</span> <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_set_errno</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著試著索取 semaphore</li><li>如果失敗，設定錯誤碼並回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* get the first free memory block */</span>        header_ptr <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>header_ptr <span class="token operator">!=</span> heap<span class="token operator">-></span>free_list <span class="token operator">&amp;&amp;</span> free_size <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get current freed memory block size */</span>            free_size <span class="token operator">=</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>header_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>free_size <span class="token operator">&lt;</span> size<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* move to next free memory block */</span>                header_ptr <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著從 free list 上一個一個找</li><li>使用 <em>first fit</em>，找到一個大魚的就退出迴圈</li><li><code>MEMITEM_SIZE(item)</code>：<code>((rt_uint32_t)item-&gt;next - (rt_uint32_t)item - RT_MEMHEAP_SIZE)</code></li><li>利用下一顆的位址減掉自己的位址取的總體大小，再減掉 header 的大小</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* determine if the memory is available. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>free_size <span class="token operator">>=</span> size<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* a block that satisfies the request has been found. */</span>            <span class="token comment" spellcheck="true">/* determine if the block needs to be split. */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>free_size <span class="token operator">>=</span> <span class="token punctuation">(</span>size <span class="token operator">+</span> RT_MEMHEAP_SIZE <span class="token operator">+</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>new_ptr<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* split the block. */</span>                new_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>                          <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>header_ptr<span class="token punctuation">)</span> <span class="token operator">+</span> size <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有成功找到（不是因為走完迴圈才往下）</li><li>且這塊大到可以再切一塊，切割這塊：<ul><li>從找到的那塊開始往後一個 <code>size</code> 與一個 <code>RT_MEMHEAP_SIZE</code> 作為新的 header</li></ul></li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">"split: block[0x%08x] nextm[0x%08x] prevm[0x%08x] to new[0x%08x]\n"</span><span class="token punctuation">,</span>                              header_ptr<span class="token punctuation">,</span>                              header_ptr<span class="token operator">-></span>next<span class="token punctuation">,</span>                              header_ptr<span class="token operator">-></span>prev<span class="token punctuation">,</span>                              new_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* mark the new block as a memory block and freed. */</span>                new_ptr<span class="token operator">-></span>magic <span class="token operator">=</span> RT_MEMHEAP_MAGIC<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* put the pool pointer into the new block. */</span>                new_ptr<span class="token operator">-></span>pool_ptr <span class="token operator">=</span> heap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 magic 碼</li><li>設定所屬 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* break down the block list */</span>                new_ptr<span class="token operator">-></span>prev          <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>                new_ptr<span class="token operator">-></span>next          <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next       <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將此 block 插入 <code>block_list</code></li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* remove header ptr from free list */</span>                header_ptr<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> header_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>prev_free<span class="token operator">-></span>next_free <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>從 free list 中移除找到的 block </li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* insert new_ptr to free list */</span>                new_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>                new_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token punctuation">;</span>                heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>                heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free            <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"new ptr: next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                                                new_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span>                                                new_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將分割好的 block 插入 free list</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* decrement the available byte count.  */</span>                heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">-</span>                                       size <span class="token operator">-</span>                                       RT_MEMHEAP_SIZE<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size <span class="token operator">></span> heap<span class="token operator">-></span>max_used_size<span class="token punctuation">)</span>                    heap<span class="token operator">-></span>max_used_size <span class="token operator">=</span> heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新 <code>available_size</code> 與 <code>max_used_size</code> (如果需要)</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* decrement the entire free size from the available bytes count. */</span>                heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">-</span> free_size<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size <span class="token operator">></span> heap<span class="token operator">-></span>max_used_size<span class="token punctuation">)</span>                    heap<span class="token operator">-></span>max_used_size <span class="token operator">=</span> heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果不能切割，一樣更新 <code>available_size</code> 與 <code>max_used_size</code> (如果需要)</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* remove header_ptr from free list */</span>                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">"one block: block[0x%08x], next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                              header_ptr<span class="token punctuation">,</span>                              header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span>                              header_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> header_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>prev_free<span class="token operator">-></span>next_free <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>從 free list 中移除找到的 block </li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* Mark the allocated block as not available. */</span>            header_ptr<span class="token operator">-></span>magic <span class="token operator">|</span><span class="token operator">=</span> RT_MEMHEAP_USED<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* release lock */</span>            <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>標記為使用中，釋放 semaphore</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* Return a memory address to the caller.  */</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                         <span class="token punctuation">(</span><span class="token string">"alloc mem: memory[0x%08x], heap[0x%08x], size: %d\n"</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>header_ptr <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">,</span>                          header_ptr<span class="token punctuation">,</span>                          size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>header_ptr <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後回傳 block 記憶體位址 + header</li><li>即回傳可用的區塊</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* release lock */</span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"allocate memory: failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Return the completion status.  */</span>    <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_memheap_alloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果找失敗，一樣釋放 semaphore</li><li>不論是找失敗，或是記憶體不足，皆回傳 NULL</li></ul><hr><h3 id="Code-rt-realloc"><a href="#Code-rt-realloc" class="headerlink" title="Code: rt_realloc"></a>Code: rt_realloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>重新要求記憶體（增長或縮減）</td><td>新分配完的記憶體塊</td></tr></tbody></table><table><thead><tr><th><code>*rmem</code></th><th><code>newsize</code></th></tr></thead><tbody><tr><td>欲重新分配的記憶體</td><td>新的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>rmem<span class="token punctuation">,</span> rt_size_t newsize<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>new_ptr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>header_ptr<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rmem <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果傳入的記憶體位置為空，直接 <code>rt_malloc(newsize)</code> 並回傳</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_free</span><span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 <code>newsize</code> 為 0，free 傳入的記憶體位置，回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* get old memory item */</span>    header_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>                 <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>rmem <span class="token operator">-</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>取得傳入的記憶體塊所屬的 header</li><li>malloc 時回傳的是可使用的起始位址，並不會包含 header，因此這裡減掉一個 header 的大小</li></ul><pre class="line-numbers language-c"><code class="language-c">    new_ptr <span class="token operator">=</span> <span class="token function">rt_memheap_realloc</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>pool_ptr<span class="token punctuation">,</span> rmem<span class="token punctuation">,</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>透過 <code>rt_memheap_realloc</code> 來完成</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_ptr <span class="token operator">==</span> RT_NULL <span class="token operator">&amp;&amp;</span> newsize <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* allocate memory block from other memheap */</span>        new_ptr <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果無法在原本的 heap 完成增長（或縮減），直接從別的 heap 要一塊 <code>newsize</code> 大的記憶體</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">if</span> <span class="token punctuation">(</span>new_ptr <span class="token operator">!=</span> RT_NULL <span class="token operator">&amp;&amp;</span> rmem <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rt_size_t oldsize<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* get the size of old memory block */</span>            oldsize <span class="token operator">=</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>header_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">></span> oldsize<span class="token punctuation">)</span>                <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>new_ptr<span class="token punctuation">,</span> rmem<span class="token punctuation">,</span> oldsize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>new_ptr<span class="token punctuation">,</span> rmem<span class="token punctuation">,</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_free</span><span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果最後有要成功，復原原本的資料</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">return</span> new_ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_realloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>最後回傳新的記憶體位址</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>rt_memheap_realloc</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>重新要求記憶體（增長或縮減）</td><td>新分配完的記憶體塊</td></tr></tbody></table><table><thead><tr><th><code>heap</code></th><th><code>*ptr</code></th><th><code>newsize</code></th></tr></thead><tbody><tr><td>目標 heap</td><td>欲重新分配的記憶體</td><td>新的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c">oid <span class="token operator">*</span><span class="token function">rt_memheap_realloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>heap<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> rt_size_t newsize<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_err_t result<span class="token punctuation">;</span>    rt_size_t oldsize<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>header_ptr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>new_ptr<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_memheap_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 <code>newsize</code> 為 0，free 並回傳 NULL</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* align allocated size */</span>    newsize <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>newsize<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">&lt;</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">)</span>        newsize <span class="token operator">=</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>向上對齊 <code>newsize</code></li><li>如果小於 <code>RT_MEMHEAP_MINIALLOC</code> (12)，設定為 <code>RT_MEMHEAP_MINIALLOC</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">rt_memheap_alloc</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果傳入的記憶體位置為空，直接 malloc newsize 的大小並回傳</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* get memory block header and get the size of memory block */</span>    header_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>                 <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>ptr <span class="token operator">-</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    oldsize <span class="token operator">=</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>header_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取得傳入的 block 所屬的 header</li><li>一併計算這塊的大小</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* re-allocate memory */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">></span> oldsize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token operator">*</span>new_ptr<span class="token punctuation">;</span>        <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>next_ptr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* lock memheap */</span>        result <span class="token operator">=</span> <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_set_errno</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果需要增長記憶體，先取得 semaphore</li></ul><pre class="line-numbers language-c"><code class="language-c">        next_ptr <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* header_ptr should not be the tail */</span>        <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>next_ptr <span class="token operator">></span> header_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* check whether the following free space is enough to expand */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RT_MEMHEAP_IS_USED</span><span class="token punctuation">(</span>next_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rt_int32_t nextsize<span class="token punctuation">;</span>            nextsize <span class="token operator">=</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>next_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>next_ptr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先判斷下一顆可不可用</li></ul><pre class="line-numbers language-c"><code class="language-c">            <span class="token comment" spellcheck="true">/* Here is the ASCII art of the situation that we can make use of             * the next free node without alloc/memcpy, |*| is the control             * block:             *             *      oldsize           free node             * |*|-----------|*|----------------------|*|             *         newsize          >= minialloc             * |*|----------------|*|-----------------|*|             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextsize <span class="token operator">+</span> oldsize <span class="token operator">></span> newsize <span class="token operator">+</span> RT_MEMHEAP_MINIALLOC<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* decrement the entire free size from the available bytes count. */</span>                heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">-</span> <span class="token punctuation">(</span>newsize <span class="token operator">-</span> oldsize<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size <span class="token operator">></span> heap<span class="token operator">-></span>max_used_size<span class="token punctuation">)</span>                    heap<span class="token operator">-></span>max_used_size <span class="token operator">=</span> heap<span class="token operator">-></span>pool_size <span class="token operator">-</span> heap<span class="token operator">-></span>available_size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可用，而且下一顆足夠分割出一塊新的 block</li><li>更新 <code>available_size</code> 與 <code>max_used_size</code> (如果需要)</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* remove next_ptr from free list */</span>                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">"remove block: block[0x%08x], next_free 0x%08x, prev_free 0x%08x"</span><span class="token punctuation">,</span>                              next_ptr<span class="token punctuation">,</span>                              next_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span>                              next_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> next_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>prev_free<span class="token operator">-></span>next_free <span class="token operator">=</span> next_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> next_ptr<span class="token operator">-></span>prev<span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> next_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>從 free list 移除舊的下一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* build a new one on the right place */</span>                next_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>ptr <span class="token operator">+</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>重新定指新的下一顆（傳入的起始位址加上 <code>newsize</code>）</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">"new free block: block[0x%08x] nextm[0x%08x] prevm[0x%08x]"</span><span class="token punctuation">,</span>                              next_ptr<span class="token punctuation">,</span>                              next_ptr<span class="token operator">-></span>next<span class="token punctuation">,</span>                              next_ptr<span class="token operator">-></span>prev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* mark the new block as a memory block and freed. */</span>                next_ptr<span class="token operator">-></span>magic <span class="token operator">=</span> RT_MEMHEAP_MAGIC<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* put the pool pointer into the new block. */</span>                next_ptr<span class="token operator">-></span>pool_ptr <span class="token operator">=</span> heap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 magic 碼</li><li>設定所屬 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">                next_ptr<span class="token operator">-></span>prev          <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>next          <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> next_ptr<span class="token punctuation">;</span>                header_ptr<span class="token operator">-></span>next       <span class="token operator">=</span> next_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>插入 block list</li></ul><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* insert next_ptr to free list */</span>                next_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>                next_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token punctuation">;</span>                heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> next_ptr<span class="token punctuation">;</span>                heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free            <span class="token operator">=</span> next_ptr<span class="token punctuation">;</span>                <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"new ptr: next_free 0x%08x, prev_free 0x%08x"</span><span class="token punctuation">,</span>                                                next_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span>                                                next_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入 free list</p><pre class="line-numbers language-c"><code class="language-c">                <span class="token comment" spellcheck="true">/* release lock */</span>                <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>釋放 semaphore 並回傳更新後的記憶體位址</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* release lock */</span>        <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* re-allocate a memory block */</span>        new_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">rt_memheap_alloc</span><span class="token punctuation">(</span>heap<span class="token punctuation">,</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>new_ptr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>new_ptr<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> oldsize <span class="token operator">&lt;</span> newsize <span class="token operator">?</span> oldsize <span class="token punctuation">:</span> newsize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_memheap_free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> new_ptr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果下一顆不夠大，重新在原本的 heap 上要一塊 <code>newsize</code> 大的記憶體</li><li>成功的話還原資料，並釋放原本的記憶體 </li><li>回傳新的記憶體位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* don't split when there is less than one node space left */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newsize <span class="token operator">+</span> RT_MEMHEAP_SIZE <span class="token operator">+</span> RT_MEMHEAP_MINIALLOC <span class="token operator">>=</span> oldsize<span class="token punctuation">)</span>        <span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果是需要縮減，且縮減後剩下的大小不足以切成一塊</li><li>什麼事都不做，直接回傳原本的位址</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* lock memheap */</span>    result <span class="token operator">=</span> <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_set_errno</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以分割的話先取得 semaphore</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* split the block. */</span>    new_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>              <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>header_ptr<span class="token punctuation">)</span> <span class="token operator">+</span> newsize <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>定址新的 block</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                 <span class="token punctuation">(</span><span class="token string">"split: block[0x%08x] nextm[0x%08x] prevm[0x%08x] to new[0x%08x]\n"</span><span class="token punctuation">,</span>                  header_ptr<span class="token punctuation">,</span>                  header_ptr<span class="token operator">-></span>next<span class="token punctuation">,</span>                  header_ptr<span class="token operator">-></span>prev<span class="token punctuation">,</span>                  new_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* mark the new block as a memory block and freed. */</span>    new_ptr<span class="token operator">-></span>magic <span class="token operator">=</span> RT_MEMHEAP_MAGIC<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* put the pool pointer into the new block. */</span>    new_ptr<span class="token operator">-></span>pool_ptr <span class="token operator">=</span> heap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定 magic 碼</li><li>設定所屬 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* break down the block list */</span>    new_ptr<span class="token operator">-></span>prev          <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>    new_ptr<span class="token operator">-></span>next          <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>    header_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>    header_ptr<span class="token operator">-></span>next       <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>插入至 block list</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* determine if the block can be merged with the next neighbor. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RT_MEMHEAP_IS_USED</span><span class="token punctuation">(</span>new_ptr<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>free_ptr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* merge block with next neighbor. */</span>        free_ptr <span class="token operator">=</span> new_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>        heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">-</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>free_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果新的 block 下一顆未使用，即可合併</li><li>先將可用大小減掉下一顆的大小，待會會加回來</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"merge: right node 0x%08x, next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                      header_ptr<span class="token punctuation">,</span> header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span> header_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        free_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>        new_ptr<span class="token operator">-></span>next   <span class="token operator">=</span> free_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>從 block list 移除下一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* remove free ptr from free list */</span>        free_ptr<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> free_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">;</span>        free_ptr<span class="token operator">-></span>prev_free<span class="token operator">-></span>next_free <span class="token operator">=</span> free_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>從 free list 移除下一顆，完成合併</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* insert the split block to free list */</span>    new_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>    new_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token punctuation">;</span>    heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>    heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free            <span class="token operator">=</span> new_ptr<span class="token punctuation">;</span>    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"new free ptr: next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                                    new_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span>                                    new_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>無論下一顆是否可以合併，都把新的 block 插入 free list</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* increment the available byte count.  */</span>    heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">+</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>new_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* release lock */</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* return the old memory block */</span>    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_memheap_realloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新可用大小，並釋放 semaphore</li><li>回傳更新後的記憶體位址</li></ul><hr><h3 id="Code-rt-calloc"><a href="#Code-rt-calloc" class="headerlink" title="Code: rt_calloc"></a>Code: rt_calloc</h3><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>要求多個連續的記憶體</td><td>第一塊的位址</td></tr></tbody></table><table><thead><tr><th><code>count</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>欲要求的數量</td><td>欲要求的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_calloc</span><span class="token punctuation">(</span>rt_size_t count<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    rt_size_t total_size<span class="token punctuation">;</span>    total_size <span class="token operator">=</span> count <span class="token operator">*</span> size<span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span>total_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* clean memory */</span>        <span class="token function">rt_memset</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> total_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_calloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>即要求一塊 <code>count * size</code> 大的記憶體</li></ul><hr><h2 id="釋放記憶體"><a href="#釋放記憶體" class="headerlink" title="釋放記憶體"></a>釋放記憶體</h2><p><i class="fa fa-code"></i> Code: <code>rt_free</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放一塊記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*rmem</code></th></tr></thead><tbody><tr><td>欲釋放的記憶體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rt_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>rmem<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">rt_memheap_free</span><span class="token punctuation">(</span>rmem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_free<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>透過 <code>rt_memheap_free</code> 完成</li></ul><hr><p><i class="fa fa-code"></i> Code: <code>rt_memheap_free</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放一塊記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*ptr</code></th></tr></thead><tbody><tr><td>欲釋放的記憶體</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rt_memheap_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_err_t result<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap <span class="token operator">*</span>heap<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span>header_ptr<span class="token punctuation">,</span> <span class="token operator">*</span>new_ptr<span class="token punctuation">;</span>    rt_uint32_t insert_header<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* NULL check */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果傳入 NULL，什麼事都不用做</li><li><code>return</code> 退出副程式</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set initial status as OK */</span>    insert_header <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    new_ptr       <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    header_ptr    <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_memheap_item <span class="token operator">*</span><span class="token punctuation">)</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>ptr <span class="token operator">-</span> RT_MEMHEAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>初始化一些參數，並找到傳入的 block 所屬的 header</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"free memory: memory[0x%08x], block[0x%08x]\n"</span><span class="token punctuation">,</span>                                    ptr<span class="token punctuation">,</span> header_ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* check magic */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>magic <span class="token operator">&amp;</span> RT_MEMHEAP_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> RT_MEMHEAP_MAGIC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>magic <span class="token operator">&amp;</span> RT_MEMHEAP_USED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* check whether this block of memory has been over-written. */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>next<span class="token operator">-></span>magic <span class="token operator">&amp;</span> RT_MEMHEAP_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> RT_MEMHEAP_MAGIC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get pool ptr */</span>    heap <span class="token operator">=</span> header_ptr<span class="token operator">-></span>pool_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定址 heap</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>heap<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemHeap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* lock memheap */</span>    result <span class="token operator">=</span> <span class="token function">rt_sem_take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_WAITING_FOREVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_set_errno</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先取得 semaphore</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* Mark the memory as available. */</span>    header_ptr<span class="token operator">-></span>magic <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span>RT_MEMHEAP_USED<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Adjust the available number of bytes. */</span>    heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">+</span> <span class="token function">MEMITEM_SIZE</span><span class="token punctuation">(</span>header_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將使用中的標記清除，更新可用大小</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* Determine if the block can be merged with the previous neighbor. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RT_MEMHEAP_IS_USED</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>prev<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"merge: left node 0x%08x\n"</span><span class="token punctuation">,</span>                                        header_ptr<span class="token operator">-></span>prev<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* adjust the available number of bytes. */</span>        heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可以往前合併，更新可用大小（加一個 header 的大小）</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* yes, merge block with previous neighbor. */</span>        <span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>prev<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token operator">-></span>prev <span class="token operator">=</span> header_ptr<span class="token operator">-></span>prev<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>從 block list 移除此 block</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* move header pointer to previous. */</span>        header_ptr <span class="token operator">=</span> header_ptr<span class="token operator">-></span>prev<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* don't insert header to free list */</span>        insert_header <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重新定址 <code>header_ptr</code></li><li>設定 <code>insert_header</code> 為 0，表示待會不需要將此 block 插回 free list（現在此 block 是與前一塊合併的，已經在 free list 上了）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* determine if the block can be merged with the next neighbor. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">RT_MEMHEAP_IS_USED</span><span class="token punctuation">(</span>header_ptr<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* adjust the available number of bytes. */</span>        heap<span class="token operator">-></span>available_size <span class="token operator">=</span> heap<span class="token operator">-></span>available_size <span class="token operator">+</span> RT_MEMHEAP_SIZE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果可以往前合併，更新可用大小（加一個 header 的大小）</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* merge block with next neighbor. */</span>        new_ptr <span class="token operator">=</span> header_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"merge: right node 0x%08x, next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                      new_ptr<span class="token punctuation">,</span> new_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span> new_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        new_ptr<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>        header_ptr<span class="token operator">-></span>next    <span class="token operator">=</span> new_ptr<span class="token operator">-></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>定址下一塊，並從 block list 移除下一塊</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* remove new ptr from free list */</span>        new_ptr<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> new_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">;</span>        new_ptr<span class="token operator">-></span>prev_free<span class="token operator">-></span>next_free <span class="token operator">=</span> new_ptr<span class="token operator">-></span>next_free<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一併從 free list 中移除</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>insert_header<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* no left merge, insert to free list */</span>        header_ptr<span class="token operator">-></span>next_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token punctuation">;</span>        header_ptr<span class="token operator">-></span>prev_free <span class="token operator">=</span> heap<span class="token operator">-></span>free_list<span class="token punctuation">;</span>        heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free<span class="token operator">-></span>prev_free <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>        heap<span class="token operator">-></span>free_list<span class="token operator">-></span>next_free            <span class="token operator">=</span> header_ptr<span class="token punctuation">;</span>        <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_MEMHEAP<span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">"insert to free list: next_free 0x%08x, prev_free 0x%08x\n"</span><span class="token punctuation">,</span>                      header_ptr<span class="token operator">-></span>next_free<span class="token punctuation">,</span> header_ptr<span class="token operator">-></span>prev_free<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果需要，插回 free list 上</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* release lock */</span>    <span class="token function">rt_sem_release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>heap<span class="token operator">-></span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_memheap_free<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後釋放 semaphore</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;File: memheap.c&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/categories/RT-Thread/"/>
    
    
      <category term="kernel" scheme="http://blog.lusw.dev/tags/kernel/"/>
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/tags/RT-Thread/"/>
    
      <category term="記憶體管理" scheme="http://blog.lusw.dev/tags/%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86/"/>
    
      <category term="Memory Heap" scheme="http://blog.lusw.dev/tags/Memory-Heap/"/>
    
  </entry>
  
  <entry>
    <title>RT-Thread Memory Pool</title>
    <link href="http://blog.lusw.dev/rt-mem/"/>
    <id>http://blog.lusw.dev/rt-mem/</id>
    <published>2018-11-29T03:24:59.000Z</published>
    <updated>2020-01-26T16:54:30.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ul><li>分配記憶體的時間需固定，而且可確定（可預測）的</li><li>分配記憶體同時也要盡量避免碎片化，才能減少系統需重啟的次數</li><li>RT-Thread 使用了靜態與動態管理，其中動態又分為小記憶體管理，與大記憶體管理（SLAB)</li></ul><hr><blockquote><p>File: mempool.c</p></blockquote><ul><li>mempool 的管理方法（靜態管理）:<ul><li>從 RAM 中要一塊記憶體</li><li>將此記憶體切成<strong>固定大小</strong>的區塊</li><li>以間接定址的方式接起來，形成 free list</li></ul></li></ul><blockquote><p>使用此管理方式： <code>#define RT_USING_MEMPOOL</code></p></blockquote><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MEMPOOL</span><span class="token comment" spellcheck="true">/** * Base structure of Memory pool object */</span><span class="token keyword">struct</span> rt_mempool<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_object parent<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">/**&lt; inherit from rt_object */</span>    <span class="token keyword">void</span>            <span class="token operator">*</span>start_address<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">/**&lt; memory pool start */</span>    rt_size_t        size<span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">/**&lt; size of memory pool */</span>    rt_size_t        block_size<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; size of memory blocks */</span>    rt_uint8_t      <span class="token operator">*</span>block_list<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; memory blocks list */</span>    rt_size_t        block_total_count<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/**&lt; numbers of memory block */</span>    rt_size_t        block_free_count<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">/**&lt; numbers of free memory block */</span>    rt_list_t        suspend_thread<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/**&lt; threads pended on this resource */</span>    rt_size_t        suspend_thread_count<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/**&lt; numbers of thread pended on this resource */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span>rt_mp_t<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我們從文本的圖來解釋結構：<br><img src="https://i.imgur.com/9KWhnUY.png" alt="memory pool example" title="memory pool example"></p><ul><li><code>start_address</code> 為每個 mempool 的起始位置，此圖為例則為<em>mempool 1</em> 的起始位置</li><li><code>size</code> 為 mempool 的大小，此圖為例則為<em>mempool 1</em> 的大小（灰色區塊）<br><br></li><li><code>block_size</code> 為由 mempool 產出的空閒鏈表中，每一塊的大小，以<em>mempool 1</em> 為例，則為 32k</li><li><code>block_list</code> 為空閒鏈表，此圖為例則為<em>mempool 1</em> 旁邊的鏈結<br><br></li><li><code>block_total_count</code> 為空閒鏈表創建時的總塊數，以<em>mempool 1</em> 為例，則為 128</li><li><code>block_free_count</code> 為為空閒鏈表現在可用的總塊數<br><br></li><li><code>suspend_thread</code> 則為等待隊伍，此圖為例為最右邊的鏈結</li><li><code>suspend_thread_count</code> 則為等待隊伍的總排隊數，以此圖為例為 3</li></ul><hr><h2 id="建立-memory-pool"><a href="#建立-memory-pool" class="headerlink" title="建立 memory pool"></a>建立 memory pool</h2><ul><li>建立 memory pool 的方法一樣也可分為靜態的與動態的</li><li>這裡的動態是指從原先記憶體 heap 的區塊拿取記憶體</li></ul><h3 id="動態"><a href="#動態" class="headerlink" title="動態"></a>動態</h3><p><i class="fa fa-code"></i> Code: <code>rt_mp_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 mempool（使用 heap）</td><td>mempool</td></tr></tbody></table><table><thead><tr><th><code>*name</code></th><th><code>block_count</code></th><th><code>block_size</code></th></tr></thead><tbody><tr><td>名字</td><td>要切割的總塊數</td><td>一塊 free block 的大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will create a mempool object and allocate the memory pool from * heap. * * @param name the name of memory pool * @param block_count the count of blocks in memory pool * @param block_size the size for each block * * @return the created mempool object */</span>rt_mp_t <span class="token function">rt_mp_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>                     rt_size_t   block_count<span class="token punctuation">,</span>                     rt_size_t   block_size<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_uint8_t <span class="token operator">*</span>block_ptr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span>mp<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_size_t offset<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate object */</span>    mp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">rt_object_allocate</span><span class="token punctuation">(</span>RT_Object_Class_MemPool<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate object failed */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mp <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先一樣先從 heap 取一塊記憶體作為 mempool 使用</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize memory pool */</span>    block_size     <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_size <span class="token operator">=</span> block_size<span class="token punctuation">;</span>    mp<span class="token operator">-></span>size       <span class="token operator">=</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> block_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate memory */</span>    mp<span class="token operator">-></span>start_address <span class="token operator">=</span> <span class="token function">rt_malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>                                  block_count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token operator">-></span>start_address <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* no memory, delete memory pool object */</span>        <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著對齊 <code>block_size</code> 後填入結構中，一併計算 mempool 的大小</li><li>並從 heap 中取出一塊待會做成 free list</li></ul><pre class="line-numbers language-c"><code class="language-c">    mp<span class="token operator">-></span>block_total_count <span class="token operator">=</span> block_count<span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_free_count  <span class="token operator">=</span> mp<span class="token operator">-></span>block_total_count<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize suspended thread list */</span>    <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>填入總數，建立等待鏈</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize free block list */</span>    block_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mp<span class="token operator">-></span>start_address<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> mp<span class="token operator">-></span>block_total_count<span class="token punctuation">;</span> offset <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> offset <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">=</span> block_ptr <span class="token operator">+</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> <span class="token punctuation">(</span>offset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_list <span class="token operator">=</span> block_ptr<span class="token punctuation">;</span>    <span class="token keyword">return</span> mp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後製作 free list：<ul><li>一個 free block 分成兩部分：前 8-bit (rt_uint8_t *）與一個 block_size</li><li>前 8-bit 存放下一個 free block 的位置</li></ul></li></ul><hr><h3 id="靜態"><a href="#靜態" class="headerlink" title="靜態"></a>靜態</h3><ul><li>多傳了兩個參數 <code>size</code> 與 <code>*start</code></li></ul><p><i class="fa fa-code"></i> Code: <code>rt_mp_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 mempool</td><td><code>RT_EOK</code></td></tr></tbody></table><p>| <code>*mp</code> | <code>*name</code> | <code>*start</code> | <code>size</code> | <code>block_size</code> |<br>| ——- | ————- | ———– |<br>| 結構位址 | 名字 | 所要使用的記憶體位址 | mempool 大小 | 一塊 free block 的大小 |</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will initialize a memory pool object, normally which is used * for static object. * * @param mp the memory pool object * @param name the name of memory pool * @param start the star address of memory pool * @param size the total size of memory pool * @param block_size the size for each block * * @return RT_EOK */</span>rt_err_t <span class="token function">rt_mp_init</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span>mp<span class="token punctuation">,</span>                    <span class="token keyword">const</span> <span class="token keyword">char</span>        <span class="token operator">*</span>name<span class="token punctuation">,</span>                    <span class="token keyword">void</span>              <span class="token operator">*</span>start<span class="token punctuation">,</span>                    rt_size_t          size<span class="token punctuation">,</span>                    rt_size_t          block_size<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_uint8_t <span class="token operator">*</span>block_ptr<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_size_t offset<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mp <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_Object_Class_MemPool<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize memory pool */</span>    mp<span class="token operator">-></span>start_address <span class="token operator">=</span> start<span class="token punctuation">;</span>    mp<span class="token operator">-></span>size <span class="token operator">=</span> <span class="token function">RT_ALIGN_DOWN</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* align the block size */</span>    block_size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_size <span class="token operator">=</span> block_size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可直接用 <code>rt_object_init</code> 初始化物件</li><li>同時用 <code>RT_ALIGN_DOWN</code> 對齊 size </li><li>填入 <code>block_size</code></li></ul><p><code>RT_ALIGN_DOWN</code> v.s. <code>RT_ALIGN</code></p><ul><li>當傳入 (13,4) 時：</li><li><code>RT_ALIGN_DOWN</code> 回傳 12，也就是在不超過 13 中，4 的倍數中最大的</li><li><code>RT_ALIGN</code> 回傳 16，也就是在大於等於 13 中，4 的倍數中最小的</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* align to align size byte */</span>    mp<span class="token operator">-></span>block_total_count <span class="token operator">=</span> mp<span class="token operator">-></span>size <span class="token operator">/</span> <span class="token punctuation">(</span>mp<span class="token operator">-></span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_free_count  <span class="token operator">=</span> mp<span class="token operator">-></span>block_total_count<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>接著手動算出 block 的總數</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* initialize suspended thread list */</span>    <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize free block list */</span>    block_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mp<span class="token operator">-></span>start_address<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;</span> mp<span class="token operator">-></span>block_total_count<span class="token punctuation">;</span> offset <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> offset <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span>            <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> <span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> <span class="token punctuation">(</span>offset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>block_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span>        RT_NULL<span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_list <span class="token operator">=</span> block_ptr<span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他的動作皆相同</li></ul><hr><h2 id="刪除-memory-pool"><a href="#刪除-memory-pool" class="headerlink" title="刪除 memory pool"></a>刪除 memory pool</h2><h3 id="動態-1"><a href="#動態-1" class="headerlink" title="動態"></a>動態</h3><p><i class="fa fa-code"></i> Code: <code>rt_mp_delete</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 mempool（使用 heap）</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mp</code></th></tr></thead><tbody><tr><td>欲刪除的 mempool</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will delete a memory pool and release the object memory. * * @param mp the memory pool object * * @return RT_EOK */</span>rt_err_t <span class="token function">rt_mp_delete</span><span class="token punctuation">(</span>rt_mp_t mp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mp <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* wake up all suspended threads */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* get next suspend thread */</span>        thread <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">struct</span> rt_thread<span class="token punctuation">,</span> tlist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* set error code to RT_ERROR */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>當要把 mempool 刪除前，先將正在等待分配記憶體的 thread 一個一個叫醒</li><li>叫醒前，先將錯誤碼改成 <code>ERROR</code></li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/*         * resume thread         * In rt_thread_resume function, it will remove current thread from         * suspend list         */</span>        <span class="token function">rt_thread_resume</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著透過 <code>rt_thread_resume</code> 叫醒 thread</li></ul><p>從等待鏈上移出的動作，在 <code>rt_thread_resume</code> 中會實現。<br>（<i class="fa fa-code"></i> code in <a href="/2018/11/19/rt-thread-thread#暫停、復原-thread">RT-Thread Thread</a>）</p><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* decrease suspended thread count */</span>        mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後更新 <code>suspend_thread_count</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* release allocated room */</span>    <span class="token function">rt_free</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>start_address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* detach object */</span>    <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>叫醒完，free 掉建立 mempool 時所要的記憶體</li><li>再透過 <code>rt_object_delete</code> 刪除</li></ul><hr><h3 id="靜態-1"><a href="#靜態-1" class="headerlink" title="靜態"></a>靜態</h3><p><i class="fa fa-code"></i> Code: <code>rt_mp_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 mempool</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>*mp</code></th></tr></thead><tbody><tr><td>欲刪除的 mempool</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will detach a memory pool from system object management. * * @param mp the memory pool object * * @return RT_EOK */</span>rt_err_t <span class="token function">rt_mp_detach</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span>mp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mp <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MemPool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* wake up all suspended threads */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* get next suspend thread */</span>        thread <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">.</span>next<span class="token punctuation">,</span> <span class="token keyword">struct</span> rt_thread<span class="token punctuation">,</span> tlist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* set error code to RT_ERROR */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * resume thread         * In rt_thread_resume function, it will remove current thread from         * suspend list         */</span>        <span class="token function">rt_thread_resume</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* decrease suspended thread count */</span>        mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* detach object */</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果是靜態的，就不需要 free</li></ul><hr><h2 id="Code-allocate"><a href="#Code-allocate" class="headerlink" title="Code: allocate"></a>Code: allocate</h2><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>分配記憶體</td><td>一塊 free block</td></tr></tbody></table><table><thead><tr><th><code>mp</code></th><th><code>time</code></th></tr></thead><tbody><tr><td>mempool</td><td>等待時間</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will allocate a block from memory pool * * @param mp the memory pool object * @param time the waiting time * * @return the allocated memory block or RT_NULL on allocated failed */</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">rt_mp_alloc</span><span class="token punctuation">(</span>rt_mp_t mp<span class="token punctuation">,</span> rt_int32_t time<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_uint8_t <span class="token operator">*</span>block_ptr<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    rt_uint32_t before_sleep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mp<span class="token operator">-></span>block_free_count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* memory block is unavailable. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* enable interrupt */</span>            <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_set_errno</span><span class="token punctuation">(</span><span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果目前無法取得記憶體，且等待時間為 0，回傳 NULL，並設置錯誤碼為 TIMEOUT</li></ul><pre class="line-numbers language-c"><code class="language-c">        RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* need suspend thread */</span>        <span class="token function">rt_thread_suspend</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_list_insert_after</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>tlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mp<span class="token operator">-></span>suspend_thread_count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get the start tick of timer */</span>            before_sleep <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* init thread timer and start it */</span>            <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                             RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span>                             <span class="token operator">&amp;</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果需要等待，啟動一個 timer</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* do a schedule */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>並做一次調度</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>            <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            time <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> before_sleep<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後更新 time 值</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* memory block is available. decrease the free block counter */</span>    mp<span class="token operator">-></span>block_free_count<span class="token operator">--</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果可以要記憶體，更新 <code>block_free_count</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* get block from block list */</span>    block_ptr <span class="token operator">=</span> mp<span class="token operator">-></span>block_list<span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>block_ptr <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>取得第一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* Setup the next free node. */</span>    mp<span class="token operator">-></span>block_list <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>block_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>並將 free list 往後一顆</li><li><code>block_list</code> 是使用間接定址，前 8-bit 是下一顆的位置</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* point to memory pool */</span>    <span class="token operator">*</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>block_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>接著將前 8-bit 指向原來的 mempool</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_mp_alloc_hook<span class="token punctuation">,</span>                        <span class="token punctuation">(</span>mp<span class="token punctuation">,</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>block_ptr <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_alloc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>最後回傳取得的 free block</p></li><li><p>注意這裡回傳的是 <code>block_ptr + 8</code>，也就是真正可以使用的位址</p></li><li><p>如果要尋找這個 block 所屬的 mempool 則需要 -8。</p></li></ul><hr><h2 id="Code-free"><a href="#Code-free" class="headerlink" title="Code: free"></a>Code: free</h2><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>釋放記憶體</td><td>void</td></tr></tbody></table><table><thead><tr><th><code>*block</code></th></tr></thead><tbody><tr><td>所要釋放的記憶體塊</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will release a memory block * * @param block the address of memory block to be released */</span><span class="token keyword">void</span> <span class="token function">rt_mp_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>block<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span>block_ptr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span>mp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t level<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get the control block of pool which the block belongs to */</span>    block_ptr <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>block <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mp        <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mempool <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>block_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先取得所屬的 mempool（-8）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_mp_free_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span>mp<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    level <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* increase the free block count */</span>    mp<span class="token operator">-></span>block_free_count <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* link the block into the block list */</span>    <span class="token operator">*</span>block_ptr <span class="token operator">=</span> mp<span class="token operator">-></span>block_list<span class="token punctuation">;</span>    mp<span class="token operator">-></span>block_list <span class="token operator">=</span> <span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>block_ptr<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新 <code>block_free_count</code></li><li>接著定址到 free list，重新指定 block list</li><li>也就是將此 block 插到第一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* get the suspended thread */</span>        thread <span class="token operator">=</span> <span class="token function">rt_list_entry</span><span class="token punctuation">(</span>mp<span class="token operator">-></span>suspend_thread<span class="token punctuation">.</span>next<span class="token punctuation">,</span>                               <span class="token keyword">struct</span> rt_thread<span class="token punctuation">,</span>                               tlist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* set error */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* resume thread */</span>        <span class="token function">rt_thread_resume</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* decrease suspended thread count */</span>        mp<span class="token operator">-></span>suspend_thread_count <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* do a schedule */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mp_free<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有人在等資源，叫醒他，並做一次調度</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;ul&gt;
&lt;li&gt;分配記憶體的時間需固定，而且可確定（可預測）的&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/categories/RT-Thread/"/>
    
    
      <category term="kernel" scheme="http://blog.lusw.dev/tags/kernel/"/>
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/tags/RT-Thread/"/>
    
      <category term="記憶體管理" scheme="http://blog.lusw.dev/tags/%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86/"/>
    
      <category term="Memory Pool" scheme="http://blog.lusw.dev/tags/Memory-Pool/"/>
    
  </entry>
  
  <entry>
    <title>RT-Thread IPC 通信</title>
    <link href="http://blog.lusw.dev/rt-ipc-2/"/>
    <id>http://blog.lusw.dev/rt-ipc-2/</id>
    <published>2018-11-28T13:11:09.000Z</published>
    <updated>2020-01-26T16:54:30.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>File: ipc.c</p></blockquote><h2 id="Mail-Box"><a href="#Mail-Box" class="headerlink" title="Mail Box"></a>Mail Box</h2><ul><li>類似於 pipe，主要用來傳輸資料</li><li>每一封郵件大小為 4 bytes（即 32 位元）</li></ul><h3 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MAILBOX</span><span class="token comment" spellcheck="true">/** * mailbox structure */</span><span class="token keyword">struct</span> rt_mailbox<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_ipc_object parent<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; inherit from ipc_object */</span>    rt_uint32_t         <span class="token operator">*</span>msg_pool<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; start address of message buffer */</span>    rt_uint16_t          size<span class="token punctuation">;</span>                          <span class="token comment" spellcheck="true">/**&lt; size of message pool */</span>    rt_uint16_t          entry<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">/**&lt; index of messages in msg_pool */</span>    rt_uint16_t          in_offset<span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">/**&lt; input offset of the message buffer */</span>    rt_uint16_t          out_offset<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/**&lt; output offset of the message buffer */</span>    rt_list_t            suspend_sender_thread<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/**&lt; sender thread suspended on this mailbox */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rt_mailbox <span class="token operator">*</span>rt_mailbox_t<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>msg_pool</code> 指向郵件堆的起點，<code>entry</code> 紀錄總郵件的數量</li></ul><hr><h3 id="建立-mail-box"><a href="#建立-mail-box" class="headerlink" title="建立 mail box"></a>建立 mail box</h3><h4 id="動態記憶體管理"><a href="#動態記憶體管理" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mb_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 mail box</td><td>mail box</td></tr></tbody></table><table><thead><tr><th><code>*name</code></th><th><code>size</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>名字</td><td>mail box 大小</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will create a mailbox object from system resource * * @param name the name of mailbox * @param size the size of mailbox * @param flag the flag of mailbox * * @return the created mailbox, RT_NULL on error happen */</span>rt_mailbox_t <span class="token function">rt_mb_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">,</span> rt_uint8_t flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    rt_mailbox_t mb<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate object */</span>    mb <span class="token operator">=</span> <span class="token punctuation">(</span>rt_mailbox_t<span class="token punctuation">)</span><span class="token function">rt_object_allocate</span><span class="token punctuation">(</span>RT_Object_Class_MailBox<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> mb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先 allocate 一塊給 mailbox</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set parent */</span>    mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>填入 flag 及初始化</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init mailbox */</span>    mb<span class="token operator">-></span>size     <span class="token operator">=</span> size<span class="token punctuation">;</span>    mb<span class="token operator">-></span>msg_pool <span class="token operator">=</span> <span class="token function">RT_KERNEL_MALLOC</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>rt_uint32_t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>msg_pool <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* delete mailbox object */</span>        <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因使用動態記憶體的緣故，需 allocate 一塊給郵件堆</li><li>大小為一封一件的大小 * size</li></ul><pre class="line-numbers language-c"><code class="language-c">    mb<span class="token operator">-></span>entry      <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mb<span class="token operator">-></span>in_offset  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mb<span class="token operator">-></span>out_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init an additional list of sender suspend thread */</span>    <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mb<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後初始化值及等待鏈</li></ul><hr><h4 id="靜態記憶體管理"><a href="#靜態記憶體管理" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mb_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 mail box</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th><th><code>*name</code></th><th><code>*msgpool</code></th><th><code>size</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>mail box 本體</td><td>名字</td><td>存放郵件的地方</td><td>mail box 大小</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will initialize a mailbox and put it under control of resource * management. * * @param mb the mailbox object * @param name the name of mailbox * @param msgpool the begin address of buffer to save received mail * @param size the size of mailbox * @param flag the flag of mailbox * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_mb_init</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">,</span>                    <span class="token keyword">const</span> <span class="token keyword">char</span>  <span class="token operator">*</span>name<span class="token punctuation">,</span>                    <span class="token keyword">void</span>        <span class="token operator">*</span>msgpool<span class="token punctuation">,</span>                    rt_size_t    size<span class="token punctuation">,</span>                    rt_uint8_t   flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mb <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_Object_Class_MailBox<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent flag */</span>    mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡就不需要 allocate，可直接初始化來使用</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init mailbox */</span>    mb<span class="token operator">-></span>msg_pool   <span class="token operator">=</span> msgpool<span class="token punctuation">;</span>    mb<span class="token operator">-></span>size       <span class="token operator">=</span> size<span class="token punctuation">;</span>    mb<span class="token operator">-></span>entry      <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mb<span class="token operator">-></span>in_offset  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    mb<span class="token operator">-></span>out_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init an additional list of sender suspend thread */</span>    <span class="token function">rt_list_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一樣，郵件堆可直接拿來用，初始化值及等待鏈</li></ul><hr><h3 id="刪除-mail-box"><a href="#刪除-mail-box" class="headerlink" title="刪除 mail box"></a>刪除 mail box</h3><h4 id="動態記憶體管理-1"><a href="#動態記憶體管理-1" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mb_delete</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 mail box</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th></tr></thead><tbody><tr><td>欲刪除的 mail box</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will delete a mailbox object and release the memory * * @param mb the mailbox object * * @return the error code */</span>rt_err_t <span class="token function">rt_mb_delete</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">)</span><span class="token punctuation">{</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mb <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MailBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume all suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* also resume all mailbox private suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先將正在等待郵件的，與正在等待傳送的 thread 叫醒</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* free mailbox pool */</span>    <span class="token function">RT_KERNEL_FREE</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>msg_pool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* delete mailbox object */</span>    <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>歸還郵件堆，最後刪除 mail box</li></ul><hr><h4 id="靜態記憶體管理-1"><a href="#靜態記憶體管理-1" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mb_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 mail box</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th></tr></thead><tbody><tr><td>欲刪除的 mail box</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will detach a mailbox from resource management * * @param mb the mailbox object * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_mb_detach</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mb <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MailBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume all suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* also resume all mailbox private suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先將正在等待郵件的，與正在等待傳送的 thread 叫醒</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* detach mailbox object */</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後刪除 mail box（使用 <code>detach</code>）</li></ul><hr><h3 id="傳送郵件"><a href="#傳送郵件" class="headerlink" title="傳送郵件"></a>傳送郵件</h3><p><i class="fa fa-code"></i> Code: <code>rt_mb_send_wait</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>傳送郵件</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th><th><code>value</code></th><th><code>timeout</code></th></tr></thead><tbody><tr><td>欲傳送的 mailbox</td><td>郵件內容</td><td>等待時間（如果需要）</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will send a mail to mailbox object. If the mailbox is full, * current thread will be suspended until timeout. * * @param mb the mailbox object * @param value the mail * @param timeout the waiting time * * @return the error code */</span>rt_err_t <span class="token function">rt_mb_send_wait</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">,</span>                         rt_uint32_t  value<span class="token punctuation">,</span>                         rt_int32_t   timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    rt_uint32_t tick_delta<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mb <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MailBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize delta tick */</span>    tick_delta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_put_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* for non-blocking call */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>entry <span class="token operator">==</span> mb<span class="token operator">-></span>size <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_EFULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* mailbox is full */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>entry <span class="token operator">==</span> mb<span class="token operator">-></span>size<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* reset error number in thread */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* no waiting, return timeout */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* enable interrupt */</span>            <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span>RT_EFULL<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 mail box 滿了，且不等待 (<code>timeout==0</code>)，回傳 <code>FULL</code></li></ul><pre class="line-numbers language-c"><code class="language-c">        RT_DEBUG_IN_THREAD_CONTEXT<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* suspend current thread */</span>        <span class="token function">rt_ipc_list_suspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">,</span>                            thread<span class="token punctuation">,</span>                            mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* has waiting time, start thread timer */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get the start tick of timer */</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"mb_send_wait: start timer of thread:%s\n"</span><span class="token punctuation">,</span>                                        thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* reset the timeout of thread timer and start it */</span>            <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                             RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span>                             <span class="token operator">&amp;</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若要等待，將 thread 掛上等待鏈，啟動一個 timer</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* re-schedule */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>再做一次調度</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* resume from suspend state */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* return error */</span>            <span class="token keyword">return</span> thread<span class="token operator">-></span>error<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* if it's not waiting forever and then re-calculate timeout tick */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tick_delta<span class="token punctuation">;</span>            timeout <span class="token operator">-</span><span class="token operator">=</span> tick_delta<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如跳回來，重新計算 <code>timeout</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set ptr */</span>    mb<span class="token operator">-></span>msg_pool<span class="token punctuation">[</span>mb<span class="token operator">-></span>in_offset<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* increase input offset */</span>    <span class="token operator">++</span> mb<span class="token operator">-></span>in_offset<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>in_offset <span class="token operator">>=</span> mb<span class="token operator">-></span>size<span class="token punctuation">)</span>        mb<span class="token operator">-></span>in_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* increase message entry */</span>    mb<span class="token operator">-></span>entry <span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若可以寫入，將資料寫入，同時更新 <code>offset</code> 及 <code>entry</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* resume suspended thread */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_ipc_list_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_send_wait<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有人在等待寄信，叫醒他，做一次調度</li></ul><hr><ul><li>若是不想等待，可以使用 <code>rt_mb_send</code></li></ul><p><i class="fa fa-code"></i> Code: <code>rt_mb_send</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>傳送郵件（不等待）</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th><th><code>value</code></th></tr></thead><tbody><tr><td>欲傳送的 mailbox</td><td>郵件內容</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will send a mail to mailbox object, if there are threads * suspended on mailbox object, it will be waked up. This function will return * immediately, if you want blocking send, use rt_mb_send_wait instead. * * @param mb the mailbox object * @param value the mail * * @return the error code */</span>rt_err_t <span class="token function">rt_mb_send</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">,</span> rt_uint32_t value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">rt_mb_send_wait</span><span class="token punctuation">(</span>mb<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_send<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>即 <code>timeout == 0</code></li></ul><hr><h3 id="接受郵件"><a href="#接受郵件" class="headerlink" title="接受郵件"></a>接受郵件</h3><p><i class="fa fa-code"></i> Code: <code>rt_mb_recv</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>接受郵件</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mb</code></th><th><code>*value</code></th><th><code>timeout</code></th></tr></thead><tbody><tr><td>欲收信的 mailbox</td><td>郵件內容</td><td>等待時間（如果需要）</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will receive a mail from mailbox object, if there is no mail * in mailbox object, the thread shall wait for a specified time. * * @param mb the mailbox object * @param value the received mail will be saved in * @param timeout the waiting time * * @return the error code */</span>rt_err_t <span class="token function">rt_mb_recv</span><span class="token punctuation">(</span>rt_mailbox_t mb<span class="token punctuation">,</span> rt_uint32_t <span class="token operator">*</span>value<span class="token punctuation">,</span> rt_int32_t timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    rt_uint32_t tick_delta<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mb <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MailBox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize delta tick */</span>    tick_delta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_trytake_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* for non-blocking call */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>entry <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* mailbox is empty */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>entry <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* reset error number in thread */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* no waiting, return timeout */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* enable interrupt */</span>            <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token operator">-></span>error <span class="token operator">=</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 mail box 沒東西，且不等待，回傳 <code>TIMEOUT</code></li></ul><pre class="line-numbers language-c"><code class="language-c">        RT_DEBUG_IN_THREAD_CONTEXT<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* suspend current thread */</span>        <span class="token function">rt_ipc_list_suspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">,</span>                            thread<span class="token punctuation">,</span>                            mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* has waiting time, start thread timer */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get the start tick of timer */</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"mb_recv: start timer of thread:%s\n"</span><span class="token punctuation">,</span>                                        thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* reset the timeout of thread timer and start it */</span>            <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                             RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span>                             <span class="token operator">&amp;</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若要等待，將 thread 掛上等待鏈，啟動一個 timer</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* re-schedule */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>再做一次調度</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* resume from suspend state */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* return error */</span>            <span class="token keyword">return</span> thread<span class="token operator">-></span>error<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* if it's not waiting forever and then re-calculate timeout tick */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tick_delta<span class="token punctuation">;</span>            timeout <span class="token operator">-</span><span class="token operator">=</span> tick_delta<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如跳回來，重新計算 <code>timeout</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* fill ptr */</span>    <span class="token operator">*</span>value <span class="token operator">=</span> mb<span class="token operator">-></span>msg_pool<span class="token punctuation">[</span>mb<span class="token operator">-></span>out_offset<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* increase output offset */</span>    <span class="token operator">++</span> mb<span class="token operator">-></span>out_offset<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mb<span class="token operator">-></span>out_offset <span class="token operator">>=</span> mb<span class="token operator">-></span>size<span class="token punctuation">)</span>        mb<span class="token operator">-></span>out_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* decrease message entry */</span>    mb<span class="token operator">-></span>entry <span class="token operator">--</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>若可以讀取，將資料寫入，同時更新 <code>offset</code> 及 <code>entry</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* resume suspended thread */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_ipc_list_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>suspend_sender_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_take_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_take_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mb<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mb_recv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有人在等待收信，叫醒他，做一次調度</li></ul><hr><h2 id="Message-Queue"><a href="#Message-Queue" class="headerlink" title="Message Queue"></a>Message Queue</h2><ul><li>特性：可接受不固定長度的訊息</li></ul><h3 id="結構-1"><a href="#結構-1" class="headerlink" title="結構"></a>結構</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> RT_USING_MESSAGEQUEUE</span><span class="token comment" spellcheck="true">/** * message queue structure */</span><span class="token keyword">struct</span> rt_messagequeue<span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_ipc_object parent<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**&lt; inherit from ipc_object */</span>    <span class="token keyword">void</span>                <span class="token operator">*</span>msg_pool<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; start address of message queue */</span>    rt_uint16_t          msg_size<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; message size of each message */</span>    rt_uint16_t          max_msgs<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">/**&lt; max number of messages */</span>    rt_uint16_t          entry<span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">/**&lt; index of messages in the queue */</span>    <span class="token keyword">void</span>                <span class="token operator">*</span>msg_queue_head<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**&lt; list head */</span>    <span class="token keyword">void</span>                <span class="token operator">*</span>msg_queue_tail<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**&lt; list tail */</span>    <span class="token keyword">void</span>                <span class="token operator">*</span>msg_queue_free<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**&lt; pointer indicated the free node of queue */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> rt_messagequeue <span class="token operator">*</span>rt_mq_t<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="建立-message-queue"><a href="#建立-message-queue" class="headerlink" title="建立 message queue"></a>建立 message queue</h3><h4 id="動態記憶體管理-2"><a href="#動態記憶體管理-2" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mq_create</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>建立 message queue</td><td>message queue</td></tr></tbody></table><table><thead><tr><th><code>*name</code></th><th><code>msg_size</code></th><th><code>max_msgs</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>名字</td><td>一封訊息的大小</td><td>訊息數上限</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will create a message queue object from system resource * * @param name the name of message queue * @param msg_size the size of message * @param max_msgs the maximum number of message in queue * @param flag the flag of message queue * * @return the created message queue, RT_NULL on error happen */</span>rt_mq_t <span class="token function">rt_mq_create</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>                     rt_size_t   msg_size<span class="token punctuation">,</span>                     rt_size_t   max_msgs<span class="token punctuation">,</span>                     rt_uint8_t  flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_messagequeue <span class="token operator">*</span>mq<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* allocate object */</span>    mq <span class="token operator">=</span> <span class="token punctuation">(</span>rt_mq_t<span class="token punctuation">)</span><span class="token function">rt_object_allocate</span><span class="token punctuation">(</span>RT_Object_Class_MessageQueue<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        <span class="token keyword">return</span> mq<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent */</span>    mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先要一塊物件給 message queue，並同時填入 flag 及初始化</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init message queue */</span>    <span class="token comment" spellcheck="true">/* get correct message size */</span>    mq<span class="token operator">-></span>msg_size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>msg_size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    mq<span class="token operator">-></span>max_msgs <span class="token operator">=</span> max_msgs<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定訊息的大小，與訊息數量的上限</li></ul><p><code>RT_ALGIN</code> 目的在對齊訊息的大小，根據不同板子所定義不同的 <code>RT_ALIGN_SIZE</code> 會有所差別<br><br><code>#define RT_ALIGN(size, align)           (((size) + (align) - 1) &amp; ~((align) - 1))</code></p><ul><li>如傳進來的是 <code>RT_ALGIN(7,8)</code> 則結果是 8</li><li>如傳進來的是 <code>RT_ALGIN(13,4)</code> 則結果是 16</li><li>即結果為大於後值的<strong>最小倍數</strong></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* allocate message pool */</span>    mq<span class="token operator">-></span>msg_pool <span class="token operator">=</span> <span class="token function">RT_KERNEL_MALLOC</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> mq<span class="token operator">-></span>max_msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_pool <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_mq_delete</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_NULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著需 allocate 適當的記憶體存放訊息</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* init message list */</span>    mq<span class="token operator">-></span>msg_queue_head <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init message empty list */</span>    mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> temp <span class="token operator">&lt;</span> mq<span class="token operator">-></span>max_msgs<span class="token punctuation">;</span> temp <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_pool <span class="token operator">+</span>                                        temp <span class="token operator">*</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> mq<span class="token operator">-></span>msg_queue_free<span class="token punctuation">;</span>        mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先將頭尾設為空，再一塊一塊的將 <code>msg_pool</code> 插在 free list 的第一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* the initial entry is zero */</span>    mq<span class="token operator">-></span>entry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mq<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_create<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後設定 <code>entry</code> 為 0</li></ul><hr><h4 id="靜態記憶體管理-2"><a href="#靜態記憶體管理-2" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mq_init</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>初始化 message queue</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th><th><code>*name</code></th><th><code>*msgpool</code></th><th><code>msg_size</code></th><th><code>pool_size</code></th><th><code>flag</code></th></tr></thead><tbody><tr><td>message queue 本體</td><td>名字</td><td>存放訊息的位址</td><td>一封訊息的大小</td><td>存放訊息的大小</td><td>FIFO / PRIO</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will initialize a message queue and put it under control of * resource management. * * @param mq the message object * @param name the name of message queue * @param msgpool the beginning address of buffer to save messages * @param msg_size the maximum size of message * @param pool_size the size of buffer to save messages * @param flag the flag of message queue * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_mq_init</span><span class="token punctuation">(</span>rt_mq_t     mq<span class="token punctuation">,</span>                    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>                    <span class="token keyword">void</span>       <span class="token operator">*</span>msgpool<span class="token punctuation">,</span>                    rt_size_t   msg_size<span class="token punctuation">,</span>                    rt_size_t   pool_size<span class="token punctuation">,</span>                    rt_uint8_t  flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span>head<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_base_t temp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init object */</span>    <span class="token function">rt_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span> RT_Object_Class_MessageQueue<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* set parent flag */</span>    mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init ipc object */</span>    <span class="token function">rt_ipc_object_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡就不需要去要一塊物件，直接拿來用即可</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set messasge pool */</span>    mq<span class="token operator">-></span>msg_pool <span class="token operator">=</span> msgpool<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get correct message size */</span>    mq<span class="token operator">-></span>msg_size <span class="token operator">=</span> <span class="token function">RT_ALIGN</span><span class="token punctuation">(</span>msg_size<span class="token punctuation">,</span> RT_ALIGN_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    mq<span class="token operator">-></span>max_msgs <span class="token operator">=</span> pool_size <span class="token operator">/</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init message list */</span>    mq<span class="token operator">-></span>msg_queue_head <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* init message empty list */</span>    mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> temp <span class="token operator">&lt;</span> mq<span class="token operator">-></span>max_msgs<span class="token punctuation">;</span> temp <span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rt_uint8_t <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_pool <span class="token operator">+</span>                                        temp <span class="token operator">*</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_size <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> mq<span class="token operator">-></span>msg_queue_free<span class="token punctuation">;</span>        mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* the initial entry is zero */</span>    mq<span class="token operator">-></span>entry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_init<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其餘的動作皆與上面相同</li></ul><hr><h3 id="刪除-message-queue"><a href="#刪除-message-queue" class="headerlink" title="刪除 message queue"></a>刪除 message queue</h3><h4 id="動態記憶體管理-3"><a href="#動態記憶體管理-3" class="headerlink" title="動態記憶體管理"></a>動態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mq_delete</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 message queue</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th></tr></thead><tbody><tr><td>欲刪除的 message queue</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will delete a message queue object and release the memory * * @param mq the message queue object * * @return the error code */</span>rt_err_t <span class="token function">rt_mq_delete</span><span class="token punctuation">(</span>rt_mq_t mq<span class="token punctuation">)</span><span class="token punctuation">{</span>    RT_DEBUG_NOT_IN_INTERRUPT<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume all suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>先把正在等待收訊息的 thread 叫醒</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* free message queue pool */</span>    <span class="token function">RT_KERNEL_FREE</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_pool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* delete message queue object */</span>    <span class="token function">rt_object_delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著 free <code>msg_pool</code>，並刪除物件</li></ul><hr><h4 id="靜態記憶體管理-3"><a href="#靜態記憶體管理-3" class="headerlink" title="靜態記憶體管理"></a>靜態記憶體管理</h4><p><i class="fa fa-code"></i> Code: <code>rt_mq_detach</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>刪除 message queue</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th></tr></thead><tbody><tr><td>欲刪除的 message queue</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will detach a message queue object from resource management * * @param mq the message queue object * * @return the operation status, RT_EOK on successful */</span>rt_err_t <span class="token function">rt_mq_detach</span><span class="token punctuation">(</span>rt_mq_t mq<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_is_systemobject</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume all suspended thread */</span>    <span class="token function">rt_ipc_list_resume_all</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* detach message queue object */</span>    <span class="token function">rt_object_detach</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_detach<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡的 <code>msg_pool</code> 就不需要 free</li></ul><hr><h3 id="傳送訊息"><a href="#傳送訊息" class="headerlink" title="傳送訊息"></a>傳送訊息</h3><p><i class="fa fa-code"></i> Code: <code>rt_mq_send</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>傳送訊息</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th><th><code>*buffer</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>欲傳送的 message queue</td><td>訊息資料</td><td>訊息大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will send a message to message queue object, if there are * threads suspended on message queue object, it will be waked up. * * @param mq the message queue object * @param buffer the message * @param size the size of buffer * * @return the error code */</span>rt_err_t <span class="token function">rt_mq_send</span><span class="token punctuation">(</span>rt_mq_t mq<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span>msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>buffer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* greater than one message size */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> mq<span class="token operator">-></span>msg_size<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_put_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get a free list, there must be an empty item */</span>    msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_queue_free<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* message queue is full */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_EFULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先確定 message queue 沒滿（即 free list 不為空）</li><li>如果滿了，回傳 <code>FULL</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* move free list pointer */</span>    mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> msg<span class="token operator">-></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>接著 free list 往下一顆走</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* the msg is the new tailer of list, the next shall be NULL */</span>    msg<span class="token operator">-></span>next <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* copy buffer */</span>    <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>將訊息填入從 free list 拿的一顆（<code>msg</code>），這顆待會是新的尾巴（設定 <code>next = NULL</code>）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* link msg to message queue */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* if the tail exists, */</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_queue_tail<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果尾巴不為空（也就是 message queue 有東西），將原本的尾巴指向 <code>msg</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* set new tail */</span>    mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* if the head is empty, set head */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_queue_head <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        mq<span class="token operator">-></span>msg_queue_head <span class="token operator">=</span> msg<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>設定新的尾巴</li><li>如果頭為空（也就是 message queue 為空），設定新的頭</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* increase message entry */</span>    mq<span class="token operator">-></span>entry <span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>最後更新 <code>entry</code> </li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* resume suspended thread */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_ipc_list_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_send<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果有人在等待接收訊息，叫醒他</li></ul><hr><h4 id="傳送緊急訊息"><a href="#傳送緊急訊息" class="headerlink" title="傳送緊急訊息"></a>傳送緊急訊息</h4><ul><li>與上面不同的是：這裡將新訊息插入<strong>第一顆</strong></li></ul><p><i class="fa fa-code"></i> Code: <code>rt_mq_urgent</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>傳送緊急訊息</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th><th><code>*buffer</code></th><th><code>size</code></th></tr></thead><tbody><tr><td>欲傳送的 message queue</td><td>訊息資料</td><td>訊息大小</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will send an urgent message to message queue object, which * means the message will be inserted to the head of message queue. If there * are threads suspended on message queue object, it will be waked up. * * @param mq the message queue object * @param buffer the message * @param size the size of buffer * * @return the error code */</span>rt_err_t <span class="token function">rt_mq_urgent</span><span class="token punctuation">(</span>rt_mq_t mq<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span> rt_size_t size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span>msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>buffer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* greater than one message size */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> mq<span class="token operator">-></span>msg_size<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ERROR<span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_put_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get a free list, there must be an empty item */</span>    msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_queue_free<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* message queue is full */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_EFULL<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* move free list pointer */</span>    mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> msg<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* copy buffer */</span>    <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因為要插在第一顆，<code>next</code> 就不用設定為空了</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* link msg to the beginning of message queue */</span>    msg<span class="token operator">-></span>next <span class="token operator">=</span> mq<span class="token operator">-></span>msg_queue_head<span class="token punctuation">;</span>    mq<span class="token operator">-></span>msg_queue_head <span class="token operator">=</span> msg<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這裡就將新訊息插在第一顆</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* if there is no tail */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">==</span> RT_NULL<span class="token punctuation">)</span>        mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">=</span> msg<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>如果原本的 message queue 為空，設定新的尾巴</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* increase message entry */</span>    mq<span class="token operator">-></span>entry <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* resume suspended thread */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rt_list_isempty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_ipc_list_resume</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_urgent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他的動作皆相同</li></ul><hr><h3 id="接收訊息"><a href="#接收訊息" class="headerlink" title="接收訊息"></a>接收訊息</h3><p><i class="fa fa-code"></i> Code: <code>rt_mq_recv</code></p><table><thead><tr><th>功能</th><th>回傳值</th></tr></thead><tbody><tr><td>接收訊息</td><td><code>RT_EOK</code></td></tr></tbody></table><table><thead><tr><th><code>mq</code></th><th><code>*buffer</code></th><th><code>size</code></th><th><code>timeout</code></th></tr></thead><tbody><tr><td>欲訊息 message queue</td><td>訊息存放處</td><td>訊息存放處大小</td><td>等待時間（如果需要）</td></tr></tbody></table><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/** * This function will receive a message from message queue object, if there is * no message in message queue object, the thread shall wait for a specified * time. * * @param mq the message queue object * @param buffer the received message will be saved in * @param size the size of buffer * @param timeout the waiting time * * @return the error code */</span>rt_err_t <span class="token function">rt_mq_recv</span><span class="token punctuation">(</span>rt_mq_t    mq<span class="token punctuation">,</span>                    <span class="token keyword">void</span>      <span class="token operator">*</span>buffer<span class="token punctuation">,</span>                    rt_size_t  size<span class="token punctuation">,</span>                    rt_int32_t timeout<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> rt_thread <span class="token operator">*</span>thread<span class="token punctuation">;</span>    <span class="token keyword">register</span> rt_ubase_t temp<span class="token punctuation">;</span>    <span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span>msg<span class="token punctuation">;</span>    rt_uint32_t tick_delta<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* parameter check */</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>mq <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span><span class="token function">rt_object_get_type</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> RT_Object_Class_MessageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>buffer <span class="token operator">!=</span> RT_NULL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_ASSERT</span><span class="token punctuation">(</span>size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* initialize delta tick */</span>    tick_delta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* get current thread */</span>    thread <span class="token operator">=</span> <span class="token function">rt_thread_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_trytake_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* for non-blocking call */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>entry <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* message queue is empty */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>entry <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        RT_DEBUG_IN_THREAD_CONTEXT<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* reset error number in thread */</span>        thread<span class="token operator">-></span>error <span class="token operator">=</span> RT_EOK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* no waiting, return timeout */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* enable interrupt */</span>            <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token operator">-></span>error <span class="token operator">=</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span>RT_ETIMEOUT<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 message queue 為空，且不等待，回傳 <code>TIMEOUT</code></li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* suspend current thread */</span>        <span class="token function">rt_ipc_list_suspend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>suspend_thread<span class="token punctuation">)</span><span class="token punctuation">,</span>                            thread<span class="token punctuation">,</span>                            mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如要等待，將 thread 掛在等待鏈上</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* has waiting time, start thread timer */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* get the start tick of timer */</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">RT_DEBUG_LOG</span><span class="token punctuation">(</span>RT_DEBUG_IPC<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"set thread:%s to timer list\n"</span><span class="token punctuation">,</span>                                        thread<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* reset the timeout of thread timer and start it */</span>            <span class="token function">rt_timer_control</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">,</span>                             RT_TIMER_CTRL_SET_TIME<span class="token punctuation">,</span>                             <span class="token operator">&amp;</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rt_timer_start</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>thread<span class="token operator">-></span>thread_timer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>並啟動一個 timer</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* enable interrupt */</span>        <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* re-schedule */</span>        <span class="token function">rt_schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>開始等待，做一次調度</li></ul><pre class="line-numbers language-c"><code class="language-c">        <span class="token comment" spellcheck="true">/* recv message */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>thread<span class="token operator">-></span>error <span class="token operator">!=</span> RT_EOK<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* return error */</span>            <span class="token keyword">return</span> thread<span class="token operator">-></span>error<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* disable interrupt */</span>        temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* if it's not waiting forever and then re-calculate timeout tick */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tick_delta <span class="token operator">=</span> <span class="token function">rt_tick_get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> tick_delta<span class="token punctuation">;</span>            timeout <span class="token operator">-</span><span class="token operator">=</span> tick_delta<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如跳回來，重新計算 <code>timeout</code></li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* get message from queue */</span>    msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_queue_head<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* move message queue head */</span>    mq<span class="token operator">-></span>msg_queue_head <span class="token operator">=</span> msg<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* reach queue tail, set to NULL */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">==</span> msg<span class="token punctuation">)</span>        mq<span class="token operator">-></span>msg_queue_tail <span class="token operator">=</span> RT_NULL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 message queue 有資料，拿第一顆，同時更新 head（tail，如果需要）</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* decrease message entry */</span>    mq<span class="token operator">-></span>entry <span class="token operator">--</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>更新 entry</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* copy message */</span>    <span class="token function">rt_memcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> msg <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> size <span class="token operator">></span> mq<span class="token operator">-></span>msg_size <span class="token operator">?</span> mq<span class="token operator">-></span>msg_size <span class="token punctuation">:</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接著複製找到的訊息</li></ul><pre class="line-numbers language-c"><code class="language-c">    <span class="token comment" spellcheck="true">/* disable interrupt */</span>    temp <span class="token operator">=</span> <span class="token function">rt_hw_interrupt_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* put message to free list */</span>    msg<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> rt_mq_message <span class="token operator">*</span><span class="token punctuation">)</span>mq<span class="token operator">-></span>msg_queue_free<span class="token punctuation">;</span>    mq<span class="token operator">-></span>msg_queue_free <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* enable interrupt */</span>    <span class="token function">rt_hw_interrupt_enable</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">RT_OBJECT_HOOK_CALL</span><span class="token punctuation">(</span>rt_object_take_hook<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>mq<span class="token operator">-></span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> RT_EOK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RTM_EXPORT</span><span class="token punctuation">(</span>rt_mq_recv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>最後將 <code>msg</code> 插入 free list 的頭</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css&quot;&gt;&lt;blockquote&gt;
&lt;p&gt;File: ipc.c&lt;/p&gt;
&lt;/blockqu
      
    
    </summary>
    
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/categories/RT-Thread/"/>
    
    
      <category term="kernel" scheme="http://blog.lusw.dev/tags/kernel/"/>
    
      <category term="RT-Thread" scheme="http://blog.lusw.dev/tags/RT-Thread/"/>
    
      <category term="event" scheme="http://blog.lusw.dev/tags/event/"/>
    
      <category term="message" scheme="http://blog.lusw.dev/tags/message/"/>
    
      <category term="mailbox" scheme="http://blog.lusw.dev/tags/mailbox/"/>
    
  </entry>
  
</feed>
